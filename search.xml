<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Andorid模拟器与开发工具的安装与使用</title>
    <url>/2022/04/05/Andorid%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言——准备"><a href="#前言——准备" class="headerlink" title="前言——准备"></a>前言——准备</h1><p><strong>安装SDK前的准备工作</strong><br>首先为了实现 移动端的自动化控制 还需要一些工具来支持<br>需要设置好<a class="link"   href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" >Proxy SwitchyOmega <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="什么是SDK"><a href="#什么是SDK" class="headerlink" title="什么是SDK"></a>什么是SDK</h2><p>SDK是一系列程序接口，文档，开发工具的集合，是的，集合，sdk即单单不是一个开发工具，也不是一个程序。一个完整的SDK应该包括以下内容：<br>（1）接口文件和库文件<br>（2）帮助文档<br>（3）开发示例<br>（4）实用工具。<br>接口文件和库文件就是API，将底层的代码进行封装保护，提供给用户一个调用底层代码的接口；</p>
<p>Android SDK 指的是 Android专属的软件开发工具包</p>
<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><ul>
<li>配置jdk的环境</li>
<li>下载地址 <ul>
<li><a class="link"   href="https://www.oracle.com/java/technologies/downloads/#java8" >https://www.oracle.com/java/technologies/downloads/#java8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>有个做ui手工测试的只支持 jdk8 所以 必须安装jdk8</li>
</ul>
<p><strong>安装</strong><br>在电脑D盘新建 Java&#x2F;jdk &#x2F;Java&#x2F;jre<br><img src="https://s2.loli.net/2024/09/05/we43bTJvOPijz92.png"><br>选择jre 也是在D盘<br><img src="https://s2.loli.net/2024/09/05/zWpxetFnBvUma2r.png"></p>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ol>
<li><strong>D:\Java\jdk\bin 添加至 path中</strong></li>
<li>系统变量添加 <ol>
<li>JAVA_HOME : D:\JAVA\JDK</li>
<li>CLASSPATH : .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</li>
</ol>
</li>
</ol>
<p>测试是否安装成功<br><img src="https://s2.loli.net/2024/09/05/qfQ9oRjkezc5Lyx.png"></p>
<h1 id="Android开发工具的安装"><a href="#Android开发工具的安装" class="headerlink" title="Android开发工具的安装"></a>Android开发工具的安装</h1><h2 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h2><p>SDK下载地址<br>SDK下载地址：<br>旧：<a class="link"   href="http://tools.android-studio.org/index.php/sdk" >http://tools.android-studio.org/index.php/sdk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>新：<a class="link"   href="https://www.androiddevtools.cn/" >https://www.androiddevtools.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img src="https://s2.loli.net/2024/09/05/nJG4RSiAgfPWr5H.png"></p>
<p>下载 24.4.1<br><strong>安装过程</strong></p>
<ol>
<li>他会首先检查java环境是否安装<br><img src="https://s2.loli.net/2024/09/05/wiW1GgnlvpNEMZS.png"></li>
<li>其次选择安装路径<br><img src="https://s2.loli.net/2024/09/05/HvsuW4SpkiRfN9V.png"></li>
<li>依次选择下一步安装 </li>
<li>先不用勾选这个start SDK<br><img src="https://s2.loli.net/2024/09/05/gKL7MkpnQPctdyH.png"></li>
</ol>
<h2 id="安装好-设置环境变量"><a href="#安装好-设置环境变量" class="headerlink" title="安装好 设置环境变量"></a>安装好 设置环境变量</h2><p>在系统变量中设置<br>ANDROID_HOME : D:&#x2F;SDK</p>
<p>系统变量下面<br>设置path的变量</p>
<blockquote>
<p>;% ANDROID_HOME%\platform-tools;% ANDROID_HOME%\tools</p>
</blockquote>
<p>win 10 11 直接path 新建</p>
<blockquote>
<p>% ANDROID_HOME%\platform-tools;% ANDROID_HOME%\tools</p>
</blockquote>
<p>然后打开 sdk manager 安装所需的工具<br>因为国内环境太慢<br>所以需要 打开 tools&gt; options 设置代理<br><img src="https://s2.loli.net/2024/09/05/ZBSaHoMjAKDkWlc.png"><br>然后关闭</p>
<p>选择Packages<br><img src="https://s2.loli.net/2024/09/05/NZetmoMK2Ddruf8.png"><br>大连东软信息学院镜像服务器地址:</p>
<ul>
<li><a class="link"   href="http://mirrors.neusoft.edu.cn/" >http://mirrors.neusoft.edu.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 端口：80<br>北京化工大学镜像服务器地址:</li>
<li>IPv4: <a class="link"   href="http://ubuntu.buct.edu.cn/" >http://ubuntu.buct.edu.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 端口：80</li>
<li>IPv4: <a class="link"   href="http://ubuntu.buct.cn/" >http://ubuntu.buct.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 端口：80</li>
<li>IPv6: <a class="link"   href="http://ubuntu.buct6.edu.cn/" >http://ubuntu.buct6.edu.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 端口：80<br>上海GDG镜像服务器地址:</li>
<li><a class="link"   href="http://sdk.gdgshanghai.com/" >http://sdk.gdgshanghai.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 端口：8000</li>
</ul>
<p>选择 安装的包如下<br><img src="https://s2.loli.net/2024/09/05/Ds3P1jlApGx6g7m.png"></p>
<p><img src="https://s2.loli.net/2024/09/05/pHXaUcotB8d4RxV.png"><br>安装即可</p>
<h1 id="使用AndroidStudio-来安装"><a href="#使用AndroidStudio-来安装" class="headerlink" title="使用AndroidStudio 来安装"></a>使用AndroidStudio 来安装</h1><p>编译器下载地址： <a class="link"   href="https://developer.android.google.cn/studio/#downloads" >https://developer.android.google.cn/studio/#downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载安装步骤不讲了 就一直下一步下一步 然后选择路径然后再下一步<br>打开软件&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/sdUa9vZp7qkNeXI.png"><br>直接选择 <code>cancel</code><br>next&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/oOPjLg74Kv9ZdsJ.png"><br>next&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/m3dSAFaI4T1oyit.png"><br>next 选择安装好的JDK&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/qNAOvDlIWJX5keR.png"><br>next 选择喜欢的主题 &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/GXYV1QEDbSqeWIz.png"><br>next &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/WKC8c7hPnXOadyQ.png"><br>给模拟器的大小配置 （根据配置来 越大越好） 如果要使用他自带的模拟器的话。next &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/oHLSe6RfwTG3F1D.png"><br>等待安装, finish &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/iVrh8LksDqYGFQe.png"><br>安装成功！！<br><img src="https://s2.loli.net/2024/09/05/jXw49PqBnTxbNd8.png"><br>到了这一步还没算完结&#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/K9lZrocvEi51m4e.png"><br>还需要对某些配置进行设置&#x3D;&gt;</p>
<h2 id="配置configure"><a href="#配置configure" class="headerlink" title="配置configure"></a>配置configure</h2><p><img src="https://s2.loli.net/2024/09/05/ZRam3SgUYCjNrqc.png"><br>选择第一项SDK manager(AVD manager 是对模拟器进行配置，如果不用这个自带的模拟器就不需要配置) &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/YxfdF4wzQpohcgO.png"><br>然后选择sdk tools &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/8OyKfqiD6EcXJ2j.png"><br>选择好安装的工具 &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/DcES36275qGw9bP.png"><br>next  &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/UtCcZkNQgzwREx3.png"><br>finish &#x3D;&gt;<br><img src="https://s2.loli.net/2024/09/05/R4LT8NwrplJC2Qa.png"><br>然后就算创建完毕了<br>然后去新建工程即可。</p>
<h2 id="如何新建工程"><a href="#如何新建工程" class="headerlink" title="如何新建工程"></a>如何新建工程</h2><p><img src="https://s2.loli.net/2024/09/05/pUStAaZXBFwOfsv.png"><br>选择&#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/HjCkpusvDNQrASo.png"><br>下一步 &#x3D; &gt;<br><img src="https://s2.loli.net/2024/09/05/9Nkh36slFvOpWgn.png"><br><img src="https://s2.loli.net/2024/09/05/muJlQ2AgMFBLvxb.png"><br>这样就代表创建完毕了</p>
<h1 id="adb简单介绍"><a href="#adb简单介绍" class="headerlink" title="adb简单介绍"></a>adb简单介绍</h1><p>Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作，例如安装和调试应用。adb 提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序，包括以下三个组件：</p>
<p>客户端：用于发送命令。客户端在开发机器上运行。您可以通过发出 adb 命令从命令行终端调用客户端。<br>守护程序 (adbd)：用于在设备上运行命令。守护程序在每个设备上作为后台进程运行。<br>服务器：用于管理客户端与守护程序之间的通信。服务器在开发机器上作为后台进程运行。<br>adb 包含在 Android SDK 平台工具软件包中。您可以使用 SDK 管理器下载此软件包，该管理器会将其安装在 android_sdk&#x2F;platform-tools&#x2F; 下。如果您需要独立的 Android SDK 平台工具软件包，请点击此处进行下载。<br>如需了解如何通过 adb 连接设备以供使用，包括如何使用 Connection Assistant 来排查常见问题，请参阅在硬件设备上运行应用。<br>adb 是有个通用命令行工具 他允许您与模拟器实例或者链接的Android设备进行通信，他可为各种设备操作提供便利，比如安装和调试应用</p>
<p>adb在 D:\SDK\platform-tools 目录下<br><img src="https://s2.loli.net/2024/09/05/bpmWvzLD1QGKyUd.png"></p>
<p>启动adb 服务<br>在命令行中输入<br><code>adb start-server</code><br>会启动tcp端口 5037</p>
<p>连续敲击n下 手机的版本号选项进入开发者模式<br><img src="https://s2.loli.net/2024/09/05/6ZVAIf4LSnO1jbU.png"><br>打开开发者选项 打开 <code>usb调试</code></p>
<h1 id="各种模拟器上连接adb"><a href="#各种模拟器上连接adb" class="headerlink" title="各种模拟器上连接adb"></a>各种模拟器上连接adb</h1><h2 id="夜神模拟器连接adb"><a href="#夜神模拟器连接adb" class="headerlink" title="夜神模拟器连接adb"></a>夜神模拟器连接adb</h2><p><strong>注： adb 电脑安装的版本和手机版本不兼容</strong></p>
<ul>
<li>打开夜神模拟器的bin目录<br>将<img src="https://s2.loli.net/2024/09/05/iYAo21lTa3B8ReQ.png"></li>
<li>这三个目录备份起来</li>
<li>再将 platfrom-tools中的这三个文件拷贝进来</li>
<li>需要把夜神模拟器里的nox_adb.exe给替换掉<br>将夜神模拟器安装路径的bin目录下的之前的nox_adb.exe备份 或者删除<br>将platform-tools目录下的adb.exe复制过去，并改名称为nox_adb.exe</li>
<li>之后重新运行我们的安卓模拟器</li>
<li>然后在命令行输入 adb device</li>
</ul>
<p><img src="https://s2.loli.net/2024/09/05/9o453wqkrUK1NAC.png"><br>就能看见链接了一台设备了</p>
<h2 id="MuMu模拟器上连接adb"><a href="#MuMu模拟器上连接adb" class="headerlink" title="MuMu模拟器上连接adb"></a>MuMu模拟器上连接adb</h2><p>官方文档： <a class="link"   href="https://mumu.163.com/help/20220721/35047_730476.html" >https://mumu.163.com/help/20220721/35047_730476.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>第一步，打开MuMu模拟器安装路径下的bin文件夹（具体路径为~\emulator\nemu\vmonitor\bin），然后点击文件夹路径，输入CMD，再点击回车按键呼出CMD运行窗口（如下图）；<br><img src="https://s2.loli.net/2024/09/05/C6BDtLVWrzIPUx8.png"></p>
<p>打开cmd终端后<br>第二步，输入以下代码（具体可参考下图）：<br>友情提示：  要打开MuMu模拟器 再操作如下代码<br>最好也把root打开（反正迟早要打开）<br><img src="https://s2.loli.net/2024/09/05/8zERnP6HSx4csLd.png"><br><img src="https://s2.loli.net/2024/09/05/51xCeW9z7aibcNL.png"></p>
<blockquote>
<p>代码如下<br>adb_server.exe connect 127.0.0.1:7555<br>adb_server shell<br><img src="https://s2.loli.net/2024/09/05/Xexl8tTBgbYj2A5.png"></p>
</blockquote>
<h1 id="adb工具的使用"><a href="#adb工具的使用" class="headerlink" title="adb工具的使用"></a>adb工具的使用</h1><h2 id="adb-连接-手机"><a href="#adb-连接-手机" class="headerlink" title="adb 连接 手机"></a>adb 连接 手机</h2><p>进入 手机底层操作系统<br>win+r<br><img src="https://s2.loli.net/2024/09/05/x6rysLk2mAzCK1n.png"><br><code>adb -s + 手机名 shell</code></p>
<p>同理 也可以直接进入 手机模拟器<br><img src="https://s2.loli.net/2024/09/05/dW1EyPwcb7Nk4fL.png"></p>
<h2 id="通过adb-命令行安装"><a href="#通过adb-命令行安装" class="headerlink" title="通过adb 命令行安装"></a>通过adb 命令行安装</h2><p><code>adb -s 手机名 install xxx.apk(直接拖拽即可)</code></p>
<p>例：安装手机京东 如下图所示<br><img src="https://s2.loli.net/2024/09/05/ezEI6vAoPqig8lp.png"><br>这样代表就是安装成功<br><img src="https://s2.loli.net/2024/09/05/WcunXVb1IkNJTOs.png"></p>
<h2 id="通过adb命令卸载"><a href="#通过adb命令卸载" class="headerlink" title="通过adb命令卸载"></a>通过adb命令卸载</h2><blockquote>
<p>我们安装时使用的<strong>文件名</strong>去安装<br>但是卸载需要使用<strong>包名</strong>去卸载</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">adb -s xxx shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd /data/app</span></span><br><span class="line"><span class="comment"># ls </span></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line">$ adb -s 127.0.0.1:62001 uninstall com.jingdong.app.mall</span><br></pre></td></tr></table></figure></div>

<p><img src="https://s2.loli.net/2024/09/05/G1nWkZS4AjlPTCz.png"><br><img src="https://s2.loli.net/2024/09/05/2aKSAP7cEdhiZ9x.png"><br>提示success 即代表卸载成功</p>
<p><strong>注：如果 adb device 没有设备</strong></p>
<p>可以 尝试命令<br><code>adb connect 127.0.0.1:62001</code></p>
<p>即可发现设备</p>
<h2 id="其他-adb的功能"><a href="#其他-adb的功能" class="headerlink" title="其他 adb的功能"></a>其他 adb的功能</h2><p><strong>通过命令 查看系统安装包名</strong></p>
<p><code>adb shell pm list package</code></p>
<p><strong>传递 数据 将电脑的文件传到夜神模拟器中</strong><br>adb push [文件路径] [存储路径]</p>
<p><code>adb push C:\abc.text /sdcard</code><br><img src="https://s2.loli.net/2024/09/05/2aKSAP7cEdhiZ9x.png"><br>这样代表上传成功</p>
<p><strong>传递 数据 将夜神模拟器的文件传到电脑中</strong><br>adb pull [文件路径] [存储路径]</p>
<p><code>adb pull /init C:\Users\13689\Desktop</code></p>
<p><img src="https://s2.loli.net/2024/09/05/AwE1FNjBxJQkZnd.png"></p>
<p>注意： 不能直接pull到根目录</p>
<p><strong>adb 远程截图</strong><br><code>adb shell screencap /sdcard/test.png</code></p>
<p>故 adb 可以通过 远程对我们手机进行一系列的操作</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu安装anconda3 与Miniconda</title>
    <url>/2022/03/15/ubuntu%E5%AE%89%E8%A3%85anconda3/</url>
    <content><![CDATA[<h1 id="ubuntu-安装anaconda3"><a href="#ubuntu-安装anaconda3" class="headerlink" title="ubuntu 安装anaconda3"></a>ubuntu 安装anaconda3</h1><p>官网:<a class="link"   href="https://www.anaconda.com/" >https://www.anaconda.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>下载:<a class="link"   href="https://www.anaconda.com/products/individual#Downloads" >https://www.anaconda.com/products/individual#Downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>MiniAndonda:  <a class="link"   href="https://docs.anaconda.com/miniconda/" >https://docs.anaconda.com/miniconda/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入以下命令执行所下载的安装程序：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">bash Anaconda3-2021.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></div>

<p>Miniconda</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></div>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>为了下载库的时候速度更快，更换conda下载源为清华大学镜像</p>
<div class="highlight-container" data-rel="Arduino"><figure class="iseeu highlight arduino"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></div>
<p>在 &#x2F;home&#x2F;xxx里面添加Anaconda-python路径</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/xxx/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span>  <span class="comment">## 在zshrc添加路径，然后保存退出</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<p>然后在ubuntu 输入命令</p>
<blockquote>
<p>conda –version</p>
</blockquote>
<p><strong>建立虚拟环境</strong></p>
<blockquote>
<p>conda create -n test python&#x3D;3.9</p>
</blockquote>
<p><strong>激活 虚拟环境</strong></p>
<blockquote>
<p>conda activate test</p>
</blockquote>
<p><strong>在虚拟环境安装软件</strong></p>
<blockquote>
<p>conda install spyder</p>
</blockquote>
<p><strong>关闭虚拟环境</strong></p>
<blockquote>
<p>deactivate</p>
</blockquote>
<p><strong>移除环境</strong></p>
<blockquote>
<p>conda remove –name test –all</p>
</blockquote>
<p><strong>删除已经设定好默认镜像源，恢复原来的源</strong></p>
<blockquote>
<p>conda config –remove-key channels</p>
</blockquote>
<p><strong>列出当前所有的环境</strong></p>
<blockquote>
<p>conda env list</p>
</blockquote>
<p><strong>重置Base环境</strong></p>
<blockquote>
<p>conda install –revision 0</p>
</blockquote>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>Gin_gorm时间格式化模型类重写</title>
    <url>/2023/10/26/Gin-gorm%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%B1%BB%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p>问题：</p>
<blockquote>
<p>在使用GORM中 如果我们使用到了CreateAt 和UpdateAt 就会发现 这个时间的类型是time.Time 而其数据是<br>“2022-10-13T10:14:02.973528+08:00” 这样的,<br>然而这样的数据你说能用确实能用 ，但是一旦写入数据库中就变成了<br>0001-01-01 00:00:00.000000 +00:00</p>
</blockquote>
<h1 id="重写数据类型"><a href="#重写数据类型" class="headerlink" title="重写数据类型"></a>重写数据类型</h1><p>话不多说 直接上代码<br>并且此代码通用【小弟也是copy学习视频上的】</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql/driver&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeFormat = <span class="string">&quot;2006-01-02 15:04:05&quot;</span></span><br><span class="line"><span class="keyword">const</span> timezone = <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Time time.Time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> MarshalJSON() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(timeFormat)+<span class="number">2</span>)</span><br><span class="line">    b = <span class="built_in">append</span>(b, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">    b = time.Time(t).AppendFormat(b, timeFormat)</span><br><span class="line">    b = <span class="built_in">append</span>(b, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Time)</span></span> UnmarshalJSON(data []<span class="type">byte</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line">    now, err := time.ParseInLocation(<span class="string">`&quot;`</span>+timeFormat+<span class="string">`&quot;`</span>, <span class="type">string</span>(data), time.Local)</span><br><span class="line">    *t = Time(now)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Time(t).Format(timeFormat)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> local() time.Time &#123;</span><br><span class="line">    loc, _ := time.LoadLocation(timezone)</span><br><span class="line">    <span class="keyword">return</span> time.Time(t).In(loc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Value() (driver.Value, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> zeroTime time.Time</span><br><span class="line">    <span class="keyword">var</span> ti = time.Time(t)</span><br><span class="line">    <span class="keyword">if</span> ti.UnixNano() == zeroTime.UnixNano() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ti, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Time)</span></span> Scan(v <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">    value, ok := v.(time.Time)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        *t = Time(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;can not convert %v to timestamp&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>至于调用就更简单了 如下代码所示</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Category <span class="keyword">struct</span> &#123;</span><br><span class="line"> <span class="comment">//*gorm.Model</span></span><br><span class="line"> ID       <span class="type">uint</span>      <span class="string">`json:&quot;id&quot; gorm:&quot;primary key&quot;`</span></span><br><span class="line"> Name     <span class="type">string</span>    <span class="string">`json:&quot;name&quot; gorm:&quot;type:varchar(50); not null;unique&quot;`</span></span><br><span class="line"> CreatedAt Time     <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line"> UpdatedAt Time     <span class="string">`json:&quot;update_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Gin速用</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在ubuntu上安装golang</title>
    <url>/2022/03/26/%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85golang/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p><a class="link"   href="https://golang.google.cn/dl/" >https://golang.google.cn/dl/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://golang.google.cn/dl/go1.19.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p>
<h2 id="解压到文件夹下"><a href="#解压到文件夹下" class="headerlink" title="解压到文件夹下"></a>解压到文件夹下</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">sudo tar -xvzf go1<span class="number">.19</span>.linux-amd64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p>
<h2 id="编译配置环境变量"><a href="#编译配置环境变量" class="headerlink" title="编译配置环境变量"></a>编译配置环境变量</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/home/zic/gopath</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></div>

<p><img src="https://s2.loli.net/2024/08/26/vWKNQ3pZYO9ol6y.png"></p>
<p>配置完毕之后<br>然后使用命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<p>然后再终端中输入</p>
<blockquote>
<p>go version </p>
</blockquote>
<p><img src="https://s2.loli.net/2024/08/26/hcosbpRv5nIQe2F.png"></p>
<h2 id="运行hello-world"><a href="#运行hello-world" class="headerlink" title="运行hello,world"></a>运行hello,world</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/yhQINsl1dxrk2VF.png"></p>
<h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><h2 id="通过apt-get安装"><a href="#通过apt-get安装" class="headerlink" title="通过apt-get安装"></a>通过apt-get安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install golang</span><br></pre></td></tr></table></figure></div>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/home/zic/gopath</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></div>
<p>其他步骤一模一样 只不过这个版本不可选而已</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>安装NVM与构建vue项目</title>
    <url>/2022/05/26/%E5%AE%89%E8%A3%85NVM%E4%B8%8E%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<!-- toc -->
<hr>
<h1 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h1><h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>去github 上下载 <a class="link"   href="https://github.com/coreybutler/nvm-windows" >https://github.com/coreybutler/nvm-windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装包地址： <a class="link"   href="https://github.com/coreybutler/nvm-windows/releases" >https://github.com/coreybutler/nvm-windows/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img src="https://s2.loli.net/2024/08/26/WR9AbqNfsMw7juL.png"><br>直接下载安装即可。</p>
<p>安装完了 持续下一步<br>进入目录中<br><img src="https://s2.loli.net/2024/08/26/OaKlCvAH39IGu42.png"></p>
<p>然后修改settings中<br>添加如下内容</p>
<div class="highlight-container" data-rel="Avrasm"><figure class="iseeu highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">node_mirror:</span> https://npm.taobao<span class="meta">.org</span>/mirrors/node/</span><br><span class="line"><span class="symbol">npm_mirror:</span> https://npm.taobao<span class="meta">.org</span>/mirrors/npm/</span><br></pre></td></tr></table></figure></div>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证NVM是否安装成功<br><img src="https://s2.loli.net/2024/08/26/87RNqO9Mmlh61kj.png"><br>以上代表已经安装成功了。<br><img src="https://s2.loli.net/2024/08/26/1qJDrX6IRvxpU7u.png"></p>
<h2 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h2><p><a class="link"   href="https://github.com/nvm-sh/nvm" >https://github.com/nvm-sh/nvm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>执行如下命令即可。<br><img src="https://s2.loli.net/2024/08/26/FS7CDXsr8LuzQa1.png"></p>
<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">curl -<span class="keyword">o</span>- https://raw.githubusercontent.<span class="keyword">com</span>/nvm-<span class="keyword">sh</span>/nvm/v0.<span class="number">39.3</span>/install.<span class="keyword">sh</span> | bash</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.<span class="keyword">com</span>/nvm-<span class="keyword">sh</span>/nvm/v0.<span class="number">39.3</span>/install.<span class="keyword">sh</span> | bash</span><br></pre></td></tr></table></figure></div>

<h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/hosts</span><br><span class="line"><span class="number">199.232</span>.<span class="number">96.133</span> raw.githubusercontent.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></div>
<h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><blockquote>
<p>systemctl restart NetworkManager.service</p>
</blockquote>
<p>这样就算安装成功了</p>
<h3 id="更换淘宝源"><a href="#更换淘宝源" class="headerlink" title="更换淘宝源"></a>更换淘宝源</h3><p>在安装nodejs的时候特别慢，安装了好久都安装不上去，网速实在是太慢了，需要将nvm的默认下载地址改为国内的，我使用了淘宝的镜像,在.bashrc文件中追加如下内容</p>
<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"># nvm淘宝镜像</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure></div>


<h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure></div>



<h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install v16.13.0</span><br></pre></td></tr></table></figure></div>

<h1 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nvm uninstall v16.13.0</span><br></pre></td></tr></table></figure></div>

<h1 id="使用nvm"><a href="#使用nvm" class="headerlink" title="使用nvm"></a>使用nvm</h1><h2 id="使用-16-13-0"><a href="#使用-16-13-0" class="headerlink" title="使用 16.13.0"></a>使用 16.13.0</h2><blockquote>
<p>nvm use v16.13.0</p>
</blockquote>
<p><strong>注意： 如果在windows下 要使用超级管理员 不然会出现错误</strong></p>
<h2 id="查看安装环境"><a href="#查看安装环境" class="headerlink" title="查看安装环境"></a>查看安装环境</h2><blockquote>
<p>nvm current<br>nvm list</p>
</blockquote>
<h2 id="更换默认环境"><a href="#更换默认环境" class="headerlink" title="更换默认环境"></a>更换默认环境</h2><blockquote>
<p>nvm alias default v16.13.0</p>
</blockquote>
<h1 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h1><h2 id="安装源添加镜像"><a href="#安装源添加镜像" class="headerlink" title="安装源添加镜像"></a>安装源添加镜像</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sS https://<span class="keyword">dl</span>.yarnpkg.<span class="keyword">com</span>/debian/pubkey.gpg | sudo apt-key <span class="built_in">add</span> -</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | sudo tee /etc/apt/sources.<span class="keyword">list</span>.d/yarn.<span class="keyword">list</span></span><br></pre></td></tr></table></figure></div>

<h2 id="更新源并且安装"><a href="#更新源并且安装" class="headerlink" title="更新源并且安装"></a>更新源并且安装</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span> &amp;&amp; sudo apt install yarn</span><br></pre></td></tr></table></figure></div>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> yarn</span><br><span class="line">sudo apt-<span class="built_in">get</span> autoremove</span><br></pre></td></tr></table></figure></div>
<h2 id="添加淘宝源"><a href="#添加淘宝源" class="headerlink" title="添加淘宝源"></a>添加淘宝源</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></div>

<p>安装完毕 后 输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yarn -v </span><br></pre></td></tr></table></figure></div>

<p><img src="https://s2.loli.net/2024/08/26/bkS6gd1snZyJzfm.png"><br>代表安装成功！！！</p>
<h2 id="初始化一个yarn项目"><a href="#初始化一个yarn项目" class="headerlink" title="初始化一个yarn项目"></a>初始化一个yarn项目</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure></div>

<h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 速度不行可以考虑换源 npm</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">yarn add global @vue-cli</span><br></pre></td></tr></table></figure></div>


<h2 id="常规安装"><a href="#常规安装" class="headerlink" title="常规安装"></a>常规安装</h2><blockquote>
<p>vue create vueproject</p>
</blockquote>
<h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><h2 id="安装vite"><a href="#安装vite" class="headerlink" title="安装vite"></a>安装vite</h2><p>中文文档： <a class="link"   href="https://cn.vitejs.dev/guide/" >https://cn.vitejs.dev/guide/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>使用 NPM:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm create vite@latest</span><br></pre></td></tr></table></figure></div>
<p>使用 Yarn:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn create vite</span><br></pre></td></tr></table></figure></div>

<p>结果如下<br><img src="https://s2.loli.net/2024/08/26/dxMni1cpNw3TVZE.png"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>然后使用vscode中的project manager 来对我们的项目进行管理<br><img src="https://s2.loli.net/2024/08/26/LFhB1V8M4XRrgJi.png"><br>然后修改project.json<br><img src="https://s2.loli.net/2024/08/26/2NQdc7WsVG5g8Bb.png"></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kyfly_client&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rootPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\Golang\\github.com\\hybpjx\\kyfly_client&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<p>执行yarn 命令 安装资源包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/Wr4ibtQ2YoM9eAq.png"></p>
<p>然后执行yarn dev </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/WonxGITwkDpv4ys.png"><br><img src="https://s2.loli.net/2024/08/26/HXT1glJmraRy8LK.png"></p>
<p>启动成功！！<br><img src="https://s2.loli.net/2024/08/26/Xz291aoQPh3VY7I.png"></p>
<p>然后置空所有其他无用的东西<br><img src="https://s2.loli.net/2024/08/26/oiWUVlOQxmRkF5D.png"><br>效果如上图</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>Gin_Resonse返回格式</title>
    <url>/2022/11/26/Gin-Resonse%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p>目的： gin返回restful格式的数据，返回的200，201 的数据 也包括异常时的404&#x2F;500等情况<br>全局统一返回RESTful风格数据，主要是实现Respon接口的方法，对返回值在输出之前进行修改。</p>
<p>直接调用下文代码即可</p>
<h1 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h1><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response</span></span><br><span class="line"><span class="comment">// context 上下文</span></span><br><span class="line"><span class="comment">// httpStatus http 状态码</span></span><br><span class="line"><span class="comment">// code 自己定义的状态码</span></span><br><span class="line"><span class="comment">// data 返回的空接口</span></span><br><span class="line"><span class="comment">// msg 返回的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Response</span><span class="params">(context *gin.Context, httpStatus <span class="type">int</span>, code <span class="type">int</span>, data gin.H, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"> context.JSON(httpStatus, gin.H&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: code,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>:  msg,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Success</span><span class="params">(context *gin.Context, data gin.H, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"> context.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>:  msg,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fail</span><span class="params">(context *gin.Context, data gin.H, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"> context.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>:  msg,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnprocessableEntity</span><span class="params">(context *gin.Context, data gin.H, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"> context.JSON(http.StatusUnprocessableEntity, gin.H&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">422</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: data,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>:  msg,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>后续可以自己添加方法然后固定的格式</p>
<h1 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h1><p>构建一个结构体 然后只有有些无用的值是可以不传的。<br>这种方式对比上一种更加灵活多变。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ResponseJson <span class="keyword">struct</span> &#123;</span><br><span class="line"> Status <span class="type">int</span>    <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line"> Code   <span class="type">int</span>    <span class="string">`json:&quot;code,omitempty&quot;`</span></span><br><span class="line"> Msg    <span class="type">string</span> <span class="string">`json:&quot;msg,omitempty&quot;`</span></span><br><span class="line"> Data   any    <span class="string">`json:&quot;data,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty 判断结构体是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r ResponseJson)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> reflect.DeepEqual(r, ResponseJson&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建状态码 ，如果 传入的ResponseJson没有Status 就使用默认的状态码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildStatus</span><span class="params">(resp ResponseJson, defaultStatus <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> resp.Status == <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> defaultStatus</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> resp.Status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpResponse</span><span class="params">(ctx *gin.Context, status <span class="type">int</span>, resp ResponseJson)</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> resp.IsEmpty() &#123;</span><br><span class="line">  ctx.AbortWithStatus(status)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> ctx.AbortWithStatusJSON(status, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Success</span><span class="params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;</span><br><span class="line"> HttpResponse(ctx, buildStatus(resp, http.StatusOK), resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fail</span><span class="params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;</span><br><span class="line"> HttpResponse(ctx, buildStatus(resp, http.StatusBadRequest), resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServerFail</span><span class="params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;</span><br><span class="line"> HttpResponse(ctx, buildStatus(resp, http.StatusInternalServerError), resp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Gin速用</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python加密解密算法</title>
    <url>/2022/11/04/Python%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="url-encode加密"><a href="#url-encode加密" class="headerlink" title="url encode加密"></a>url encode加密</h1><p>简介：当url地址含有中文，或者参数有中文的时候，这个算是很正常了，但是把这样的url作为参数传递的时候（最常见的callback）<br>，需要把一些中文甚至’&#x2F;‘做一下编码转换。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;我爱吃鸡腿&quot;</span></span><br><span class="line">s = urllib.parse.quote(text)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment"># %E6%88%91%E7%88%B1%E5%90%83%E9%B8%A1%E8%85%BF</span></span><br><span class="line">u = urllib.parse.unquote(s)</span><br><span class="line"><span class="built_in">print</span>(u) <span class="comment">#我爱吃鸡腿</span></span><br></pre></td></tr></table></figure></div>

<h1 id="unicode-加密"><a href="#unicode-加密" class="headerlink" title="unicode 加密"></a>unicode 加密</h1><p>其实这应该不算一种加密 更多的应该算是一种编码与解码<br>但是由于运用很广泛 我也加进去了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/2/28 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;你好&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">enStr1 = str1.encode(<span class="string">&#x27;unicode-escape&#x27;</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(enStr1) <span class="comment"># \u4f60\u597d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">deStr1 = enStr1.encode().decode(<span class="string">&#x27;unicode-escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(deStr1) <span class="comment"># 你好</span></span><br></pre></td></tr></table></figure></div>


<h1 id="Base64-加密"><a href="#Base64-加密" class="headerlink" title="Base64 加密"></a>Base64 加密</h1><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">text</span>):</span><br><span class="line">    encode_data = base64.b64encode(text.encode())</span><br><span class="line">    <span class="keyword">return</span> encode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_decode</span>(<span class="params">encode_data</span>):</span><br><span class="line">    decode_data = base64.b64decode(encode_data)</span><br><span class="line">    <span class="keyword">return</span> decode_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span></span><br><span class="line">    encode_data = base64_encode(text)</span><br><span class="line">    decode_data = base64_decode(encode_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Base64 编码：&#x27;</span>, encode_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Base64 解码：&#x27;</span>, decode_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span></span><br><span class="line"><span class="comment"># Base64 解码： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，<br>由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，<br>用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。<br>摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串<br>（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，<br>两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_test1</span>():</span><br><span class="line">    md5 = hashlib.new(<span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_test2</span>():</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(<span class="string">&#x27;I love &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    md5.update(<span class="string">&#x27;python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    md5_test1()  <span class="comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span></span><br><span class="line">    md5_test2()  <span class="comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span></span><br></pre></td></tr></table></figure></div>

<h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><p>简介：英文名称：Password-Based Key Derivation Function 2，<br>PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，<br>2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。<br>PBKDF2 将伪随机函数（例如 HMAC），<br>把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，<br>如果重复的次数足够大，破解的成本就会变得很高。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Hash <span class="keyword">import</span> SHA1</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;I love Python!&#x27;</span></span><br><span class="line">salt = <span class="string">b&#x27;43215678&#x27;</span></span><br><span class="line">result = PBKDF2(text,  salt, count=<span class="number">10</span>, hmac_hash_module=SHA1)</span><br><span class="line">result = binascii.hexlify(result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h1><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），<br>由美国国家安全局（NSA）所设计，主要适用于数字签名标准<br>（Digital Signature Standard DSS）里面定义的数字签名算法（<br>Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，<br>分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，<br>后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，<br>MD5 的密文是 32 位，而 SHA-1 是 40 位，<br>版本越强，密文越长，代价是速度越慢。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1_test1</span>():</span><br><span class="line">    sha1 = hashlib.new(<span class="string">&#x27;sha1&#x27;</span>, <span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1_test2</span>():</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(<span class="string">&#x27;I love python!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sha1_test1()  <span class="comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></span><br><span class="line">    sha1_test2()  <span class="comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></span><br></pre></td></tr></table></figure></div>

<h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码<br>（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），<br>于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash<br>函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、<br>对报文进行 Hash 运算，形成固定长度的认证码。通信双方<br>通过认证码的校验来确定报文的合法性。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmac_test1</span>():</span><br><span class="line">    message = <span class="string">b&#x27;I love python!&#x27;</span></span><br><span class="line">    key = <span class="string">b&#x27;secret&#x27;</span></span><br><span class="line">    md5 = hmac.new(key, message, digestmod=<span class="string">&#x27;MD5&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmac_test2</span>():</span><br><span class="line">    key = <span class="string">&#x27;secret&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    sha1 = hmac.new(key, digestmod=<span class="string">&#x27;sha1&#x27;</span>)</span><br><span class="line">    sha1.update(<span class="string">&#x27;I love &#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    sha1.update(<span class="string">&#x27;Python!&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(sha1.hexdigest())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hmac_test1()  <span class="comment"># 9c503a1f852edcc3526ea56976c38edf</span></span><br><span class="line">    hmac_test2()  <span class="comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，<br>属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），<br>DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，<br>但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），<br>由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span></span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, CBC, PAD_PKCS5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    k = des(key, CBC, iv, pad=<span class="literal">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">    en = k.encrypt(text, padmode=PAD_PKCS5)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(en)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    k = des(key, CBC, iv, pad=<span class="literal">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)</span><br><span class="line">    <span class="keyword">return</span> de</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    iv = secret_key           <span class="comment"># 偏移量</span></span><br><span class="line">    secret_str = des_encrypt(secret_key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, secret_str)</span><br><span class="line">    clear_str = des_decrypt(secret_key, secret_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, clear_str)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span></span><br><span class="line">    <span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、<br>Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。<br>70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，<br>它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，<br>原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，<br>即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Cryptodome <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(value) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        value += <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    <span class="comment"># 加密模式 OFB</span></span><br><span class="line">    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    encrypted_text = cipher_encrypt.encrypt(text.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">key, text, iv</span>):</span><br><span class="line">    <span class="comment"># 加密模式 OFB</span></span><br><span class="line">    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)</span><br><span class="line">    decrypted_text = cipher_decrypt.decrypt(text)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;12345678&#x27;</span>            <span class="comment"># 密钥，16 位</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>     <span class="comment"># 加密对象</span></span><br><span class="line">    iv = Random.new().read(DES3.block_size)  <span class="comment"># DES3.block_size == 8</span></span><br><span class="line">    secret_str = des_encrypt(key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, secret_str)</span><br><span class="line">    clear_str = des_decrypt(key, secret_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, clear_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span></span><br><span class="line"><span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），<br>在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，<br>并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。<br>这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，<br>它本身只有一个密钥，即用来实现加密，也用于解密。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(value) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        value += <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.encode(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">key, t, iv</span>):</span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  <span class="comment"># 初始化加密器</span></span><br><span class="line">    encrypt_aes = aes.encrypt(add_to_16(t)) <span class="comment"># 先进行 aes 加密</span></span><br><span class="line">    <span class="comment"># 执行加密并转码返回 bytes</span></span><br><span class="line">    encrypted_text = <span class="built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> encrypted_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">key, t, iv</span>):</span><br><span class="line">    <span class="comment"># 初始化加密器</span></span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))     </span><br><span class="line">    <span class="comment"># 优先逆向解密 base64 成 bytes   </span></span><br><span class="line">    base64_decrypted = base64.decodebytes(t.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line">    <span class="comment"># 执行解密密并转码返回str </span></span><br><span class="line">    decrypted_text = <span class="built_in">str</span>(aes.decrypt(base64_decrypted), encoding=<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">t,key,iv</span>):</span><br><span class="line">    <span class="comment"># 初始化加密器</span></span><br><span class="line">    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))</span><br><span class="line">    <span class="comment"># 优先逆向解密 base64 成 bytes</span></span><br><span class="line">    base64_decrypted = base64.b64decode(t.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 执行解密密并转码返回str</span></span><br><span class="line">    decrypted_text = <span class="built_in">str</span>(unpad(aes.decrypt(base64_decrypted), AES.block_size), encoding=<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    iv = secret_key           <span class="comment"># 初始向量</span></span><br><span class="line">    encrypted_str = aes_encrypt(secret_key, text, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span></span><br><span class="line"><span class="comment"># 解密字符串： I love Python!</span></span><br></pre></td></tr></table></figure></div>

<p><strong>AES ECB PKC7 模式</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_cipher</span>(<span class="params">key, aes_str</span>):</span><br><span class="line">    <span class="comment"># 使用key,选择加密方式</span></span><br><span class="line">    aes = AES.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)</span><br><span class="line">    pad_pkcs7 = pad(aes_str.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size, style=<span class="string">&#x27;pkcs7&#x27;</span>)  <span class="comment"># 选择pkcs7补全</span></span><br><span class="line">    encrypt_aes = aes.encrypt(pad_pkcs7)</span><br><span class="line">    <span class="comment"># 加密结果</span></span><br><span class="line">    encrypted_text = <span class="built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 解码</span></span><br><span class="line">    encrypted_text_str = encrypted_text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 此处我的输出结果老有换行符，所以用了临时方法将它剔除</span></span><br><span class="line">    <span class="keyword">return</span> encrypted_text_str</span><br></pre></td></tr></table></figure></div>


<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，<br>密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。<br>RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，<br>该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，<br>虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，<br>它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，<br>现在逐渐不推荐使用了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">key, t</span>):</span><br><span class="line">    enc = ARC4.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    res = enc.encrypt(t.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    res = base64.b64encode(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">key, t</span>):</span><br><span class="line">    data = base64.b64decode(t)</span><br><span class="line">    enc = ARC4.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    res = enc.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    secret_key = <span class="string">&#x27;12345678&#x27;</span>   <span class="comment"># 密钥</span></span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>   <span class="comment"># 加密对象</span></span><br><span class="line">    encrypted_str = rc4_encrypt(secret_key, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = rc4_decrypt(secret_key, encrypted_str)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span></span><br><span class="line"><span class="comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，<br>2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p>
<p>目前没有找到有第三方库可以直接实现 Rabbit 算法，<br>在 Python 中实现可以参考：<a class="link"   href="https://asecuritysite.com/encryption/rabbit2" >https://asecuritysite.com/encryption/rabbit2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、<br>阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，<br>RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。<br>在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。<br>RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">pu_key, t</span>):</span><br><span class="line">    <span class="comment"># 公钥加密</span></span><br><span class="line">    rsa = rsa.encrypt(t.encode(<span class="string">&quot;utf-8&quot;</span>), pu_key)</span><br><span class="line">    <span class="keyword">return</span> rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_decrypt</span>(<span class="params">pr_key, t</span>):</span><br><span class="line">    <span class="comment"># 私钥解密</span></span><br><span class="line">    rsa = rsa.decrypt(t, pr_key).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    public_key, private_key = rsa.newkeys(<span class="number">512</span>)   <span class="comment"># 生成公钥、私钥</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;公钥：&#x27;</span>, public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;私钥：&#x27;</span>, private_key)</span><br><span class="line">    text = <span class="string">&#x27;I love Python!&#x27;</span>  <span class="comment"># 加密对象</span></span><br><span class="line">    encrypted_str = rsa_encrypt(public_key, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密字符串：&#x27;</span>, encrypted_str)</span><br><span class="line">    decrypted_str = rsa_decrypt(private_key, encrypted_str)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密字符串：&#x27;</span>, decrypted_str)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span></span><br><span class="line"><span class="string">私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span></span><br><span class="line"><span class="string">加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span></span><br><span class="line"><span class="string">解密字符串： I love Python!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="模块-Cryptodome："><a href="#模块-Cryptodome：" class="headerlink" title="模块 Cryptodome："></a>模块 Cryptodome：</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/29 10:43</span></span><br><span class="line"><span class="comment"># @Author  : lzc</span></span><br><span class="line"><span class="comment"># @Email   : hybpjx@163.com</span></span><br><span class="line"><span class="comment"># @File    : utilsMiddlewares.py</span></span><br><span class="line"><span class="comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;cKK8B2rWwfwWeXhz&quot;</span></span><br><span class="line">public_key = <span class="string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span></span><br><span class="line">rsa_key = RSA.import_key(base64.b64decode(public_key))  <span class="comment"># 导入读取到的公钥</span></span><br><span class="line">cipher = PKCS1_v1_5.new(rsa_key)                        <span class="comment"># 生成对象</span></span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(cipher_text)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装redis并且设置远程登陆和密码</title>
    <url>/2022/11/26/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E5%92%8C%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<!--toc-->
<hr>
<h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><blockquote>
<p>sudo apt-get install -y redis-server</p>
</blockquote>
<h1 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h1><blockquote>
<p>sudo vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/08/26/XThu9WoMF1INzCJ.png"><br><img src="https://s2.loli.net/2024/08/26/wGmL1tdIK6EhqWQ.png"><br><img src="https://s2.loli.net/2024/08/26/zRoObl6vKPq1riC.png"></p>
<p>如果不知道怎么找<br>直接在命令行模式下输入<br>&#x2F;{你要搜索的东西} 然后按回车 然后按n是下一个 N是上一个</p>
<h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><blockquote>
<p>systemctl restart redis-server.service</p>
</blockquote>
<h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><p>使用远程工具 Redis Desktop Manager<br>下载地址<br>官网: <a class="link"   href="https://resp.app/pricing" >https://resp.app/pricing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>百度网盘：<a class="link"   href="https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g" >https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：00c0</p>
<p><img src="https://s2.loli.net/2024/08/26/lynw3ZIqLeWk8g9.png"></p>
<p><img src="https://s2.loli.net/2024/08/26/hziQdgPOETZaojN.png"><br>然后测试连接<br><img src="https://s2.loli.net/2024/08/26/mHoUBhuOxEz5W1e.png"></p>
<p>代表成功</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>GoRequests库</title>
    <url>/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8BGoRequests/</url>
    <content><![CDATA[<!-- toc -->

<hr>
<p>我们在使用Go做爬虫的时候，首先接触的肯定是 Golang 标准库 net&#x2F;http</p>
<blockquote>
<p><a class="link"   href="https://pkg.go.dev/net/http" >https://pkg.go.dev/net/http <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>有兴趣的可以去看看文档。<br>但是老实说 这个库个人感觉不是特别的好用</p>
</blockquote>
<p>有可能是之前就是使用了Python 所以还是感觉如果有像Python库中的requests<br>那样去实现请求就好了。<br>所以GoRequests 就诞生了。</p>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>DOC: <a class="link"   href="https://pkg.go.dev/github.com/levigross/grequests" >https://pkg.go.dev/github.com/levigross/grequests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>Github: <a class="link"   href="http://github.com/levigross/grequests" >http://github.com/levigross/grequests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>响应可以序列化为 JSON 和 XML</li>
<li>轻松上传文件</li>
<li>轻松下载文件</li>
<li>支持以下 HTTP 谓词GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/levigross/grequests</span><br></pre></td></tr></table></figure></div>

<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><blockquote>
<p>import “github.com&#x2F;levigross&#x2F;grequests”</p>
</blockquote>
<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">ro := &amp;RequestOptions&#123;</span><br><span class="line"> Params: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hybpjx&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// url路径上的参数会被覆盖</span></span><br><span class="line">resp, err := grequests.Get(<span class="string">&quot;http://httpbin.org/get?h=1&quot;</span>, ro)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(resp.String())</span><br></pre></td></tr></table></figure></div>

<h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">option := &amp;grequests.RequestOptions&#123;Data: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.cnblogs.com/zichliang/p/17302343.html&quot;</span>&#125;&#125;</span><br><span class="line">resp, err := grequests.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, option)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.Ok != <span class="literal">true</span> &#123;</span><br><span class="line"> fmt.Println(resp.Ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Post上传文件"><a href="#Post上传文件" class="headerlink" title="Post上传文件"></a>Post上传文件</h1><p>还可以支持上传文件</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许您通过指定磁盘上的位置来创建FileUpload结构片</span></span><br><span class="line">fd, err := grequests.FileUploadFromDisk(<span class="string">&quot;test/1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;文件打开失败:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这将以请求的形式上传文件</span></span><br><span class="line">resp, _ := grequests.Post(<span class="string">&quot;http://httpbin.org/post&quot;</span>,</span><br><span class="line"> &amp;grequests.RequestOptions&#123;</span><br><span class="line">  Files: fd,</span><br><span class="line">  Data:  <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;One&quot;</span>: <span class="string">&quot;Two&quot;</span>&#125;,</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(resp.Ok,resp.StatusCode)</span><br></pre></td></tr></table></figure></div>

<h1 id="Gorequests-使用session"><a href="#Gorequests-使用session" class="headerlink" title="Gorequests 使用session"></a>Gorequests 使用session</h1><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">session := grequests.Session&#123;</span><br><span class="line">  RequestOptions: &amp;grequests.RequestOptions&#123;</span><br><span class="line">   Headers: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;authority&quot;</span>:  <span class="string">&quot;mp3.haoge500.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;referer&quot;</span>:    <span class="string">&quot;https://www.zz123.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="GoRequests-使用代理"><a href="#GoRequests-使用代理" class="headerlink" title="GoRequests 使用代理"></a>GoRequests 使用代理</h1><p>gorequest代理，非常简单 网上的Demo很多 也不只这一个<br>我展示的是阿布云的代理<br>需要注意的是 需要把 Proxies 中的url 添加为 *url.URL 代理</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/levigross/grequests&quot;</span></span><br><span class="line"> <span class="string">&quot;net/url&quot;</span></span><br><span class="line"> <span class="string">&quot;testing&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理服务器</span></span><br><span class="line"><span class="keyword">const</span> proxyServer = <span class="string">&quot;http-pro.xxx.com:9010&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理隧道验证信息</span></span><br><span class="line"><span class="keyword">const</span> proxyUser = <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyPass = <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Proxy <span class="keyword">struct</span> &#123;</span><br><span class="line"> AppID     <span class="type">string</span></span><br><span class="line"> AppSecret <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Proxy)</span></span> ProxyURL() *url.URL &#123;</span><br><span class="line"> proxyUrl, _ := url.Parse(<span class="string">&quot;http://&quot;</span> + p.AppID + <span class="string">&quot;:&quot;</span> + p.AppSecret + <span class="string">&quot;@&quot;</span> + proxyServer)</span><br><span class="line"> <span class="keyword">return</span> proxyUrl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCommon</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> <span class="comment">// 初始化 proxy http client</span></span><br><span class="line"> proxyURL := Proxy&#123;AppID: proxyUser, AppSecret: proxyPass&#125;.ProxyURL()</span><br><span class="line"> fmt.Println(proxyURL)</span><br><span class="line"> trueUrl := <span class="string">&quot;http://www.xiushui.gov.cn/xxgk/bmxxgk/sthjj/sthj/xmhp/index.html&quot;</span></span><br><span class="line"> ro := &amp;grequests.RequestOptions&#123;</span><br><span class="line">  Headers: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">   <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  Proxies: <span class="keyword">map</span>[<span class="type">string</span>]*url.URL&#123;</span><br><span class="line">   <span class="string">&quot;http&quot;</span>: proxyURL,</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br><span class="line"> resp, err := grequests.Get(trueUrl, ro)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err.Error())</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(<span class="string">&quot;&quot;</span>, resp.StatusCode)</span><br><span class="line"> time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>一日一库</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang加密解密算法</title>
    <url>/2022/09/26/Golang%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="md5-加密——不可逆"><a href="#md5-加密——不可逆" class="headerlink" title="md5 加密——不可逆"></a>md5 加密——不可逆</h1><p>MD5信息摘要算法是一种被广泛使用的密码散列函数，可以产生出一个128位（16进制，32个字符）的散列值（hash value），用于确保信息传输完整一致。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MD5Str md5验证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5Str</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := md5.New()</span><br><span class="line"> h.Write([]<span class="type">byte</span>(src)) <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, hex.EncodeToString(h.Sum(<span class="literal">nil</span>))) <span class="comment">// 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MD5Str2 md5验证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5Str2</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%x&quot;</span>, md5.Sum([]<span class="type">byte</span>(src)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h1 id="hmacsha-加密——不可逆"><a href="#hmacsha-加密——不可逆" class="headerlink" title="hmacsha 加密——不可逆"></a>hmacsha 加密——不可逆</h1><p>HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，<br>它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。<br>和我们自定义的加salt算法不同，Hmac算法针对所有哈希算法都通用，无论是MD5还是SHA-1。采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。</p>
<h2 id="hmac-md5加密"><a href="#hmac-md5加密" class="headerlink" title="hmac-md5加密"></a>hmac-md5加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//key随意设置 data 要加密数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hmac</span><span class="params">(key, data <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> <span class="comment">// 创建对应的md5哈希加密算法</span></span><br><span class="line">    hash:= hmac.New(md5.New, []<span class="type">byte</span>(key)) </span><br><span class="line"></span><br><span class="line">    hash.Write([]<span class="type">byte</span>(data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="hamacsha1-加密"><a href="#hamacsha1-加密" class="headerlink" title="hamacsha1 加密"></a>hamacsha1 加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSha1</span><span class="params">(src, key <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha1.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="hamacsha-256-加密"><a href="#hamacsha-256-加密" class="headerlink" title="hamacsha 256 加密"></a>hamacsha 256 加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HmacSHA256 hmacSha256验证  key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSHA256</span><span class="params">(key, src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha256.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="hmacsha512加密"><a href="#hmacsha512加密" class="headerlink" title="hmacsha512加密"></a>hmacsha512加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HmacSHA512 hmacSha512验证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSHA512</span><span class="params">(key, src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha512.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="hamasha-调用"><a href="#hamasha-调用" class="headerlink" title="hamasha 调用"></a>hamasha 调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/hmac&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/sha1&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/sha512&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hmac hmac验证 key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hmac</span><span class="params">(key, data <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"> hash := hmac.New(md5.New, []<span class="type">byte</span>(key)) <span class="comment">// 创建对应的md5哈希加密算法</span></span><br><span class="line"></span><br><span class="line"> hash.Write([]<span class="type">byte</span>(data))</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HmacSHA256 hmacSha256加密  key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSHA256</span><span class="params">(key, src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha256.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HmacSHA512 hmacSha512加密 key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSHA512</span><span class="params">(key, src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha512.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSha1</span><span class="params">(src, key <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> m := hmac.New(sha1.New, []<span class="type">byte</span>(key))</span><br><span class="line"> m.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(m.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SHA256Str sha256加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SHA256Str</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := sha256.New()</span><br><span class="line"> h.Write([]<span class="type">byte</span>(src)) <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> <span class="comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> hmac_ := Hmac(<span class="string">&quot;hybpjx&quot;</span>, <span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> hamcsha1 := HmacSha1(<span class="string">&quot;hybpjx&quot;</span>, <span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> hamcsha256 := HmacSHA256(<span class="string">&quot;hybpjx&quot;</span>, <span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> hamacsha512 := HmacSHA512(<span class="string">&quot;hybpjx&quot;</span>, <span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> fmt.Println(hmac_)</span><br><span class="line"> fmt.Println(hamcsha1)</span><br><span class="line"> fmt.Println(hamcsha256)</span><br><span class="line"> fmt.Println(hamacsha512)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>d8801f70df7891764116e1ac003f7189</p>
<p>60d68e01c8a86f3b87e4e147e9f0fadce2a69661</p>
<p>b3f8ddf991288036864761a55046877adfe4f78ec9a89bb63932af92689b139f</p>
<p>b9b1fca0fe91522482ee1b2161e57d67482af6ef371614365b918c31ce774f9126ed627e378a063145f404ff2de7bd84f8e4798c385662ef4749e58e9209ca63</p>
</blockquote>
<h1 id="Sha-加密——不可逆"><a href="#Sha-加密——不可逆" class="headerlink" title="Sha 加密——不可逆"></a>Sha 加密——不可逆</h1><h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><p>SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sha1</span><span class="params">(data <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> sha1_ := sha1.New()</span><br><span class="line"> sha1_.Write([]<span class="type">byte</span>(data))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a>sha256</h2><p>SHA256算法使用的哈希值长度是256位。这是一个抽象类。此类的唯一实现是SHA256Managed。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SHA256 sha256加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SHA256</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := sha256.New()</span><br><span class="line"> <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> h.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="sha512"><a href="#sha512" class="headerlink" title="sha512"></a>sha512</h2><p>SHA (Secure Hash Algorithm，译作安全散列算法) 是美国国家安全局 (NSA) 设计，美国国家标准与技术研究院 (NIST) 发布的一系列密码散列函数。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SHA512 sha512加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SHA512</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := sha512.New()</span><br><span class="line"> <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> h.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="sha调用"><a href="#sha调用" class="headerlink" title="sha调用"></a>sha调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/sha1&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/sha512&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sha1</span><span class="params">(data <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> sha1_ := sha1.New()</span><br><span class="line"> sha1_.Write([]<span class="type">byte</span>(data))</span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SHA256 sha256加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SHA256</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := sha256.New()</span><br><span class="line"> <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> h.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SHA512 sha512加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SHA512</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> h := sha512.New()</span><br><span class="line"> <span class="comment">// 需要加密的字符串为</span></span><br><span class="line"> h.Write([]<span class="type">byte</span>(src))</span><br><span class="line"> <span class="comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span></span><br><span class="line"> <span class="keyword">return</span> hex.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> _sha1 := Sha1(<span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> _sha256 := SHA256(<span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> _sha512 := SHA512(<span class="string">&quot;始識&quot;</span>)</span><br><span class="line"> fmt.Println(_sha1)</span><br><span class="line"> fmt.Println(_sha256)</span><br><span class="line"> fmt.Println(_sha512)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>7bac01cc58a26f3cb280b0466794a89441279946</p>
<p>6ef99e6d3fe34a46afcdc438435728fe95ffdab18e389ddd31609edd6729b11d</p>
<p>0c04e9b79f488646d0eac6f65468248507939d643cc92709b14eb0d18d8f13db509ed5ccd3312d6c234408185a4611a42525dce9e8d32255640f56a2f836635a</p>
</blockquote>
<h1 id="base-加密-解密"><a href="#base-加密-解密" class="headerlink" title="base 加密 解密"></a>base 加密 解密</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BASE64StdEncode base编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BASE64StdEncode</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="type">byte</span>(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BASE64StdDecode base解码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BASE64StdDecode</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> a, err := base64.StdEncoding.DecodeString(src)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  _ = fmt.Errorf(<span class="string">&quot;解密失败,%v\n&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="type">string</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="base64-调用"><a href="#base64-调用" class="headerlink" title="base64  调用"></a>base64  调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// BASE64StdEncode base编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BASE64StdEncode</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="type">byte</span>(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BASE64StdDecode base解码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BASE64StdDecode</span><span class="params">(src <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"> a, err := base64.StdEncoding.DecodeString(src)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  _ = fmt.Errorf(<span class="string">&quot;解密失败,%v\n&quot;</span>, err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="type">string</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> encodeBase64 := BASE64StdEncode(<span class="string">&quot;hybpjx&quot;</span>)</span><br><span class="line"> decodeBase64 := BASE64StdDecode(encodeBase64)</span><br><span class="line"> fmt.Println(encodeBase64)</span><br><span class="line"> fmt.Println(decodeBase64)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>aHlicGp4<br>hybpjx</p>
</blockquote>
<h1 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h1><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12843286/1662199524599-a6b77cb9-25c9-4f5b-99c2-493ab50bb7ec.png#clientId=uae04fe37-f91f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub1ee8990&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3573&originWidth=1993&originalType=url&ratio=1&rotation=0&showTitle=false&size=1304823&status=done&style=none&taskId=u8b08ff15-15f1-45c8-b63a-6e18c32ee86&title=" alt="image.png"><br><strong>由于加密和解密的秘钥是相同的，所以AES为对称加密</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS7Padding</span><span class="params">(ciphertext []<span class="type">byte</span>, blockSize <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> padding := blockSize - <span class="built_in">len</span>(ciphertext)%blockSize</span><br><span class="line"> padtext := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padding)&#125;, padding)</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">append</span>(ciphertext, padtext...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS7UnPadding</span><span class="params">(origData []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> length := <span class="built_in">len</span>(origData)</span><br><span class="line"> unpadding := <span class="type">int</span>(origData[length<span class="number">-1</span>])</span><br><span class="line"> <span class="keyword">return</span> origData[:(length - unpadding)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AES加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesEncrypt</span><span class="params">(origData, key []<span class="type">byte</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"> block, err := aes.NewCipher(key)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> blockSize := block.BlockSize()</span><br><span class="line"> origData = PKCS7Padding(origData, blockSize)</span><br><span class="line"> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize])</span><br><span class="line"> crypted := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(origData))</span><br><span class="line"> blockMode.CryptBlocks(crypted, origData)</span><br><span class="line"> <span class="keyword">return</span> crypted, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AES解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesDecrypt</span><span class="params">(crypted, key []<span class="type">byte</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"> block, err := aes.NewCipher(key)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> blockSize := block.BlockSize()</span><br><span class="line"> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])</span><br><span class="line"> origData := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(crypted))</span><br><span class="line"> blockMode.CryptBlocks(origData, crypted)</span><br><span class="line"> origData = PKCS7UnPadding(origData)</span><br><span class="line"> <span class="keyword">return</span> origData, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> text := <span class="string">&quot;今晚打老虎&quot;</span></span><br><span class="line"> AesKey := []<span class="type">byte</span>(<span class="string">&quot;0f90023fc9ae101e&quot;</span>) <span class="comment">//秘钥长度为16的倍数</span></span><br><span class="line"> fmt.Printf(<span class="string">&quot;明文: %s\n秘钥: %s\n&quot;</span>, text, <span class="type">string</span>(AesKey))</span><br><span class="line"> encrypted, err := AesEncrypt([]<span class="type">byte</span>(text), AesKey)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;加密后: %s\n&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))</span><br><span class="line"> origin, err := AesDecrypt(encrypted, AesKey)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Printf(<span class="string">&quot;解密后明文: %s\n&quot;</span>, <span class="type">string</span>(origin))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<h2 id="CBC方式"><a href="#CBC方式" class="headerlink" title="CBC方式"></a>CBC方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesEncryptCBC</span><span class="params">(origData []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (encrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> <span class="comment">// 分组秘钥</span></span><br><span class="line"> <span class="comment">// NewCipher该函数限制了输入k的长度必须为16, 24或者32</span></span><br><span class="line"> block, _ := aes.NewCipher(key)</span><br><span class="line"> blockSize := block.BlockSize()                              <span class="comment">// 获取秘钥块的长度</span></span><br><span class="line"> origData = pkcs5Padding(origData, blockSize)                <span class="comment">// 补全码</span></span><br><span class="line"> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) <span class="comment">// 加密模式</span></span><br><span class="line"> encrypted = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(origData))                     <span class="comment">// 创建数组</span></span><br><span class="line"> blockMode.CryptBlocks(encrypted, origData)                  <span class="comment">// 加密</span></span><br><span class="line"> <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesDecryptCBC</span><span class="params">(encrypted []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (decrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> block, _ := aes.NewCipher(key)                              <span class="comment">// 分组秘钥</span></span><br><span class="line"> blockSize := block.BlockSize()                              <span class="comment">// 获取秘钥块的长度</span></span><br><span class="line"> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) <span class="comment">// 加密模式</span></span><br><span class="line"> decrypted = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(encrypted))                    <span class="comment">// 创建数组</span></span><br><span class="line"> blockMode.CryptBlocks(decrypted, encrypted)                 <span class="comment">// 解密</span></span><br><span class="line"> decrypted = pkcs5UnPadding(decrypted)                       <span class="comment">// 去除补全码</span></span><br><span class="line"> <span class="keyword">return</span> decrypted</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pkcs5Padding</span><span class="params">(ciphertext []<span class="type">byte</span>, blockSize <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> padding := blockSize - <span class="built_in">len</span>(ciphertext)%blockSize</span><br><span class="line"> padtext := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padding)&#125;, padding)</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">append</span>(ciphertext, padtext...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pkcs5UnPadding</span><span class="params">(origData []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> length := <span class="built_in">len</span>(origData)</span><br><span class="line"> unpadding := <span class="type">int</span>(origData[length<span class="number">-1</span>])</span><br><span class="line"> <span class="keyword">return</span> origData[:(length - unpadding)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> origData := []<span class="type">byte</span>(<span class="string">&quot;460154561234&quot;</span>) <span class="comment">// 待加密的数据</span></span><br><span class="line"> key := []<span class="type">byte</span>(<span class="string">&quot;9876787656785679&quot;</span>)  <span class="comment">// 加密的密钥</span></span><br><span class="line"> log.Println(<span class="string">&quot;原文：&quot;</span>, <span class="type">string</span>(origData))</span><br><span class="line"></span><br><span class="line"> log.Println(<span class="string">&quot;------------------ CBC模式 --------------------&quot;</span>)</span><br><span class="line"> encrypted := AesEncryptCBC(origData, key)</span><br><span class="line"> log.Println(<span class="string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))</span><br><span class="line"> log.Println(<span class="string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))</span><br><span class="line"> decrypted := AesDecryptCBC(encrypted, key)</span><br><span class="line"> log.Println(<span class="string">&quot;解密结果：&quot;</span>, <span class="type">string</span>(decrypted))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="ECB方式"><a href="#ECB方式" class="headerlink" title="ECB方式"></a>ECB方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesEncryptECB</span><span class="params">(origData []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (encrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> cipher, _ := aes.NewCipher(generateKey(key))</span><br><span class="line"> length := (<span class="built_in">len</span>(origData) + aes.BlockSize) / aes.BlockSize</span><br><span class="line"> plain := <span class="built_in">make</span>([]<span class="type">byte</span>, length*aes.BlockSize)</span><br><span class="line"> <span class="built_in">copy</span>(plain, origData)</span><br><span class="line"> pad := <span class="type">byte</span>(<span class="built_in">len</span>(plain) - <span class="built_in">len</span>(origData))</span><br><span class="line"> <span class="keyword">for</span> i := <span class="built_in">len</span>(origData); i &lt; <span class="built_in">len</span>(plain); i++ &#123;</span><br><span class="line">  plain[i] = pad</span><br><span class="line"> &#125;</span><br><span class="line"> encrypted = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plain))</span><br><span class="line"> <span class="comment">// 分组分块加密</span></span><br><span class="line"> <span class="keyword">for</span> bs, be := <span class="number">0</span>, cipher.BlockSize(); bs &lt;= <span class="built_in">len</span>(origData); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;</span><br><span class="line">  cipher.Encrypt(encrypted[bs:be], plain[bs:be])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesDecryptECB</span><span class="params">(encrypted []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (decrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> cipher, _ := aes.NewCipher(generateKey(key))</span><br><span class="line"> decrypted = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(encrypted))</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> <span class="keyword">for</span> bs, be := <span class="number">0</span>, cipher.BlockSize(); bs &lt; <span class="built_in">len</span>(encrypted); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;</span><br><span class="line">  cipher.Decrypt(decrypted[bs:be], encrypted[bs:be])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> trim := <span class="number">0</span></span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">len</span>(decrypted) &gt; <span class="number">0</span> &#123;</span><br><span class="line">  trim = <span class="built_in">len</span>(decrypted) - <span class="type">int</span>(decrypted[<span class="built_in">len</span>(decrypted)<span class="number">-1</span>])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> decrypted[:trim]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateKey</span><span class="params">(key []<span class="type">byte</span>)</span></span> (genKey []<span class="type">byte</span>) &#123;</span><br><span class="line"> genKey = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">16</span>)</span><br><span class="line"> <span class="built_in">copy</span>(genKey, key)</span><br><span class="line"> <span class="keyword">for</span> i := <span class="number">16</span>; i &lt; <span class="built_in">len</span>(key); &#123;</span><br><span class="line">  <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">16</span> &amp;&amp; i &lt; <span class="built_in">len</span>(key); j, i = j+<span class="number">1</span>, i+<span class="number">1</span> &#123;</span><br><span class="line">   genKey[j] ^= key[i]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> genKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> origData := []<span class="type">byte</span>(<span class="string">&quot;460154561234&quot;</span>) <span class="comment">// 待加密的数据</span></span><br><span class="line"> key := []<span class="type">byte</span>(<span class="string">&quot;9876787656785679&quot;</span>)  <span class="comment">// 加密的密钥</span></span><br><span class="line"> log.Println(<span class="string">&quot;原文：&quot;</span>, <span class="type">string</span>(origData))</span><br><span class="line"></span><br><span class="line"> log.Println(<span class="string">&quot;------------------ ECB模式 --------------------&quot;</span>)</span><br><span class="line"> encrypted := AesEncryptECB(origData, key)</span><br><span class="line"> log.Println(<span class="string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))</span><br><span class="line"> log.Println(<span class="string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))</span><br><span class="line"> decrypted := AesDecryptECB(encrypted, key)</span><br><span class="line"> log.Println(<span class="string">&quot;解密结果：&quot;</span>, <span class="type">string</span>(decrypted))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="CFB-方式"><a href="#CFB-方式" class="headerlink" title="CFB 方式"></a>CFB 方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;io&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesEncryptCFB</span><span class="params">(origData []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (encrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> block, err := aes.NewCipher(key)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> encrypted = <span class="built_in">make</span>([]<span class="type">byte</span>, aes.BlockSize+<span class="built_in">len</span>(origData))</span><br><span class="line"> iv := encrypted[:aes.BlockSize]</span><br><span class="line"> <span class="keyword">if</span> _, err := io.ReadFull(rand.Reader, iv); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> stream := cipher.NewCFBEncrypter(block, iv)</span><br><span class="line"> stream.XORKeyStream(encrypted[aes.BlockSize:], origData)</span><br><span class="line"> <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesDecryptCFB</span><span class="params">(encrypted []<span class="type">byte</span>, key []<span class="type">byte</span>)</span></span> (decrypted []<span class="type">byte</span>) &#123;</span><br><span class="line"> block, _ := aes.NewCipher(key)</span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">len</span>(encrypted) &lt; aes.BlockSize &#123;</span><br><span class="line">  <span class="built_in">panic</span>(<span class="string">&quot;ciphertext too short&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> iv := encrypted[:aes.BlockSize]</span><br><span class="line"> encrypted = encrypted[aes.BlockSize:]</span><br><span class="line"></span><br><span class="line"> stream := cipher.NewCFBDecrypter(block, iv)</span><br><span class="line"> stream.XORKeyStream(encrypted, encrypted)</span><br><span class="line"> <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> origData := []<span class="type">byte</span>(<span class="string">&quot;460154561234&quot;</span>) <span class="comment">// 待加密的数据</span></span><br><span class="line"> key := []<span class="type">byte</span>(<span class="string">&quot;9876787656785679&quot;</span>)  <span class="comment">// 加密的密钥</span></span><br><span class="line"> log.Println(<span class="string">&quot;原文：&quot;</span>, <span class="type">string</span>(origData))</span><br><span class="line"></span><br><span class="line"> log.Println(<span class="string">&quot;------------------ CFB模式 --------------------&quot;</span>)</span><br><span class="line"> encrypted := AesEncryptCFB(origData, key)</span><br><span class="line"> log.Println(<span class="string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))</span><br><span class="line"> log.Println(<span class="string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))</span><br><span class="line"> decrypted := AesDecryptCFB(encrypted, key)</span><br><span class="line"> log.Println(<span class="string">&quot;解密结果：&quot;</span>, <span class="type">string</span>(decrypted))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h1><p>RSA是一种基于公钥密码体制的优秀加密算法，1978年由美国(MIT)的李维斯特(Rivest)、沙米尔(Shamir)、艾德曼(Adleman)提的。<br>RSA算法是一种分组密码体制算法，它的保密强度是建立在具有大素数因子的合数其因子分解是困难的（基于大数分解的难度）。<br>公钥和私钥是一对大素数的函数，从一个公钥和密文中恢复出明文的难度等价于分解两个大素数之积。<br>RSA得到了世界上的最广泛的应用，ISO在1992年颁布的国际标准X.509中,将RSA算法正式纳入国际标准。</p>
<h2 id="RSA加密-1"><a href="#RSA加密-1" class="headerlink" title="RSA加密"></a>RSA加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// GenerateRSAKey 生成RSA私钥和公钥，保存到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateRSAKey</span><span class="params">(bits <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span></span><br><span class="line"> <span class="comment">//Reader是一个全局、共享的密码用强随机数生成器</span></span><br><span class="line"> privateKey, err := rsa.GenerateKey(rand.Reader, bits)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//保存私钥</span></span><br><span class="line"> <span class="comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span></span><br><span class="line"> <span class="comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span></span><br><span class="line"> X509PrivateKey,err := x509.MarshalPKCS8PrivateKey(privateKey)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line">  os.Exit(<span class="number">0</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//使用pem格式对x509输出的内容进行编码</span></span><br><span class="line"> <span class="comment">//创建文件保存私钥</span></span><br><span class="line"> privateFile, err := os.Create(<span class="string">&quot;private.pem&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> privateFile.Close()</span><br><span class="line"> <span class="comment">//构建一个pem.Block结构体对象</span></span><br><span class="line"> privateBlock:= pem.Block&#123;Type: <span class="string">&quot;PRIVATE KEY&quot;</span>,Bytes:X509PrivateKey&#125;</span><br><span class="line"> <span class="comment">//将数据保存到文件</span></span><br><span class="line"> pem.Encode(privateFile,&amp;privateBlock)</span><br><span class="line"> <span class="comment">//保存公钥</span></span><br><span class="line"> <span class="comment">//获取公钥的数据</span></span><br><span class="line"> publicKey:=privateKey.PublicKey</span><br><span class="line"> <span class="comment">//X509对公钥编码</span></span><br><span class="line"> X509PublicKey,err:=x509.MarshalPKIXPublicKey(&amp;publicKey)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//pem格式编码</span></span><br><span class="line"> <span class="comment">//创建用于保存公钥的文件</span></span><br><span class="line"> publicFile, err := os.Create(<span class="string">&quot;public.pem&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> publicFile.Close()</span><br><span class="line"> <span class="comment">//创建一个pem.Block结构体对象</span></span><br><span class="line"> publicBlock:= pem.Block&#123;Type: <span class="string">&quot;Public Key&quot;</span>,Bytes:X509PublicKey&#125;</span><br><span class="line"> <span class="comment">//保存到文件</span></span><br><span class="line"> pem.Encode(publicFile,&amp;publicBlock)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaEncrypt RSA加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaEncrypt</span><span class="params">(plainText []<span class="type">byte</span>,path <span class="type">string</span>)</span></span>[]<span class="type">byte</span>&#123;</span><br><span class="line"> <span class="comment">//打开文件</span></span><br><span class="line"> file,err:=os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> file.Close()</span><br><span class="line"> <span class="comment">//读取文件的内容</span></span><br><span class="line"> info, _ := file.Stat()</span><br><span class="line"> buf:=<span class="built_in">make</span>([]<span class="type">byte</span>,info.Size())</span><br><span class="line"> file.Read(buf)</span><br><span class="line"> <span class="comment">//pem解码</span></span><br><span class="line"> block, _ := pem.Decode(buf)</span><br><span class="line"> <span class="comment">//x509解码</span></span><br><span class="line"> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//类型断言</span></span><br><span class="line"> publicKey:=publicKeyInterface.(*rsa.PublicKey)</span><br><span class="line"> <span class="comment">//对明文进行加密</span></span><br><span class="line"> cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//返回密文</span></span><br><span class="line"> <span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaDecrypt RSA解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaDecrypt</span><span class="params">(cipherText []<span class="type">byte</span>,path <span class="type">string</span>)</span></span> []<span class="type">byte</span>&#123;</span><br><span class="line"> <span class="comment">//打开文件</span></span><br><span class="line"> file,err:=os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> file.Close()</span><br><span class="line"> <span class="comment">//获取文件内容</span></span><br><span class="line"> info, _ := file.Stat()</span><br><span class="line"> buf:=<span class="built_in">make</span>([]<span class="type">byte</span>,info.Size())</span><br><span class="line"> file.Read(buf)</span><br><span class="line"> <span class="comment">//pem解码</span></span><br><span class="line"> block, _ := pem.Decode(buf)</span><br><span class="line"> <span class="comment">//X509解码</span></span><br><span class="line"> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)</span><br><span class="line"> <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line">  os.Exit(<span class="number">0</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//对密文进行解密</span></span><br><span class="line"> plainText,_:=rsa.DecryptPKCS1v15(rand.Reader,privateKey.(*rsa.PrivateKey),cipherText)</span><br><span class="line"> <span class="comment">//返回明文</span></span><br><span class="line"> <span class="keyword">return</span> plainText</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// RSA/ECB/PKCS1Padding</span></span><br><span class="line"> <span class="comment">// RSA是算法，ECB是分块模式，PKCS1Padding是填充模式</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// pkcs1私钥生成openssl genrsa -out pkcs1.pem 1024</span></span><br><span class="line"> <span class="comment">// pkcs1转pkcs8私钥 ：openssl pkcs8 -in pkcs8.pem -nocrypt -out pkcs1.pem</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// pkcs1 BEGIN RSA PRIVATE KEY</span></span><br><span class="line"> <span class="comment">// pkcs8 BEGIN PRIVATE KEY</span></span><br><span class="line"></span><br><span class="line"> GenerateRSAKey(<span class="number">1024</span>)</span><br><span class="line"> publicPath := <span class="string">&quot;public_key.pem&quot;</span></span><br><span class="line"> privatePath := <span class="string">&quot;private_key.pem&quot;</span></span><br><span class="line"></span><br><span class="line"> publicPath = <span class="string">&quot;public.pem&quot;</span></span><br><span class="line"> privatePath = <span class="string">&quot;private.pem&quot;</span></span><br><span class="line"></span><br><span class="line"> txt := []<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"> encrptTxt := RsaEncrypt(txt,publicPath)</span><br><span class="line"> decrptCode := RsaDecrypt(encrptTxt,privatePath)</span><br><span class="line"> fmt.Println(<span class="type">string</span>(decrptCode))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="RSA分段加密"><a href="#RSA分段加密" class="headerlink" title="RSA分段加密"></a>RSA分段加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> GenerateRSAKey(<span class="number">2048</span>)</span><br><span class="line"> publicPath := <span class="string">&quot;public.pem&quot;</span></span><br><span class="line"> privatePath := <span class="string">&quot;private.pem&quot;</span></span><br><span class="line"> <span class="keyword">var</span> a = []<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"> encrptTxt, err := RsaEncryptBlock(a, publicPath)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line"> &#125;</span><br><span class="line"> encodeString := base64.StdEncoding.EncodeToString(encrptTxt)</span><br><span class="line"> decodeByte, err := base64.StdEncoding.DecodeString(encodeString)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//生成RSA私钥和公钥，保存到文件中</span></span><br><span class="line"> decrptCode := RSA_Decrypts(decodeByte, privatePath)</span><br><span class="line"> fmt.Println(<span class="type">string</span>(decrptCode))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateRSAKey</span><span class="params">(bits <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"> <span class="comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span></span><br><span class="line"> <span class="comment">//Reader是一个全局、共享的密码用强随机数生成器</span></span><br><span class="line"> privateKey, err := rsa.GenerateKey(rand.Reader, bits)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//保存私钥</span></span><br><span class="line"> <span class="comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span></span><br><span class="line"> <span class="comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span></span><br><span class="line"> X509PrivateKey, err := x509.MarshalPKCS8PrivateKey(privateKey)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line">  os.Exit(<span class="number">0</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//使用pem格式对x509输出的内容进行编码</span></span><br><span class="line"> <span class="comment">//创建文件保存私钥</span></span><br><span class="line"> privateFile, err := os.Create(<span class="string">&quot;private.pem&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> privateFile.Close()</span><br><span class="line"> <span class="comment">//构建一个pem.Block结构体对象</span></span><br><span class="line"> privateBlock := pem.Block&#123;Type: <span class="string">&quot;PRIVATE KEY&quot;</span>, Bytes: X509PrivateKey&#125;</span><br><span class="line"> <span class="comment">//将数据保存到文件</span></span><br><span class="line"> pem.Encode(privateFile, &amp;privateBlock)</span><br><span class="line"> <span class="comment">//保存公钥</span></span><br><span class="line"> <span class="comment">//获取公钥的数据</span></span><br><span class="line"> publicKey := privateKey.PublicKey</span><br><span class="line"> <span class="comment">//X509对公钥编码</span></span><br><span class="line"> X509PublicKey, err := x509.MarshalPKIXPublicKey(&amp;publicKey)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//pem格式编码</span></span><br><span class="line"> <span class="comment">//创建用于保存公钥的文件</span></span><br><span class="line"> publicFile, err := os.Create(<span class="string">&quot;public.pem&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> publicFile.Close()</span><br><span class="line"> <span class="comment">//创建一个pem.Block结构体对象</span></span><br><span class="line"> publicBlock := pem.Block&#123;Type: <span class="string">&quot;Public Key&quot;</span>, Bytes: X509PublicKey&#125;</span><br><span class="line"> <span class="comment">//保存到文件</span></span><br><span class="line"> pem.Encode(publicFile, &amp;publicBlock)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA_Decrypts RSA解密支持分段解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RSA_Decrypts</span><span class="params">(cipherText []<span class="type">byte</span>, path <span class="type">string</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> <span class="comment">//打开文件</span></span><br><span class="line"> <span class="keyword">var</span> bytesDecrypt []<span class="type">byte</span></span><br><span class="line"> file, err := os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> file.Close()</span><br><span class="line"> <span class="comment">//获取文件内容</span></span><br><span class="line"> info, _ := file.Stat()</span><br><span class="line"> buf := <span class="built_in">make</span>([]<span class="type">byte</span>, info.Size())</span><br><span class="line"> file.Read(buf)</span><br><span class="line"> <span class="comment">//pem解码</span></span><br><span class="line"> block, _ := pem.Decode(buf)</span><br><span class="line"> <span class="comment">//X509解码</span></span><br><span class="line"> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err.Error())</span><br><span class="line">  os.Exit(<span class="number">0</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> p := privateKey.(*rsa.PrivateKey)</span><br><span class="line"> keySize := p.Size()</span><br><span class="line"> srcSize := <span class="built_in">len</span>(cipherText)</span><br><span class="line"> log.Println(<span class="string">&quot;密钥长度&quot;</span>, keySize, <span class="string">&quot;密文长度&quot;</span>, srcSize)</span><br><span class="line"> <span class="keyword">var</span> offSet = <span class="number">0</span></span><br><span class="line"> <span class="keyword">var</span> buffer = bytes.Buffer&#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> offSet &lt; srcSize &#123;</span><br><span class="line">  endIndex := offSet + keySize</span><br><span class="line">  <span class="keyword">if</span> endIndex &gt; srcSize &#123;</span><br><span class="line">   endIndex = srcSize</span><br><span class="line">  &#125;</span><br><span class="line">  bytesOnce, err := rsa.DecryptPKCS1v15(rand.Reader, p, cipherText[offSet:endIndex])</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  buffer.Write(bytesOnce)</span><br><span class="line">  offSet = endIndex</span><br><span class="line"> &#125;</span><br><span class="line"> bytesDecrypt = buffer.Bytes()</span><br><span class="line"> <span class="keyword">return</span> bytesDecrypt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaEncryptBlock 公钥加密-分段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaEncryptBlock</span><span class="params">(src []<span class="type">byte</span>, path <span class="type">string</span>)</span></span> (bytesEncrypt []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"> <span class="comment">//打开文件</span></span><br><span class="line"> file, err := os.Open(path)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">defer</span> file.Close()</span><br><span class="line"> <span class="comment">//读取文件的内容</span></span><br><span class="line"> info, _ := file.Stat()</span><br><span class="line"> buf := <span class="built_in">make</span>([]<span class="type">byte</span>, info.Size())</span><br><span class="line"> file.Read(buf)</span><br><span class="line"> <span class="comment">//pem解码</span></span><br><span class="line"> block, _ := pem.Decode(buf)</span><br><span class="line"> <span class="comment">//x509解码</span></span><br><span class="line"> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="built_in">panic</span>(err)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//类型断言</span></span><br><span class="line"> publicKey := publicKeyInterface.(*rsa.PublicKey)</span><br><span class="line"> keySize, srcSize := publicKey.Size(), <span class="built_in">len</span>(src)</span><br><span class="line"> log.Println(<span class="string">&quot;密钥长度&quot;</span>, keySize, <span class="string">&quot;明文长度&quot;</span>, srcSize)</span><br><span class="line"> offSet, once := <span class="number">0</span>, keySize<span class="number">-11</span></span><br><span class="line"> buffer := bytes.Buffer&#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> offSet &lt; srcSize &#123;</span><br><span class="line">  endIndex := offSet + once</span><br><span class="line">  <span class="keyword">if</span> endIndex &gt; srcSize &#123;</span><br><span class="line">   endIndex = srcSize</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加密一部分</span></span><br><span class="line">  bytesOnce, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, src[offSet:endIndex])</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  buffer.Write(bytesOnce)</span><br><span class="line">  offSet = endIndex</span><br><span class="line"> &#125;</span><br><span class="line"> bytesEncrypt = buffer.Bytes()</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>




<h1 id="DES加密"><a href="#DES加密" class="headerlink" title="DES加密"></a>DES加密</h1><ul>
<li>DES(Data Encryption)是1977年美国联邦信息处理标准(FIPS)中所采用的一种对称密码（FIPS46-3）,一直以来被美国及其他国家的政府和银行等广泛使用。随着计算机的进步，DES已经能够被暴力破解,1997年的DES Challenge I 中用了96天破译密钥，1998年的DES Challenge II-1中用了41天，1998年的DES Challenge II-2中用了56小时，1999年的DES Challenge III 中只用了22小时15分钟。</li>
<li>DES是一种将64比特的明文加密成64比特的密文的对称密码算法，它的密钥的长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检查的比特，因此实质上其密钥长度是56比特。</li>
<li>DES 是以64比特的明文（比特序列）为一个单位来进行加密的，这个64比特的单位称为分组 ，一般来说，以分组为单位进行处理的密码算法称为分组密码，DES就是分组密码的一种。</li>
<li>DES每次只能加密64比特的数据，如果要加密的明文比较长，就需要对DES加密进行迭代（反复），而迭代的具体方式就称为模式。</li>
<li>DES 内部实现理论：在 des 中各个步骤称为轮，整个加密过程进行16轮循环。</li>
</ul>
<h2 id="内置库完成"><a href="#内置库完成" class="headerlink" title="内置库完成"></a>内置库完成</h2><p>加密模式采用ECB、填充方式采用pkcs5padding、密码使用”12345678”,输出时经hex编码。自己可以通过一些在线测试工具进行测试，看结果是否一致。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;bytes&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"> <span class="string">&quot;crypto/des&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> data := []<span class="type">byte</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"> key := []<span class="type">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line"> iv := []<span class="type">byte</span>(<span class="string">&quot;43218765&quot;</span>)</span><br><span class="line"></span><br><span class="line"> result, err := DesCBCEncrypt(data, key, iv)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err)</span><br><span class="line"> &#125;</span><br><span class="line"> b := hex.EncodeToString(result)</span><br><span class="line"> fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DesCBCEncrypt</span><span class="params">(data, key, iv []<span class="type">byte</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"> block, err := des.NewCipher(key)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> data = pkcs5Padding(data, block.BlockSize())</span><br><span class="line"> cryptText := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line"> blockMode := cipher.NewCBCEncrypter(block, iv)</span><br><span class="line"> blockMode.CryptBlocks(cryptText, data)</span><br><span class="line"> <span class="keyword">return</span> cryptText, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pkcs5Padding</span><span class="params">(cipherText []<span class="type">byte</span>, blockSize <span class="type">int</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"> padding := blockSize - <span class="built_in">len</span>(cipherText)%blockSize</span><br><span class="line"> padText := bytes.Repeat([]<span class="type">byte</span>&#123;<span class="type">byte</span>(padding)&#125;, padding)</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">append</span>(cipherText, padText...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/marspere/goencrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// key为12345678</span></span><br><span class="line"> <span class="comment">// iv为空</span></span><br><span class="line"> <span class="comment">// 采用ECB分组模式</span></span><br><span class="line"> <span class="comment">// 采用pkcs5padding填充模式</span></span><br><span class="line"> <span class="comment">// 输出结果使用base64进行加密</span></span><br><span class="line"> cipher := goencrypt.NewDESCipher([]<span class="type">byte</span>(<span class="string">&quot;12345678&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;&quot;</span>), goencrypt.ECBMode, goencrypt.Pkcs7, goencrypt.PrintBase64)</span><br><span class="line"> cipherText, err := cipher.DESEncrypt([]<span class="type">byte</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  fmt.Println(err)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(cipherText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="3DES加密算法"><a href="#3DES加密算法" class="headerlink" title="3DES加密算法"></a>3DES加密算法</h1><p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。它相当于是对每个数据块应用三次DES加密算法。<br>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解；3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。<br>还有一个库 非常NB</p>
<p>ECB模式下的3DES算法加解密信息，golang默认只提供CBC模式<br>这边有golang的加密库，非常厉害<br><strong>github.com&#x2F;forgoer&#x2F;openssl</strong></p>
<p>安装：<br><strong>go get github.com&#x2F;thinkoner&#x2F;openssl</strong></p>
<p>代码如下：</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/forgoer/openssl&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//定义密钥，必须是24byte</span></span><br><span class="line"> key := []<span class="type">byte</span>(<span class="string">&quot;123456789012345678901234&quot;</span>)</span><br><span class="line"> fmt.Println(<span class="string">&quot;密钥：&quot;</span>, key, hex.EncodeToString(key))</span><br><span class="line"></span><br><span class="line"> <span class="comment">//定义明文</span></span><br><span class="line"> src := []<span class="type">byte</span>(<span class="string">&quot;0102030109000000030000000F8898E37A7F8F3D742006111118080000FACE05&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//3DES-ECB加密</span></span><br><span class="line"> encodeData, _ := openssl.Des3ECBEncrypt(src, key, openssl.ZEROS_PADDING)</span><br><span class="line"> encryptBaseData := base64.StdEncoding.EncodeToString(encodeData)</span><br><span class="line"></span><br><span class="line"> fmt.Println(<span class="string">&quot;加密后Base64：&quot;</span>, encryptBaseData)</span><br><span class="line"> fmt.Println(<span class="string">&quot;加密后Hex：&quot;</span>, hex.EncodeToString(encodeData))</span><br><span class="line"></span><br><span class="line"> <span class="comment">//3DES-ECB解密</span></span><br><span class="line"> decodeBaseData, _ := base64.StdEncoding.DecodeString(encryptBaseData)</span><br><span class="line"> decodeData, _ := openssl.Des3ECBDecrypt(decodeBaseData, key, openssl.ZEROS_PADDING)</span><br><span class="line"></span><br><span class="line"> fmt.Println(<span class="string">&quot;解密后：&quot;</span>, hex.EncodeToString(decodeData))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="包括-Des的加密解密"><a href="#包括-Des的加密解密" class="headerlink" title="包括 Des的加密解密"></a>包括 Des的加密解密</h2><p>以下只举一个例子</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">srcData := <span class="string">&quot;L0j+JvbeVM0svSpjIwXdE7yTu78wiEszCmW8rwjXY3vrx2nEaUeJ/Rw/c/IRdlxIH+/ro4pykx6ESOkGU1YwM8ddEuuoTg5uPsqQ9/SuNds=&quot;</span></span><br><span class="line">key := []<span class="type">byte</span>(<span class="string">&quot;Ctpsp@884*&quot;</span>[:<span class="number">8</span>])</span><br><span class="line"><span class="comment">//3DES-ECB解密</span></span><br><span class="line">decodeBaseData, _ := base64.StdEncoding.DecodeString(srcData)</span><br><span class="line">decodeData, _ := openssl.DesECBDecrypt(decodeBaseData, key, openssl.PKCS5_PADDING)</span><br><span class="line">fmt.Println(<span class="string">&quot;解密后：&quot;</span>, <span class="type">string</span>(decodeData))</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Javacript加密解密方法</title>
    <url>/2023/03/28/Javacript%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>只需要安装几个库 其中需要了解最多的 <strong>crypto-js</strong></p>
<p>具体就不多介绍了直接上官网<br><a class="link"   href="https://www.npmjs.com/package/crypto-js" >https://www.npmjs.com/package/crypto-js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>安装</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install crypto-js --save-dev</span><br><span class="line">npm install md5 --save-dev</span><br></pre></td></tr></table></figure></div>
<h1 id="一些常见的built-in-函数加密"><a href="#一些常见的built-in-函数加密" class="headerlink" title="一些常见的built-in 函数加密"></a>一些常见的built-in 函数加密</h1><h2 id="unescape"><a href="#unescape" class="headerlink" title="unescape"></a>unescape</h2><p>unescape() 函数可对通过 escape() 编码的字符串进行解码。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="built_in">escape</span>(<span class="string">&quot;始識&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// %u59CB%u8B58</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="built_in">unescape</span>(e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u) <span class="comment">// 始識</span></span><br></pre></td></tr></table></figure></div>

<h2 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="built_in">encodeURI</span>(<span class="string">&quot;https://始識的博客&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="built_in">decodeURI</span>(e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u) <span class="comment">// https://始識的博客</span></span><br></pre></td></tr></table></figure></div>

<h2 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode"></a>fromCharCode</h2><p>将 Unicode 编码转为一个字符</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span>);</span><br><span class="line"><span class="comment">// A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">101</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>].<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"> [<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>]</span><br></pre></td></tr></table></figure></div>



<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="btoa-atob"><a href="#btoa-atob" class="headerlink" title="btoa atob"></a>btoa atob</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="title function_">btoa</span>(<span class="string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// // https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="title function_">atob</span>(e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u) <span class="comment">// https://www.cnblogs.com/zichliang/p/17265960.html</span></span><br></pre></td></tr></table></figure></div>
<h2 id="node实现方式"><a href="#node实现方式" class="headerlink" title="node实现方式"></a>node实现方式</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Base64 encoded string</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;https://www.cnblogs.com/zichliang/p/17265960.html&#x27;</span>;</span><br><span class="line"><span class="comment">//b编码</span></span><br><span class="line"><span class="keyword">const</span> buffBase64 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffBase64);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="keyword">const</span> buffStr = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(buffBase64, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// print normal string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffStr);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="引用-crypto-js-加密模块"><a href="#引用-crypto-js-加密模块" class="headerlink" title="引用 crypto-js 加密模块"></a>引用 crypto-js 加密模块</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64Encode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(text);</span><br><span class="line">  <span class="keyword">var</span> encodeData = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(srcs);</span><br><span class="line">  <span class="keyword">return</span> encodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64Decode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">parse</span>(encodeData);</span><br><span class="line">  <span class="keyword">var</span> decodeData = srcs.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">  <span class="keyword">return</span> decodeData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encodeData = <span class="title function_">base64Encode</span>()</span><br><span class="line"><span class="keyword">var</span> decodeData = <span class="title function_">base64Decode</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Base64 编码: &quot;</span>, encodeData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Base64 解码: &quot;</span>, decodeData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 编码:  aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemljaGxpYW5nL3AvMTcyNjU5NjAuaHRtbA==</span></span><br><span class="line"><span class="comment">// Base64 解码:  https://www.cnblogs.com/zichliang/p/17265960.html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MD5Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(text).<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MD5Test</span>())  <span class="comment">// 50177badb579733de56b628ae57fb972</span></span><br></pre></td></tr></table></figure></div>

<h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pbkdf2Encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line">    <span class="keyword">var</span> salt = <span class="string">&quot;1234567&quot;</span></span><br><span class="line">    <span class="comment">// key 长度 128，10 次重复运算</span></span><br><span class="line">    <span class="keyword">var</span> encryptedData = <span class="title class_">CryptoJS</span>.<span class="title class_">PBKDF2</span>(text, salt, &#123;<span class="attr">keySize</span>: <span class="number">128</span>/<span class="number">32</span>,<span class="attr">iterations</span>: <span class="number">10</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> encryptedData.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pbkdf2Encrypt</span>())  <span class="comment">// bcda4be78de797d8f5067331b1a70d40</span></span><br></pre></td></tr></table></figure></div>


<h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SHA1Encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="title class_">SHA1</span>(text).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SHA1Encrypt</span>())  <span class="comment">// ca481c13d5af7135b69d11ffb0a443a635fbc307</span></span><br></pre></td></tr></table></figure></div>

<h1 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SHA256Encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="title class_">SHA256</span>(text).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SHA256Encrypt</span>())  <span class="comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span></span><br></pre></td></tr></table></figure></div>
<p>或者使用原生JS源代码文件生成<br>不要问为什么只有这个有js源码，因为这个加密我刚好用到了。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sha256</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chrsz = <span class="number">8</span></span><br><span class="line">    <span class="keyword">const</span> hexcase = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safe_add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">        <span class="keyword">const</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">S</span>(<span class="params">X, n</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (X &gt;&gt;&gt; n) | (X &lt;&lt; (<span class="number">32</span> - n))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">R</span>(<span class="params">X, n</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (X &gt;&gt;&gt; n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Ch</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((x &amp; y) ^ ((~x) &amp; z))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Maj</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Sigma0256</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_">S</span>(x, <span class="number">2</span>) ^ <span class="title function_">S</span>(x, <span class="number">13</span>) ^ <span class="title function_">S</span>(x, <span class="number">22</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Sigma1256</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_">S</span>(x, <span class="number">6</span>) ^ <span class="title function_">S</span>(x, <span class="number">11</span>) ^ <span class="title function_">S</span>(x, <span class="number">25</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Gamma0256</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_">S</span>(x, <span class="number">7</span>) ^ <span class="title function_">S</span>(x, <span class="number">18</span>) ^ <span class="title function_">R</span>(x, <span class="number">3</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Gamma1256</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_">S</span>(x, <span class="number">17</span>) ^ <span class="title function_">S</span>(x, <span class="number">19</span>) ^ <span class="title function_">R</span>(x, <span class="number">10</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">core_sha256</span>(<span class="params">m, l</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> K = [<span class="number">0x428A2F98</span>, <span class="number">0x71374491</span>, <span class="number">0xB5C0FBCF</span>, <span class="number">0xE9B5DBA5</span>, <span class="number">0x3956C25B</span>, <span class="number">0x59F111F1</span>, <span class="number">0x923F82A4</span>, <span class="number">0xAB1C5ED5</span>, <span class="number">0xD807AA98</span>, <span class="number">0x12835B01</span>, <span class="number">0x243185BE</span>, <span class="number">0x550C7DC3</span>, <span class="number">0x72BE5D74</span>, <span class="number">0x80DEB1FE</span>, <span class="number">0x9BDC06A7</span>, <span class="number">0xC19BF174</span>, <span class="number">0xE49B69C1</span>, <span class="number">0xEFBE4786</span>, <span class="number">0xFC19DC6</span>, <span class="number">0x240CA1CC</span>, <span class="number">0x2DE92C6F</span>, <span class="number">0x4A7484AA</span>, <span class="number">0x5CB0A9DC</span>, <span class="number">0x76F988DA</span>, <span class="number">0x983E5152</span>, <span class="number">0xA831C66D</span>, <span class="number">0xB00327C8</span>, <span class="number">0xBF597FC7</span>, <span class="number">0xC6E00BF3</span>, <span class="number">0xD5A79147</span>, <span class="number">0x6CA6351</span>, <span class="number">0x14292967</span>, <span class="number">0x27B70A85</span>, <span class="number">0x2E1B2138</span>, <span class="number">0x4D2C6DFC</span>, <span class="number">0x53380D13</span>, <span class="number">0x650A7354</span>, <span class="number">0x766A0ABB</span>, <span class="number">0x81C2C92E</span>, <span class="number">0x92722C85</span>, <span class="number">0xA2BFE8A1</span>, <span class="number">0xA81A664B</span>, <span class="number">0xC24B8B70</span>, <span class="number">0xC76C51A3</span>, <span class="number">0xD192E819</span>, <span class="number">0xD6990624</span>, <span class="number">0xF40E3585</span>, <span class="number">0x106AA070</span>, <span class="number">0x19A4C116</span>, <span class="number">0x1E376C08</span>, <span class="number">0x2748774C</span>, <span class="number">0x34B0BCB5</span>, <span class="number">0x391C0CB3</span>, <span class="number">0x4ED8AA4A</span>, <span class="number">0x5B9CCA4F</span>, <span class="number">0x682E6FF3</span>, <span class="number">0x748F82EE</span>, <span class="number">0x78A5636F</span>, <span class="number">0x84C87814</span>, <span class="number">0x8CC70208</span>, <span class="number">0x90BEFFFA</span>, <span class="number">0xA4506CEB</span>, <span class="number">0xBEF9A3F7</span>, <span class="number">0xC67178F2</span>]</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">HASH</span> = [<span class="number">0x6A09E667</span>, <span class="number">0xBB67AE85</span>, <span class="number">0x3C6EF372</span>, <span class="number">0xA54FF53A</span>, <span class="number">0x510E527F</span>, <span class="number">0x9B05688C</span>, <span class="number">0x1F83D9AB</span>, <span class="number">0x5BE0CD19</span>]</span><br><span class="line">        <span class="keyword">const</span> W = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">64</span>)</span><br><span class="line">        <span class="keyword">let</span> a, b, c, d, e, f, g, h, i, j</span><br><span class="line">        <span class="keyword">let</span> <span class="variable constant_">T1</span>, <span class="variable constant_">T2</span></span><br><span class="line">        m[l &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (<span class="number">24</span> - l % <span class="number">32</span>)</span><br><span class="line">        m[((l + <span class="number">64</span> &gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">15</span>] = l</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m.<span class="property">length</span>; i += <span class="number">16</span>) &#123;</span><br><span class="line">            a = <span class="variable constant_">HASH</span>[<span class="number">0</span>]</span><br><span class="line">            b = <span class="variable constant_">HASH</span>[<span class="number">1</span>]</span><br><span class="line">            c = <span class="variable constant_">HASH</span>[<span class="number">2</span>]</span><br><span class="line">            d = <span class="variable constant_">HASH</span>[<span class="number">3</span>]</span><br><span class="line">            e = <span class="variable constant_">HASH</span>[<span class="number">4</span>]</span><br><span class="line">            f = <span class="variable constant_">HASH</span>[<span class="number">5</span>]</span><br><span class="line">            g = <span class="variable constant_">HASH</span>[<span class="number">6</span>]</span><br><span class="line">            h = <span class="variable constant_">HASH</span>[<span class="number">7</span>]</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                    W[j] = m[j + i]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    W[j] = <span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(<span class="title class_">Gamma1256</span>(W[j - <span class="number">2</span>]), W[j - <span class="number">7</span>]), <span class="title class_">Gamma0256</span>(W[j - <span class="number">15</span>])), W[j - <span class="number">16</span>])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable constant_">T1</span> = <span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(<span class="title function_">safe_add</span>(h, <span class="title class_">Sigma1256</span>(e)), <span class="title class_">Ch</span>(e, f, g)), K[j]), W[j])</span><br><span class="line">                <span class="variable constant_">T2</span> = <span class="title function_">safe_add</span>(<span class="title class_">Sigma0256</span>(a), <span class="title class_">Maj</span>(a, b, c))</span><br><span class="line">                h = g</span><br><span class="line">                g = f</span><br><span class="line">                f = e</span><br><span class="line">                e = <span class="title function_">safe_add</span>(d, <span class="variable constant_">T1</span>)</span><br><span class="line">                d = c</span><br><span class="line">                c = b</span><br><span class="line">                b = a</span><br><span class="line">                a = <span class="title function_">safe_add</span>(<span class="variable constant_">T1</span>, <span class="variable constant_">T2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">0</span>] = <span class="title function_">safe_add</span>(a, <span class="variable constant_">HASH</span>[<span class="number">0</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">1</span>] = <span class="title function_">safe_add</span>(b, <span class="variable constant_">HASH</span>[<span class="number">1</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">2</span>] = <span class="title function_">safe_add</span>(c, <span class="variable constant_">HASH</span>[<span class="number">2</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">3</span>] = <span class="title function_">safe_add</span>(d, <span class="variable constant_">HASH</span>[<span class="number">3</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">4</span>] = <span class="title function_">safe_add</span>(e, <span class="variable constant_">HASH</span>[<span class="number">4</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">5</span>] = <span class="title function_">safe_add</span>(f, <span class="variable constant_">HASH</span>[<span class="number">5</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">6</span>] = <span class="title function_">safe_add</span>(g, <span class="variable constant_">HASH</span>[<span class="number">6</span>])</span><br><span class="line">            <span class="variable constant_">HASH</span>[<span class="number">7</span>] = <span class="title function_">safe_add</span>(h, <span class="variable constant_">HASH</span>[<span class="number">7</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">HASH</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str2binb</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> bin = []</span><br><span class="line">        <span class="keyword">const</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span> * chrsz; i += chrsz) &#123;</span><br><span class="line">            bin[i &gt;&gt; <span class="number">5</span>] |= (str.<span class="title function_">charCodeAt</span>(i / chrsz) &amp; mask) &lt;&lt; (<span class="number">24</span> - i % <span class="number">32</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bin</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Utf8Encode</span>(<span class="params">string</span>) &#123;</span><br><span class="line">        string = string.<span class="title function_">replace</span>(<span class="regexp">/\r\n/g</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> utfText = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; string.<span class="property">length</span>; n++) &#123;</span><br><span class="line">            <span class="keyword">const</span> c = string.<span class="title function_">charCodeAt</span>(n)</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>)</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>)</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">                utfText += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> utfText</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">binb2hex</span>(<span class="params">binarray</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> hex_tab = hexcase ? <span class="string">&#x27;0123456789ABCDEF&#x27;</span> : <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; binarray.<span class="property">length</span> * <span class="number">4</span>; i++) &#123;</span><br><span class="line">            str += hex_tab.<span class="title function_">charAt</span>((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span> + <span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">                hex_tab.<span class="title function_">charAt</span>((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xF</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">    s = <span class="title class_">Utf8Encode</span>(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binb2hex</span>(<span class="title function_">core_sha256</span>(<span class="title function_">str2binb</span>(s), s.<span class="property">length</span> * chrsz))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>使用</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sha256</span>(<span class="string">&#x27;https://www.cnblogs.com/zichliang&#x27;</span>)) <span class="comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span></span><br></pre></td></tr></table></figure></div>


<h1 id="HMAC-SHA256"><a href="#HMAC-SHA256" class="headerlink" title="HMAC-SHA256"></a>HMAC-SHA256</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HmacSHA256Encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="title class_">CryptoJS</span>.<span class="title class_">HmacSHA256</span>(<span class="string">&quot;这是加密信息&quot;</span>, <span class="string">&quot;这是秘钥&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> hashInBase64 = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(hash);</span><br><span class="line">    <span class="keyword">return</span> hashInBase64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HmacSHA256Encrypt</span>())  <span class="comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span></span><br></pre></td></tr></table></figure></div>

<p>js源代码</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// To ensure cross-browser support even without a proper SubtleCrypto</span></span><br><span class="line"><span class="comment">// impelmentation (or without access to the impelmentation, as is the case with</span></span><br><span class="line"><span class="comment">// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256</span></span><br><span class="line"><span class="comment">// HMAC signatures using nothing but raw JavaScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// By giving internal functions names that we can mangle, future calls to</span></span><br><span class="line"><span class="comment">// them are reduced to a single byte (minor space savings in minified file)</span></span><br><span class="line"><span class="keyword">var</span> uint8Array = <span class="title class_">Uint8Array</span>;</span><br><span class="line"><span class="keyword">var</span> uint32Array = <span class="title class_">Uint32Array</span>;</span><br><span class="line"><span class="keyword">var</span> pow = <span class="title class_">Math</span>.<span class="property">pow</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will be initialized below</span></span><br><span class="line"><span class="comment">// Using a Uint32Array instead of a simple array makes the minified code</span></span><br><span class="line"><span class="comment">// a bit bigger (we lose our `unshift()` hack), but comes with huge</span></span><br><span class="line"><span class="comment">// performance gains</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">DEFAULT_STATE</span> = <span class="keyword">new</span> <span class="title function_">uint32Array</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">ROUND_CONSTANTS</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reusable object for expanded message</span></span><br><span class="line"><span class="comment">// Using a Uint32Array instead of a simple array makes the minified code</span></span><br><span class="line"><span class="comment">// 7 bytes larger, but comes with huge performance gains</span></span><br><span class="line"><span class="keyword">var</span> M = <span class="keyword">new</span> <span class="title function_">uint32Array</span>(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After minification the code to compute the default state and round</span></span><br><span class="line"><span class="comment">// constants is smaller than the output. More importantly, this serves as a</span></span><br><span class="line"><span class="comment">// good educational aide for anyone wondering where the magic numbers come</span></span><br><span class="line"><span class="comment">// from. No magic numbers FTW!</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFractionalBits</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((n - (n | <span class="number">0</span>)) * <span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">32</span>)) | <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>, nPrime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (nPrime &lt; <span class="number">64</span>) &#123;</span><br><span class="line">    <span class="comment">// isPrime() was in-lined from its original function form to save</span></span><br><span class="line">    <span class="comment">// a few bytes</span></span><br><span class="line">    <span class="keyword">var</span> isPrime = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes</span></span><br><span class="line">    <span class="comment">// var sqrtN = pow(n, 1 / 2);</span></span><br><span class="line">    <span class="comment">// So technically to determine if a number is prime you only need to</span></span><br><span class="line">    <span class="comment">// check numbers up to the square root. However this function only runs</span></span><br><span class="line">    <span class="comment">// once and we&#x27;re only computing the first 64 primes (up to 311), so on</span></span><br><span class="line">    <span class="comment">// any modern CPU this whole function runs in a couple milliseconds.</span></span><br><span class="line">    <span class="comment">// By going to n / 2 instead of sqrt(n) we net 8 byte savings and no</span></span><br><span class="line">    <span class="comment">// scaling performance cost</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> factor = <span class="number">2</span>; factor &lt;= n / <span class="number">2</span>; factor++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % factor === <span class="number">0</span>) &#123;</span><br><span class="line">            isPrime = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isPrime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nPrime &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="variable constant_">DEFAULT_STATE</span>[nPrime] = <span class="title function_">getFractionalBits</span>(<span class="title function_">pow</span>(n, <span class="number">1</span> / <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable constant_">ROUND_CONSTANTS</span>[nPrime] = <span class="title function_">getFractionalBits</span>(<span class="title function_">pow</span>(n, <span class="number">1</span> / <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        nPrime++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For cross-platform support we need to ensure that all 32-bit words are</span></span><br><span class="line"><span class="comment">// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,</span></span><br><span class="line"><span class="comment">// so upon reading or writing to our ArrayBuffer we&#x27;ll only swap the bytes</span></span><br><span class="line"><span class="comment">// if our system is LittleEndian (which is about 99% of CPUs)</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">LittleEndian</span> = !!<span class="keyword">new</span> <span class="title function_">uint8Array</span>(<span class="keyword">new</span> <span class="title function_">uint32Array</span>([<span class="number">1</span>]).<span class="property">buffer</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convertEndian</span>(<span class="params">word</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">LittleEndian</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// byte 1 -&gt; byte 4</span></span><br><span class="line">            (word &gt;&gt;&gt; <span class="number">24</span>) |</span><br><span class="line">            <span class="comment">// byte 2 -&gt; byte 3</span></span><br><span class="line">            (((word &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">            <span class="comment">// byte 3 -&gt; byte 2</span></span><br><span class="line">            ((word &amp; <span class="number">0xff00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">            <span class="comment">// byte 4 -&gt; byte 1</span></span><br><span class="line">            (word &lt;&lt; <span class="number">24</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rightRotate</span>(<span class="params">word, bits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (word &gt;&gt;&gt; bits) | (word &lt;&lt; (<span class="number">32</span> - bits));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sha256</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// Copy default state</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">STATE</span> = <span class="variable constant_">DEFAULT_STATE</span>.<span class="title function_">slice</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Caching this reduces occurrences of &quot;.length&quot; in minified JavaScript</span></span><br><span class="line">    <span class="comment">// 3 more byte savings! :D</span></span><br><span class="line">    <span class="keyword">var</span> legth = data.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pad data</span></span><br><span class="line">    <span class="keyword">var</span> bitLength = legth * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> newBitLength = (<span class="number">512</span> - ((bitLength + <span class="number">64</span>) % <span class="number">512</span>) - <span class="number">1</span>) + bitLength + <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;bytes&quot; and &quot;words&quot; are stored BigEndian</span></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="title function_">uint8Array</span>(newBitLength / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> words = <span class="keyword">new</span> <span class="title function_">uint32Array</span>(bytes.<span class="property">buffer</span>);</span><br><span class="line"></span><br><span class="line">    bytes.<span class="title function_">set</span>(data, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Append a 1</span></span><br><span class="line">    bytes[legth] = <span class="number">0b10000000</span>;</span><br><span class="line">    <span class="comment">// Store length in BigEndian</span></span><br><span class="line">    words[words.<span class="property">length</span> - <span class="number">1</span>] = <span class="title function_">convertEndian</span>(bitLength);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop iterator (avoid two instances of &quot;var&quot;) -- saves 2 bytes</span></span><br><span class="line">    <span class="keyword">var</span> round;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process blocks (512 bits / 64 bytes / 16 words at a time)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> block = <span class="number">0</span>; block &lt; newBitLength / <span class="number">32</span>; block += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> workingState = <span class="variable constant_">STATE</span>.<span class="title function_">slice</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Rounds</span></span><br><span class="line">        <span class="keyword">for</span> (round = <span class="number">0</span>; round &lt; <span class="number">64</span>; round++) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">MRound</span>;</span><br><span class="line">            <span class="comment">// Expand message</span></span><br><span class="line">            <span class="keyword">if</span> (round &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                <span class="comment">// Convert to platform Endianness for later math</span></span><br><span class="line">                <span class="title class_">MRound</span> = <span class="title function_">convertEndian</span>(words[block + round]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> gamma0x = M[round - <span class="number">15</span>];</span><br><span class="line">                <span class="keyword">var</span> gamma1x = M[round - <span class="number">2</span>];</span><br><span class="line">                <span class="title class_">MRound</span> =</span><br><span class="line">                    M[round - <span class="number">7</span>] + M[round - <span class="number">16</span>] + (</span><br><span class="line">                        <span class="title function_">rightRotate</span>(gamma0x, <span class="number">7</span>) ^</span><br><span class="line">                        <span class="title function_">rightRotate</span>(gamma0x, <span class="number">18</span>) ^</span><br><span class="line">                        (gamma0x &gt;&gt;&gt; <span class="number">3</span>)</span><br><span class="line">                    ) + (</span><br><span class="line">                        <span class="title function_">rightRotate</span>(gamma1x, <span class="number">17</span>) ^</span><br><span class="line">                        <span class="title function_">rightRotate</span>(gamma1x, <span class="number">19</span>) ^</span><br><span class="line">                        (gamma1x &gt;&gt;&gt; <span class="number">10</span>)</span><br><span class="line">                    )</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// M array matches platform endianness</span></span><br><span class="line">            M[round] = <span class="title class_">MRound</span> |= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Computation</span></span><br><span class="line">            <span class="keyword">var</span> t1 =</span><br><span class="line">                (</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">4</span>], <span class="number">6</span>) ^</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">4</span>], <span class="number">11</span>) ^</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">4</span>], <span class="number">25</span>)</span><br><span class="line">                ) +</span><br><span class="line">                (</span><br><span class="line">                    (workingState[<span class="number">4</span>] &amp; workingState[<span class="number">5</span>]) ^</span><br><span class="line">                    (~workingState[<span class="number">4</span>] &amp; workingState[<span class="number">6</span>])</span><br><span class="line">                ) + workingState[<span class="number">7</span>] + <span class="title class_">MRound</span> + <span class="variable constant_">ROUND_CONSTANTS</span>[round]</span><br><span class="line">            ;</span><br><span class="line">            <span class="keyword">var</span> t2 =</span><br><span class="line">                (</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">0</span>], <span class="number">2</span>) ^</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">0</span>], <span class="number">13</span>) ^</span><br><span class="line">                    <span class="title function_">rightRotate</span>(workingState[<span class="number">0</span>], <span class="number">22</span>)</span><br><span class="line">                ) +</span><br><span class="line">                (</span><br><span class="line">                    (workingState[<span class="number">0</span>] &amp; workingState[<span class="number">1</span>]) ^</span><br><span class="line">                    (workingState[<span class="number">2</span>] &amp; (workingState[<span class="number">0</span>] ^</span><br><span class="line">                        workingState[<span class="number">1</span>]))</span><br><span class="line">                )</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">7</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                workingState[i] = workingState[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            workingState[<span class="number">0</span>] = (t1 + t2) | <span class="number">0</span>;</span><br><span class="line">            workingState[<span class="number">4</span>] = (workingState[<span class="number">4</span>] + t1) | <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update state</span></span><br><span class="line">        <span class="keyword">for</span> (round = <span class="number">0</span>; round &lt; <span class="number">8</span>; round++) &#123;</span><br><span class="line">            <span class="variable constant_">STATE</span>[round] = (<span class="variable constant_">STATE</span>[round] + workingState[round]) | <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally the state needs to be converted to BigEndian for output</span></span><br><span class="line">    <span class="comment">// And we want to return a Uint8Array, not a Uint32Array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">uint8Array</span>(<span class="keyword">new</span> <span class="title function_">uint32Array</span>(</span><br><span class="line">        <span class="variable constant_">STATE</span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">convertEndian</span>(val);</span><br><span class="line">        &#125;)</span><br><span class="line">    ).<span class="property">buffer</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hmac</span>(<span class="params">key, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="property">length</span> &gt; <span class="number">64</span>)</span><br><span class="line">        key = <span class="title function_">sha256</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key.<span class="property">length</span> &lt; <span class="number">64</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">64</span>);</span><br><span class="line">        tmp.<span class="title function_">set</span>(key, <span class="number">0</span>);</span><br><span class="line">        key = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate inner and outer keys</span></span><br><span class="line">    <span class="keyword">var</span> innerKey = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">var</span> outerKey = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        innerKey[i] = <span class="number">0x36</span> ^ key[i];</span><br><span class="line">        outerKey[i] = <span class="number">0x5c</span> ^ key[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Append the innerKey</span></span><br><span class="line">    <span class="keyword">var</span> msg = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(data.<span class="property">length</span> + <span class="number">64</span>);</span><br><span class="line">    msg.<span class="title function_">set</span>(innerKey, <span class="number">0</span>);</span><br><span class="line">    msg.<span class="title function_">set</span>(data, <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Has the previous message and append the outerKey</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">64</span> + <span class="number">32</span>);</span><br><span class="line">    result.<span class="title function_">set</span>(outerKey, <span class="number">0</span>);</span><br><span class="line">    result.<span class="title function_">set</span>(<span class="title function_">sha256</span>(msg), <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hash the previous message</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sha256</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert a string to a Uint8Array, SHA-256 it, and convert back to string</span></span><br><span class="line"><span class="keyword">const</span> encoder = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sign</span>(<span class="params">inputKey, inputData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="keyword">typeof</span> inputKey === <span class="string">&quot;string&quot;</span> ? encoder.<span class="title function_">encode</span>(inputKey) : inputKey;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">typeof</span> inputData === <span class="string">&quot;string&quot;</span> ? encoder.<span class="title function_">encode</span>(inputData) : inputData;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hmac</span>(key, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hex</span>(<span class="title function_">sha256</span>(encoder.<span class="title function_">encode</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">bin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bin.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, val</span>) =&gt;</span></span><br><span class="line">        acc + (<span class="string">&quot;00&quot;</span> + val.<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">substr</span>(-<span class="number">2</span>)</span><br><span class="line">        , <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>使用</strong></p>
<div class="highlight-container" data-rel="Stylus"><figure class="iseeu highlight stylus"><table><tr><td class="code"><pre><span class="line">console<span class="selector-class">.log</span>(<span class="built_in">hex</span>(<span class="built_in">sign</span>(<span class="string">&quot;秘钥&quot;</span>, <span class="string">&quot;数据&quot;</span>))) <span class="comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span></span><br></pre></td></tr></table></figure></div>


<h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> CryptoJS = require(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HMACEncrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">text</span> = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="string">&quot;secret&quot;</span></span><br><span class="line">  <span class="keyword">return</span> CryptoJS.HmacMD5(<span class="built_in">text</span>, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(HMACEncrypt())<span class="comment">// 20ca7a63f1f4a7047ffd6b722b45319a</span></span><br></pre></td></tr></table></figure></div>

<h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><div class="highlight-container" data-rel="Stata"><figure class="iseeu highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> CryptoJS = require(&#x27;crypto-js&#x27;)</span><br><span class="line"></span><br><span class="line">function desEncrypt() &#123;</span><br><span class="line">  <span class="keyword">var</span> key = CryptoJS.<span class="keyword">enc</span>.Utf8.<span class="keyword">parse</span>(desKey),</span><br><span class="line">      iv = CryptoJS.<span class="keyword">enc</span>.Utf8.<span class="keyword">parse</span>(desIv),</span><br><span class="line">      srcs = CryptoJS.<span class="keyword">enc</span>.Utf8.<span class="keyword">parse</span>(text),</span><br><span class="line">      <span class="comment">// CBC 加密模式，Pkcs7 填充方式</span></span><br><span class="line">      encrypted = CryptoJS.<span class="keyword">DES</span>.encrypt(srcs, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="keyword">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function desDecrypt() &#123;</span><br><span class="line">  <span class="keyword">var</span> key = CryptoJS.<span class="keyword">enc</span>.Utf8.<span class="keyword">parse</span>(desKey),</span><br><span class="line">      iv = CryptoJS.<span class="keyword">enc</span>.Utf8.<span class="keyword">parse</span>(desIv),</span><br><span class="line">      srcs = encryptedData,</span><br><span class="line">      <span class="comment">// CBC 加密模式，Pkcs7 填充方式</span></span><br><span class="line">      decrypted = CryptoJS.<span class="keyword">DES</span>.decrypt(srcs, key, &#123;</span><br><span class="line">        iv: iv,</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">return</span> decrypted.<span class="keyword">toString</span>(CryptoJS.<span class="keyword">enc</span>.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="comment">// 待加密对象</span></span><br><span class="line"><span class="keyword">var</span> desKey = <span class="string">&quot;0123456789ABCDEF&quot;</span>    <span class="comment">// 密钥</span></span><br><span class="line"><span class="keyword">var</span> desIv = <span class="string">&quot;0123456789ABCDEF&quot;</span>    <span class="comment">// 初始向量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = desEncrypt()</span><br><span class="line"><span class="keyword">var</span> decryptedData = desDecrypt()</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密字符串:  p+4ovmk1n5YwN3dq5y8VqhngLKW//5MM/qDgtj2SOC6TpJaFgSKEVg==</span></span><br><span class="line"><span class="comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tripleDesEncrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(desKey),</span><br><span class="line">      iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(desIv),</span><br><span class="line">      srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(text),</span><br><span class="line">      <span class="comment">// ECB 加密方式，Iso10126 填充方式</span></span><br><span class="line">      encrypted = <span class="title class_">CryptoJS</span>.<span class="property">TripleDES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123;</span><br><span class="line">        <span class="attr">iv</span>: iv,</span><br><span class="line">        <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Iso10126</span></span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tripleDesDecrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(desKey),</span><br><span class="line">      iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(desIv),</span><br><span class="line">      srcs = encryptedData,</span><br><span class="line">      <span class="comment">// ECB 加密方式，Iso10126 填充方式</span></span><br><span class="line">      decrypted = <span class="title class_">CryptoJS</span>.<span class="property">TripleDES</span>.<span class="title function_">decrypt</span>(srcs, key, &#123;</span><br><span class="line">        <span class="attr">iv</span>: iv,</span><br><span class="line">        <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Iso10126</span></span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="comment">// 待加密对象</span></span><br><span class="line"><span class="keyword">var</span> desKey = <span class="string">&quot;0123456789ABCDEF&quot;</span>    <span class="comment">// 密钥</span></span><br><span class="line"><span class="keyword">var</span> desIv = <span class="string">&quot;0123456789ABCDEF&quot;</span>    <span class="comment">// 偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = <span class="title function_">tripleDesEncrypt</span>()</span><br><span class="line"><span class="keyword">var</span> decryptedData = <span class="title function_">tripleDesDecrypt</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密字符串:   pl/nNfpIrejwK+/X87VmGZIbS3kOB+IpFcx/97wpR4AO6q9HGjxb4w==</span></span><br><span class="line"><span class="comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">aesEncrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aesKey),</span><br><span class="line">        iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aesIv),</span><br><span class="line">        srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(text),</span><br><span class="line">        <span class="comment">// CBC 加密方式，Pkcs7 填充方式</span></span><br><span class="line">        encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123;</span><br><span class="line">            <span class="attr">iv</span>: iv,</span><br><span class="line">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">            <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">aesDecrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aesKey),</span><br><span class="line">        iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aesIv),</span><br><span class="line">        srcs = encryptedData,</span><br><span class="line">        <span class="comment">// CBC 加密方式，Pkcs7 填充方式</span></span><br><span class="line">        decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(srcs, key, &#123;</span><br><span class="line">            <span class="attr">iv</span>: iv,</span><br><span class="line">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">            <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="comment">// 待加密对象</span></span><br><span class="line"><span class="keyword">var</span> aesKey = <span class="string">&quot;0123456789ABCDEF&quot;</span>   <span class="comment">// 密钥，16 倍数</span></span><br><span class="line"><span class="keyword">var</span> aesIv = <span class="string">&quot;0123456789ABCDEF&quot;</span>    <span class="comment">// 偏移量，16 倍数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = <span class="title function_">aesEncrypt</span>()</span><br><span class="line"><span class="keyword">var</span> decryptedData = <span class="title function_">aesDecrypt</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密字符串:  /q8i+1GN8yfzIb8CaEJfDOfDQ74in+XzQZYBtKF2wkAB6dM1qbBZ3HJVlY+kHDE3</span></span><br><span class="line"><span class="comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span></span><br></pre></td></tr></table></figure></div>

<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> CryptoJS = require(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RC4Encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.RC4.encrypt(<span class="built_in">text</span>, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RC4Decrypt</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">text</span> = <span class="string">&quot;https://www.cnblogs.com/zichliang&quot;</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;12345678ASDFG&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = RC4Encrypt()</span><br><span class="line"><span class="keyword">var</span> decryptedData = RC4Decrypt()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密字符串:  U2FsdGVkX19/bT2W57mzjwoF5Fc3Zb4WiyDU+MiNMmHfdJvZeScl0EW9yJWCPiRrsA==</span></span><br><span class="line"><span class="comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span></span><br></pre></td></tr></table></figure></div>

<h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 crypto-js 加密模块</span></span><br><span class="line"><span class="keyword">var</span> CryptoJS = require(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rabbitEncrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.Rabbit.encrypt(<span class="built_in">text</span>, key).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rabbitDecrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">text</span> = <span class="string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;1234567ASDFG&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = rabbitEncrypt()</span><br><span class="line"><span class="keyword">var</span> decryptedData = rabbitDecrypt()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密字符串:  U2FsdGVkX1/pYbHvbNff3/RNpso4yRKIX0XDFta8hoLNxe52K8HSmF+XV8ayYqucTKVPP6AJtGczXS7U9kkxHnw=</span></span><br><span class="line"><span class="comment">// 解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span></span><br></pre></td></tr></table></figure></div>

<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="使用-node-rsa"><a href="#使用-node-rsa" class="headerlink" title="使用 node-rsa"></a>使用 node-rsa</h2><p>需要安装一个库 </p>
<blockquote>
<p>npm install node-rsa</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 node-rsa 加密模块</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NodeRSA</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rsaEncrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pubKey = <span class="keyword">new</span> <span class="title class_">NodeRSA</span>(publicKey,<span class="string">&#x27;pkcs8-public&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> encryptedData = pubKey.<span class="title function_">encrypt</span>(text, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> encryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rsaDecrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">    priKey = <span class="keyword">new</span> <span class="title class_">NodeRSA</span>(privatekey,<span class="string">&#x27;pkcs8-private&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> decryptedData = priKey.<span class="title function_">decrypt</span>(encryptedData, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> decryptedData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="title class_">NodeRSA</span>(&#123;<span class="attr">b</span>: <span class="number">512</span>&#125;);                    <span class="comment">//生成512位秘钥</span></span><br><span class="line"><span class="keyword">var</span> publicKey = key.<span class="title function_">exportKey</span>(<span class="string">&#x27;pkcs8-public&#x27;</span>);    <span class="comment">//导出公钥</span></span><br><span class="line"><span class="keyword">var</span> privatekey = key.<span class="title function_">exportKey</span>(<span class="string">&#x27;pkcs8-private&#x27;</span>);  <span class="comment">//导出私钥</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encryptedData = <span class="title function_">rsaEncrypt</span>()</span><br><span class="line"><span class="keyword">var</span> decryptedData = <span class="title function_">rsaDecrypt</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;公钥:\n&quot;</span>, publicKey)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;私钥:\n&quot;</span>, privatekey)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密字符串: &quot;</span>, encryptedData)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密字符串: &quot;</span>, decryptedData)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">公钥:</span></span><br><span class="line"><span class="comment"> -----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="comment">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAN7JoMDNvvpB/po2OMSeSKsromfP5EyI</span></span><br><span class="line"><span class="comment">0fAz6XDVwqdTUBwwAArLlqIzmVNK0yi4nlbj5eF+O8ZjRkRQ6xKP/CMCAwEAAQ==</span></span><br><span class="line"><span class="comment">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="comment">私钥:</span></span><br><span class="line"><span class="comment"> -----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="comment">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA3smgwM2++kH+mjY4</span></span><br><span class="line"><span class="comment">xJ5IqyuiZ8/kTIjR8DPpcNXCp1NQHDAACsuWojOZU0rTKLieVuPl4X47xmNGRFDr</span></span><br><span class="line"><span class="comment">Eo/8IwIDAQABAkEArI0Ps6TnIJ9SmZAbYbWSZPjTvYHXuatSpq8eQ+Vb8Ql003G5</span></span><br><span class="line"><span class="comment">Y2FIoWpQX1jQ9/DsxEZ/1u+71bl08z1eONz2KQIhAPgLZOKanhDDaOn5sO7Y2RM3</span></span><br><span class="line"><span class="comment">TyLS08mCGNGQxEhkEttFAiEA5e7bvnrSNh1lcF/QTxkWPGoXb9kxPljm49CfiTS9</span></span><br><span class="line"><span class="comment">PEcCIDzxX7olTwzDVjWWeZhVgxArmK/vqMVrx3lF3lQC8ncZAiBlpY5nSoybd6tc</span></span><br><span class="line"><span class="comment">Xj8MeJ6n3o6112I5mbuYgqXEVhhCCQIgY6vinhOzMF0dX9MNjBm8x1mUCd4XG2TN</span></span><br><span class="line"><span class="comment">QQcOik3RIGw=</span></span><br><span class="line"><span class="comment">-----END PRIVATE KEY-----</span></span><br><span class="line"><span class="comment">加密字符串:  ZolvYwjFqOp1Yldui7rm75mSN5kz7533nc3B3H6xZGQR9v0elhbcjmI9vXaBsgdLNTuyoVk3bfzWfQdeIpvCpcBCTGe1HG9KrSBYDiWJc4vBgVBz8D57/XaS1zjM0kuAJ/ELu4os7XG5lMQbRbFhHXs7zQsIBq6/m2IZdGWx7HjB2jiQBQPMfszdQUOwQA</span></span><br><span class="line"><span class="comment">bM5o7lRvUgdMVaZkEWpOTEybmUX4kxBP5CvNtB86oTRUw+U7Ex7QB8lWj33hoKvh70</span></span><br><span class="line"><span class="comment">解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="使用自带模块crypto"><a href="#使用自带模块crypto" class="headerlink" title="使用自带模块crypto:"></a>使用自带模块crypto:</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nodeRSA = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个1024长度的密钥对</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="keyword">new</span> <span class="title function_">nodeRSA</span>(&#123;<span class="attr">b</span>: <span class="number">1024</span>&#125;);</span><br><span class="line"><span class="comment">// 导出公钥</span></span><br><span class="line"><span class="keyword">const</span> publicKey = key.<span class="title function_">exportKey</span>(<span class="string">&#x27;public&#x27;</span>);</span><br><span class="line"><span class="comment">// 导出私钥</span></span><br><span class="line"><span class="keyword">const</span> privateKey = key.<span class="title function_">exportKey</span>(<span class="string">&#x27;private&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&#x27;https://www.cnblogs.com/zichliang/p/16653303.html&#x27;</span></span><br><span class="line"><span class="comment">// 使用私钥加密，公钥解密</span></span><br><span class="line"><span class="keyword">const</span> encrypt = crypto.<span class="title function_">privateEncrypt</span>(privateKey, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(secret));</span><br><span class="line"><span class="keyword">const</span> decrypt = crypto.<span class="title function_">publicDecrypt</span>(publicKey, encrypt);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密后：&#x27;</span>, encrypt.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密后：&#x27;</span>, decrypt.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure></div>


<h1 id="RSA-长加密"><a href="#RSA-长加密" class="headerlink" title="RSA 长加密"></a>RSA 长加密</h1><p>这个加密是真的麻烦 ，而且还需要导入jsencrypt.min.js<br>这里贴上 GitHub地址 <a class="link"   href="https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js" >https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>对了 还需要补环境 而且解密也不是很好用，如果有大佬知道如何解密的 希望在评论区告诉我</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();</span><br><span class="line"><span class="keyword">var</span> publickKey = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLFb8qp1vRFvi/qfgi1Wg7Mi8l\</span></span><br><span class="line"><span class="string">LcpfAc+tgpyD7aFW9QquQVMm/jG1IJZVQ6LsdkI7TiDutMCzOMCBXbdSC9BCIAGA\</span></span><br><span class="line"><span class="string">L2Sz3cYVlGb1kYSM0ZMcUMIK5eF4Bptke070XHvbi8wArtysJ0l71RHDd786tNbG\</span></span><br><span class="line"><span class="string">W0hDSw3zAqTErbxFaQIDAQAB\</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----\</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line">encrypt.<span class="title function_">setPublicKey</span>(publickKey);  <span class="comment">//设置公钥加密证书</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> commonEncodeData = encrypt.<span class="title function_">encryptLong</span>(data);   <span class="comment">// 普通的加密</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(commonEncodeData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cnEscapeData = <span class="variable language_">window</span>.<span class="title function_">btoa</span>(<span class="variable language_">window</span>.<span class="built_in">encodeURIComponent</span>(data));  <span class="comment">//base64 解密后的加密</span></span><br><span class="line"><span class="keyword">var</span> encryptData = encrypt.<span class="title function_">encryptLong</span>(cnEscapeData);  <span class="comment">//获取加密后数据。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encryptData)</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>bcrypt库</title>
    <url>/2023/04/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8Bbcrypt/</url>
    <content><![CDATA[<!-- toc -->
<hr>
<blockquote>
<p>官方文档： <a class="link"   href="https://pkg.go.dev/golang.org/x/crypto/bcrypt" >https://pkg.go.dev/golang.org/x/crypto/bcrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前讲过JWT Token JWT呢是信息是经过数字签名的，因此可以被验证和信任。<br>然后今天就来说说密码学，我们在做鉴权 做用户处理时 会把密码存储到数据库中，但是这个密码我们肯定不能明文去存储，如果这个数据库链接一旦被别人拿到<br>那后果是不堪设想的。不仅仅是为了防止系统管理员或者DBA等公司人员获得用户的密码，也是防止被黑客拖库产生更大的信息泄露。<br>如果黑客通过不法手段获取了服务的数据库存储信息，盗取里面的内容，从而直接获得明文密码，那么影响就会很大。<br>所以我们的密码一般通过几种方式去加密存储</p>
<ol>
<li><strong>MD5</strong></li>
</ol>
<p>其实个人觉得MD5加密不太好，因为MD5是不加盐的，虽然是不可逆的，但是黑客其实会针对常见的一些密码，生成彩虹表。<br>彩虹表是什么呢？<br><code>是用于加密散列函数逆运算的预先计算好的表，常用于破解加密过的密码散列（维基百科）</code><br>所以相对的感觉安全等级不是很够。</p>
<ol start="2">
<li><strong>SHA1及其他</strong></li>
</ol>
<p>SHA-1基于MD5，MD5又基于MD4<br>SHA-1是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，也是目前最先进的加密技术，被政府部门和私营业主用来处理敏感的信息。<br>这个缺点个人认为和 MD5一样。</p>
<ol start="3">
<li><strong>hmacsha</strong></li>
</ol>
<p>我之前也写过相应的文章 里面有相应的hmasha加密<br>HMAC是密钥相关的哈希运算消息认证码（Hash-basedMessageAuthenticationCode）,HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。<br>HMAC是需要一个密钥的。所以，HMACSHA1也是需要一个密钥的，而SHA1不需要。</p>
<ol start="4">
<li><strong>CRC</strong></li>
</ol>
<p>CRC的全称为CyclicRedundancyCheck，中文名称为循环冗余校验。它是一类重要的线性分组码，编码和解码方法简单，检错和纠错能力强，在通信领域广泛地用于实现差错控制。实际上，除数据通信外，CRC在其它很多领域也是大有用武之地的。例如我们读软盘上的文件，以及解压一个ZIP文件时，偶尔会碰到“BadCRC”错误，由此它在数据存储方面的应用可略见一斑。</p>
<ol start="5">
<li><strong>还有很多加密方式这里就不一 一赘述了…</strong></li>
</ol>
<p>这里介绍一种加密方式 <code>bcrypt</code></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>bcrypt是一个由美国计算机科学家尼尔斯·普罗沃斯（Niels Provos）以及大卫·马齐耶（David Mazières）根据Blowfish加密算法所设计的密码散列函数，于1999年在USENIX中展示[1]。实现中bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御日益增进的电脑运算能力透过暴力法破解。</p>
<p>由bcrypt加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。然而，所提供的所有字符都具有十分重要的意义。密码越强大，数据就越安全。</p>
<p>除了对数据进行加密，默认情况下，bcrypt在删除数据之前将使用随机数据三次覆盖原始输入文件，以阻挠可能会获得计算机数据的人恢复数据的尝试。如果您不想使用此功能，可设置禁用此功能。</p>
<p>具体来说，bcrypt使用美国密码学家保罗·柯切尔的算法实现。随bcrypt一起发布的源代码对原始版本作了略微改动。</p>
<p><strong>以上内容来自于wiki维基百科</strong> &gt;&gt;&gt;&gt; <a class="link"   href="https://zh.wikipedia.org/wiki/Bcrypt" >https://zh.wikipedia.org/wiki/Bcrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="bcrypt基本介绍"><a href="#bcrypt基本介绍" class="headerlink" title="bcrypt基本介绍"></a>bcrypt基本介绍</h1><p>其实简单来说<br><code>bcrypt</code>就是一种加盐的单向Hash，不可逆的加密算法，同一种明文（plaintext），每次加密后的密文都不一样，而且不可反向破解生成明文，破解难度很大<br>而我们熟知的另一种不可逆的加密算法<br><code>md5</code> 是不加盐的单向Hash，不可逆的加密算法，同一个密码经过hash的时候生成的是同一个hash值，在大多数的情况下，有些经过md5加密的方法将会被破解。</p>
<p>Bcrypt生成的密文是60位的。而MD5的是32位的。<br>总的来说，BCrypt比MD5更安全，但加密更慢。<br>各有优缺点吧。</p>
<p>这里推荐个网站可以完成 bcrypt的加密 我们来尝尝鲜。</p>
<p><a class="link"   href="https://www.bejson.com/encrypt/bcrpyt_encode/" >https://www.bejson.com/encrypt/bcrpyt_encode/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里找遍了全网好像也没找到github地址。并且也没有什么安装的教程。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u golang.org/x/crypto/bcrypt</span><br></pre></td></tr></table></figure></div>

<h1 id="cost常量分类"><a href="#cost常量分类" class="headerlink" title="cost常量分类"></a>cost常量分类</h1><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">        <span class="comment">// 传递给GenerateFromPassword的最小允许开销</span></span><br><span class="line"> MinCost     <span class="type">int</span> = <span class="number">4</span>  </span><br><span class="line">        <span class="comment">// 传递给GenerateFromPassword的最大允许开销</span></span><br><span class="line"> MaxCost     <span class="type">int</span> = <span class="number">31</span></span><br><span class="line">        <span class="comment">// 如果将低于MinCost的cost传递给GenerateFromPassword，则实际设置的cost</span></span><br><span class="line"> DefaultCost <span class="type">int</span> = <span class="number">10</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>这里我们直接看官方写好的测试用例，可能需要 …(你懂的)<br><a class="link"   href="https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go" >https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="GenerateFromPassword-生成一个hash密码"><a href="#GenerateFromPassword-生成一个hash密码" class="headerlink" title="GenerateFromPassword 生成一个hash密码"></a>GenerateFromPassword 生成一个hash密码</h2><p>GenerateFromPassword以给定的代价返回密码的bcrypt散列。如果给定的cost小于MinCost，则该cost将被设置为DefaultCost。<br>GenerateFromPassword不接受长度超过72字节的密码，这是bcrypt操作的最长密码</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">password, _ := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(<span class="string">&quot;123&quot;</span>), bcrypt.DefaultCost)</span><br><span class="line">fmt.Println(<span class="type">string</span>(password))</span><br></pre></td></tr></table></figure></div>
<p>结果如下<br>第一次</p>
<blockquote>
<p>$2a$10$SNRLHrG.ExJHKfR8LihSLOqAJOu&#x2F;hCpP0ARhwoKvsduxv5xMXkl4u<br>第二次<br>$2a$10$Np1EBVQ9DZXMvIUkT7Y2P.cA0psEmW2SAVJYcCDqDDN8TsASo7aZm</p>
</blockquote>
<p><strong>注： 每次结果都不一样 因为这不是MD5加密，会通过加盐来完成不可逆的加密</strong></p>
<h2 id="Cost方法-返回给定的cost"><a href="#Cost方法-返回给定的cost" class="headerlink" title="Cost方法 返回给定的cost"></a>Cost方法 返回给定的cost</h2><p>Cost返回用于创建给定散列密码的散列成本。将来，当密码系统的哈希成本需要增加以适应更大的计算能力时，这个功能允许人们确定需要更新哪些密码。<br>简单来说 返回上文的 bcrypt.DefaultCost</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">cost, _ := bcrypt.Cost([]<span class="type">byte</span>(<span class="string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))</span><br><span class="line">fmt.Println(cost)</span><br></pre></td></tr></table></figure></div>
<p>结果如下</p>
<blockquote>
<p>10</p>
</blockquote>
<h2 id="CompareHashAndPassword-对比明文密码和散列密码"><a href="#CompareHashAndPassword-对比明文密码和散列密码" class="headerlink" title="CompareHashAndPassword 对比明文密码和散列密码"></a>CompareHashAndPassword 对比明文密码和散列密码</h2><p>CompareHashAndPassword，将返回的散列密码与其明文版本进行比较。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><span class="line">password, _ := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(<span class="string">&quot;123&quot;</span>), bcrypt.DefaultCost)</span><br><span class="line">fmt.Println(<span class="type">string</span>(password))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以解析出上文</span></span><br><span class="line">cost, _ := bcrypt.Cost([]<span class="type">byte</span>(<span class="string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))</span><br><span class="line">fmt.Println(cost)</span><br><span class="line"></span><br><span class="line">err := bcrypt.CompareHashAndPassword(password, []<span class="type">byte</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;密码验证错误&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;密码验证成功&gt;&gt;&gt;&quot;</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>$2a$10$ANuBn8FthHbgfYir4v65AOvdtqoR3xjZ0G8duN5ynH1Vm0h3yUF&#x2F;G<br>10<br>密码验证成功&gt;&gt;&gt; <nil></p>
</blockquote>
<h1 id="调用utils文件-——-集成版"><a href="#调用utils文件-——-集成版" class="headerlink" title="调用utils文件 —— 集成版"></a>调用utils文件 —— 集成版</h1><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encrypt</span><span class="params">(encryptText <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"> hashStr, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(encryptText), bcrypt.DefaultCost)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="type">string</span>(hashStr), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareHashAndPassword</span><span class="params">(hashPassword, Password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"> err := bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hashPassword), []<span class="type">byte</span>(Password))</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="bcrypt某些错误类型"><a href="#bcrypt某些错误类型" class="headerlink" title="bcrypt某些错误类型"></a>bcrypt某些错误类型</h1><ul>
<li><p>type HashVersionTooNewError byte</p>
<blockquote>
<p>使用 创建哈希时从 CompareHashAndPassword 返回的错误 比此实现更新的 bcrypt 算法。<br>func (hv HashVersionTooNewError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
<li><p>type InvalidCostError int</p>
<blockquote>
<p>类型 无效cost错误<br>func (ic InvalidCostError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
<li><p>type InvalidHashPrefixError byte</p>
<blockquote>
<p>类型无效哈希前缀错误<br>当哈希以“$”以外的内容开头时，从 CompareHashAndPassword 返回的错误<br>func (ih InvalidHashPrefixError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>一日一库</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的循环方式总结</title>
    <url>/2023/05/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<!-- toc -->
<hr>
<p>在Javascript中有很多种循环方式。有多种循环方式可以用来遍历数组、对象、以及执行一些重复性任务<br>但是有很多方式甚至从未用过，所以简单来总结一下JS中的循环</p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for 循环是在您希望创建循环时经常使用的工具。</p>
<p>例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>次循环遍历`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/aIXyfYNPknOws2b.png"></p>
<h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><p> While语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>
<p>例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>次循环遍历`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/WhvroJ96L1fxD3V.png"></p>
<h1 id="do……while循环"><a href="#do……while循环" class="headerlink" title="do……while循环"></a>do……while循环</h1><p>先运行循环代码 再执行判断条件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印b的值&gt;&gt;&gt;&gt;&gt;&quot;</span>,b);</span><br><span class="line">    b++;</span><br><span class="line">&#125; <span class="keyword">while</span> (b &lt; a); <span class="comment">// 当a小于等于b的时候终止她。</span></span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/Lf6raEnemSPudKT.png" alt="img"></p>
<ul>
<li>while：先判断后执行；</li>
<li>do-while：先执行再判断，即使初始条件不成立；do-while循环至少执行一次；</li>
</ul>
<h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h1><p>fo…in循环一般用于对象的遍历</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> kj = &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for-in遍历这个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> kj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k, kj[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/aVIe54tKG16HLuJ.png" alt="img"><br>注！ <code>最好不要用for in遍历数组</code></p>
<h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h1><p>for…of 循环是 ES6 中新增的一种循环类型，它允许您遍历可迭代对象（例如数组、字符串、Map 或 Set）中的每个元素，并对其执行指定的操作。<br>for-of 可以更方便的循环遍历数组等</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/Ti758SE6pQ4groa.png" alt="img"></p>
<ul>
<li>for in遍历的是数组的索引（即键名）for in更适合遍历对象，不要使用for in遍历数组</li>
<li>for of遍历的是数组元素值。</li>
</ul>
<p><code>使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性</code></p>
<h1 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h1><p>map()是一种常用的数组方法，它可以将一个数组中的每个元素按照一定规则映射为一个新的数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = originalArray.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br><span class="line">  <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// Output: [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/SDE1oqAQxwfe2JB.png" alt="img"></p>
<h1 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h1><p>forEach()是一种常用的数组方法，可以帮助我们遍历一个数组并对其中的每个元素执行指定的操作。<br>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">originalArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/UVAELG7gnPkWabm.png" alt="img"></p>
<p>forEach()方法没有返回值，因此我们不能将其运行结果赋值给其他变量</p>
<h1 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter()过滤循环"></a>filter()过滤循环</h1><p>filter()是一种常用的数组方法，它可以帮助我们按照特定条件筛选出一个数组中的部分元素并返回一个新的数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> filteredArray = originalArray.<span class="title function_">filter</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只返回能被2整除的数 也就是偶数</span></span><br><span class="line">  <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredArray);</span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<p><img src="https://img2023.cnblogs.com/blog/2721529/202305/2721529-20230518174323044-1084795998.png" alt="img"></p>
<p><code>filter()方法不会修改原始数组，而是返回一个新的数组作为其运行结果。因此，如果我们需要在原始数组中删除一些元素，那么就应该使用splice()方法</code></p>
<h1 id="JS实现Python中的zip循环"><a href="#JS实现Python中的zip循环" class="headerlink" title="JS实现Python中的zip循环"></a>JS实现Python中的zip循环</h1><p>熟悉python的都知道ZIP循环面对循环两个数组很好用 那么在python中如何实现呢？</p>
<p>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">zip</span>(<span class="params">...arrays</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> minLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(...arrays.<span class="title function_">map</span>(<span class="function"><span class="params">arr</span> =&gt;</span> arr.<span class="property">length</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; minLength; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> arrays.<span class="title function_">map</span>(<span class="function"><span class="params">arr</span> =&gt;</span> arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> bList = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [a, b] <span class="keyword">of</span> <span class="title function_">zip</span>(aList, bList)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/gXwcHoNVGIUQ5be.png" alt="img"></p>
<h1 id="some-和every"><a href="#some-和every" class="headerlink" title="some()和every()"></a>some()和every()</h1><p>some() 和 every() 方法是很有用的数组方法，它们都是用来遍历数组并返回布尔值。</p>
<h2 id="some-方法"><a href="#some-方法" class="headerlink" title="some() 方法"></a>some() 方法</h2><p>some() 方法用来检测数组中是否有至少一个元素满足指定条件。当任意一个元素满足条件，则该方法返回 true；否则，返回 false。</p>
<p>例子：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>];</span><br><span class="line"><span class="keyword">const</span> hasLargeNumber = numbers.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasLargeNumber); </span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/QqKu6hwHDnRcUgP.png" alt="img"><br><code>很显然 只要有一个结果满足了 大于10的条件 就返回了true</code></p>
<h2 id="every-方法"><a href="#every-方法" class="headerlink" title="every() 方法"></a>every() 方法</h2><p>every() 方法与 some() 方法类似，不过它要求所有元素都满足指定条件。当所有元素都满足条件，则该方法返回 true；否则，返回 false。<br>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>];</span><br><span class="line"><span class="keyword">const</span> hasLargeNumber = numbers.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasLargeNumber);</span><br></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/HZAvBc5yNROwaJC.png" alt="img"><br><code>很显然 只要有一个结果不满足 大于10的条件 就返回了false 和some方法相反</code></p>
<h1 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce() 和 reduceRight()"></a>reduce() 和 reduceRight()</h1><p>是 JavaScript 数组中常用的两个方法，它们都是用于将数组中的元素归纳为单个值。<br>它们可以帮助您迭代和聚合数组中的元素</p>
<h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce() 方法"></a>reduce() 方法</h2><p>reduce() 方法对数组中的每个元素执行一个由您提供的函数，并将其结果汇总为单个返回值。该方法需要传入两个参数：一个回调函数和一个可选的初始值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(accumulator,currentValue)</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/PwGEDJyBmpSvxF6.png" alt="img"></p>
<ul>
<li>accumulator： 表示当前已经累积的值初始值是0</li>
<li>currentValue 表示当前正在被遍历的数组元素。</li>
</ul>
<h2 id="reduceRight-方法"><a href="#reduceRight-方法" class="headerlink" title="reduceRight() 方法"></a>reduceRight() 方法</h2><p>reduceRight() 方法与 reduce() 方法类似，不过它是从数组的末尾开始遍历数组并执行回调函数。该方法也需要传入两个参数：一个回调函数和一个可选的初始值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduceRight</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(accumulator,currentValue)</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/vuGKBIpcnq4PUSf.png" alt="img"></p>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ja3指纹学习</title>
    <url>/2023/06/26/Ja3%E6%8C%87%E7%BA%B9%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- toc -->
<hr>
<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>在当今互联网时代，保护通信数据的安全性变得至关重要。为了建立安全的通信连接，TLS（Transport Layer Security）协议被广泛应用于Web浏览器、移动应用和其他网络应用程序中。而与此同时，识别和分析这些TLS通信也成为网络安全研究和威胁情报分析的重要任务之一。JA3指纹作为一种独特的指纹识别技术，为我们提供了一种有效的手段来识别和分析TLS通信。</p>
<h1 id="JA3指纹的概述"><a href="#JA3指纹的概述" class="headerlink" title="JA3指纹的概述"></a>JA3指纹的概述</h1><h2 id="什么是JA3指纹？"><a href="#什么是JA3指纹？" class="headerlink" title="什么是JA3指纹？"></a>什么是JA3指纹？</h2><p>JA3指纹（JA3 fingerprint）是一种用于网络流量分析的技术，旨在识别和分类不同的TLS（Transport Layer Security）客户端。TLS是一种常用于加密互联网通信的协议，它提供了安全的数据传输和身份验证机制。</p>
<p>JA3指纹通过分析TLS握手阶段中客户端和服务器之间交换的握手消息来创建一个唯一的指纹。在TLS握手期间，客户端和服务器交换一系列的握手消息，包括支持的TLS版本、密码套件、压缩算法和TLS扩展等信息。JA3指纹将这些消息中的特定字段进行哈希处理，生成一个字符串来表示客户端的TLS配置。</p>
<p>由于不同的TLS客户端在握手消息中的字段值可能会有所不同，因此它们生成的JA3指纹也会有所不同。这使得JA3指纹可以用于识别和区分不同类型的TLS客户端，例如Web浏览器、移动应用程序、恶意软件等。</p>
<p>通过分析网络流量中的JA3指纹，安全分析人员和网络管理员可以检测和识别异常的TLS行为、恶意软件的活动或者潜在的网络攻击。然而，值得注意的是，JA3指纹并非绝对可靠，因为攻击者可以通过更改TLS</p>
<h2 id="JA3指纹的组成和格式"><a href="#JA3指纹的组成和格式" class="headerlink" title="JA3指纹的组成和格式"></a>JA3指纹的组成和格式</h2><p>JA3指纹由TLS握手消息中的特定字段值组成，并使用逗号进行分隔。</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul>
<li><p>JA3_HASH,JA3_SSLVersion,JA3_CipherSuites,JA3_Extensions</p>
</li>
<li><p>JA3_HASH：这是根据TLS握手消息中的客户端Hello消息计算得出的哈希值，通常使用MD5或SHA256算法生成。JA3_HASH用于唯一标识TLS客户端的配置。</p>
</li>
<li><p>JA3_SSLVersion：这是客户端支持的TLS版本号。例如，TLS 1.2的版本号是0x0303，TLS 1.3的版本号是0x0304。</p>
</li>
<li><p>JA3_CipherSuites：这是客户端支持的加密套件列表。加密套件指定了用于加密通信的加密算法和密钥交换协议。每个加密套件都有一个唯一的标识号。在JA3指纹中，多个加密套件由逗号分隔。</p>
</li>
<li><p>JA3_Extensions：这是客户端在TLS握手消息中发送的TLS扩展列表。TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication (SNI)、Supported Elliptic Curves、Supported Point Formats等。在JA3指纹中，多个扩展由逗号分隔。</p>
</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>以下是一个示例JA3指纹的格式：</p>
<div class="highlight-container" data-rel="Llvm"><figure class="iseeu highlight llvm"><table><tr><td class="code"><pre><span class="line">eb<span class="number">6</span>f<span class="number">49e8</span>db<span class="number">7</span>ad<span class="number">1809</span>f<span class="number">885</span>d<span class="number">12232</span>f<span class="number">4855</span><span class="punctuation">,</span><span class="number">0x0303</span><span class="punctuation">,</span><span class="number">0xc02c</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">02</span>b<span class="punctuation">,</span><span class="keyword">c</span><span class="number">02</span>f<span class="punctuation">,</span><span class="keyword">c</span><span class="number">00</span>a<span class="punctuation">,</span><span class="keyword">c</span><span class="number">009</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">013</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">014</span><span class="punctuation">,</span><span class="number">0xff01</span><span class="punctuation">,</span><span class="number">0x0000</span></span><br></pre></td></tr></table></figure></div>

<p>在上述示例中，</p>
<ol>
<li>JA3_HASH为<code>eb6f49e8db7ad1809f885d12232f4855</code>，</li>
<li>JA3_SSLVersion为<code>0x0303（表示TLS 1.2）</code>，</li>
<li>JA3_CipherSuites包括多个加密套件</li>
<li>JA3_Extensions为空。</li>
</ol>
<h2 id="JA3握手指纹和JA3S指纹的区别"><a href="#JA3握手指纹和JA3S指纹的区别" class="headerlink" title="JA3握手指纹和JA3S指纹的区别"></a>JA3握手指纹和JA3S指纹的区别</h2><p>JA3指纹和JA3S指纹是两种相关但略有不同的TLS指纹技术。</p>
<ol>
<li><p>JA3指纹（Just Another SSL&#x2F;TLS Fingerprint）：它是根据客户端发送的TLS握手消息中的字段值生成的指纹。这些字段包括SSL&#x2F;TLS版本、加密套件、TLS扩展等信息。JA3指纹用于识别和分类不同的TLS客户端。</p>
</li>
<li><p>JA3S指纹（Just Another SSL&#x2F;TLS Signature）：它是基于服务器在TLS握手过程中发送的服务器Hello消息中的字段值生成的指纹。与JA3指纹不同，JA3S指纹用于识别和分类不同的TLS服务器。</p>
</li>
</ol>
<p>JA3指纹和JA3S指纹的生成方法类似，都是通过计算握手消息中的字段值的哈希值来生成唯一的指纹。它们的区别在于指纹生成的消息来源不同：JA3指纹是基于客户端Hello消息，而JA3S指纹是基于服务器Hello消息。</p>
<p>这两种指纹技术在网络安全领域中被广泛应用，可以用于检测异常的TLS行为、识别恶意软件和网络攻击等。同时，它们也有一定的局限性，因为攻击者可以伪造或篡改握手消息中的字段值，以逃避指纹识别。因此，在使用JA3和JA3S指纹进行分析时，需要结合其他技术和方法进行验证和确认。</p>
<p>JA3和JA3S工具现在已经开源<br>下载地址： <a class="link"   href="https://github.com/salesforce/ja3" >https://github.com/salesforce/ja3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="JA3指纹的工作原理"><a href="#JA3指纹的工作原理" class="headerlink" title="JA3指纹的工作原理"></a>JA3指纹的工作原理</h1><h2 id="TLS握手过程的关键信息"><a href="#TLS握手过程的关键信息" class="headerlink" title="TLS握手过程的关键信息"></a>TLS握手过程的关键信息</h2><p>TLS握手过程中包含了多个关键信息，这些信息对于建立安全连接和进行身份验证非常重要。以下是TLS握手过程中的一些关键信息：</p>
<ol>
<li><p>客户端支持的TLS版本：客户端在ClientHello消息中指定其支持的TLS版本，例如TLS 1.2或TLS 1.3。服务器会根据客户端支持的版本选择适当的协议版本进行通信。</p>
</li>
<li><p>加密套件（Cipher Suite）：加密套件定义了在通信过程中使用的加密算法和密钥交换算法。它包括对称加密算法（如AES、DES）、密钥交换算法（如RSA、Diffie-Hellman）和消息认证算法（如HMAC）等。</p>
</li>
<li><p>随机数（Random）：客户端和服务器都会生成一个随机数，用于生成对称加密算法的密钥、初始化向量（IV）和计算消息认证码（MAC）。随机数的目的是增加通信的随机性和安全性。</p>
</li>
<li><p>数字证书（Digital Certificate）：服务器在ServerHello消息中会发送数字证书，证书用于验证服务器的身份。证书包含服务器的公钥和证书颁发机构（CA）的签名，客户端可以使用该公钥验证服务器的身份和建立安全通信。</p>
</li>
<li><p>客户端密钥交换（Client Key Exchange）：在握手过程中，客户端可能需要发送密钥交换相关的信息，用于与服务器协商会话密钥。这可以是一个PreMaster Secret（预主密钥）或Diffie-Hellman交换的公钥。</p>
</li>
<li><p>会话标识符（Session Identifier）：服务器可以为成功建立的会话分配一个唯一的会话标识符，以便在后续的握手过程中快速恢复会话状态，从而提高性能。</p>
</li>
<li><p>TLS扩展（TLS Extensions）：TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication（SNI，用于指定服务器的域名）、支持的加密算法、应用层协议协商（ALPN）等。</p>
</li>
</ol>
<p>这些关键信息在TLS握手期间的交换和协商，确保了通信的机密性、完整性和身份验证，从而建立了安全的TLS连接。</p>
<h2 id="通过TLS握手信息生成JA3指纹"><a href="#通过TLS握手信息生成JA3指纹" class="headerlink" title="通过TLS握手信息生成JA3指纹"></a>通过TLS握手信息生成JA3指纹</h2><p>生成JA3指纹需要从TLS握手信息中提取关键字段，并对这些字段进行哈希处理。以下是生成JA3指纹的一般步骤：</p>
<ol>
<li><p>提取TLS握手消息中的关键字段：从客户端Hello消息中提取以下字段值：</p>
<pre><code>   - 支持的TLS版本（SSLVersion）
   - 加密套件（CipherSuites）
   - TLS扩展（Extensions）
</code></pre>
</li>
<li><p>将提取的字段值组合成一个字符串：将上述字段值按照特定的顺序连接起来，使用逗号进行分隔。例如：SSLVersion,CipherSuites,Extensions。</p>
</li>
<li><p>对组合的字符串进行哈希处理：使用特定的哈希算法，例如MD5或SHA256，对上述组合的字符串进行哈希处理，生成一个哈希值。</p>
</li>
<li><p>将哈希值作为JA3指纹：将生成的哈希值作为最终的JA3指纹。</p>
</li>
</ol>
<p>需要注意的是，不同的实现和工具可能对字段的顺序和格式有所不同。为了确保一致性，建议使用广泛接受的规范来提取字段和生成JA3指纹。</p>
<p><strong>示例</strong><br>假设提取的字段值为：</p>
<div class="highlight-container" data-rel="Llvm"><figure class="iseeu highlight llvm"><table><tr><td class="code"><pre><span class="line">SSLVersion: <span class="number">0x0303</span></span><br><span class="line">CipherSuites: <span class="keyword">c</span><span class="number">02</span><span class="keyword">c</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">02</span>b<span class="punctuation">,</span><span class="keyword">c</span><span class="number">02</span>f<span class="punctuation">,</span><span class="keyword">c</span><span class="number">00</span>a<span class="punctuation">,</span><span class="keyword">c</span><span class="number">009</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">013</span><span class="punctuation">,</span><span class="keyword">c</span><span class="number">014</span></span><br><span class="line">Extensions: <span class="number">0xff01</span><span class="punctuation">,</span><span class="number">0x0000</span></span><br></pre></td></tr></table></figure></div>

<p>组合的字符串为：<code>0x0303,c02c,c02b,c02f,c00a,c009,c013,c014,0xff01,0x0000</code><br>通过MD5哈希处理上述字符串得到哈希值：<code>eb6f49e8db7ad1809f885d12232f4855</code><br>最终的JA3指纹为：<code>eb6f49e8db7ad1809f885d12232f4855</code></p>
<p>实际实现中可能会有一些细微的差异。</p>
<h2 id="JA3指纹的可变性和唯一性"><a href="#JA3指纹的可变性和唯一性" class="headerlink" title="JA3指纹的可变性和唯一性"></a>JA3指纹的可变性和唯一性</h2><p>JA3指纹具有一定的可变性和唯一性，这取决于TLS客户端的配置和握手消息中的字段值。</p>
<ol>
<li>可变性：</li>
</ol>
<ul>
<li><p>不同的TLS客户端可能支持不同的TLS版本、加密套件和TLS扩展，因此它们的JA3指纹会有所不同。</p>
</li>
<li><p>特定的TLS客户端可能会在不同的环境或配置下生成不同的JA3指纹。例如，同一款Web浏览器在不同的操作系统、版本或插件配置下生成的JA3指纹可能会有差异。</p>
</li>
</ul>
<ol start="2">
<li>唯一性：</li>
</ol>
<ul>
<li><p>在大多数情况下，每个TLS客户端的配置会生成一个唯一的JA3指纹。由于握手消息中的字段值是在握手期间由客户端动态生成的，因此不同的配置通常会产生不同的JA3指纹。</p>
</li>
<li><p>JA3指纹的哈希算法（如MD5或SHA256）通常能够保证较低的碰撞概率，即不同的配置生成相同的指纹的可能性较低。</p>
</li>
</ul>
<p>然而，需要注意的是，JA3指纹并不是绝对唯一和确定性的标识符，也存在一些限制和局限性：</p>
<ol>
<li><p>攻击者可以通过修改握手消息中的字段值来更改JA3指纹，从而规避指纹识别。</p>
</li>
<li><p>同一款TLS客户端的不同版本或补丁更新可能会导致生成不同的JA3指纹，因此在比较和匹配JA3指纹时需要考虑版本和细微差异。</p>
</li>
<li><p>由于新的TLS版本、加密套件和扩展的发布，TLS客户端的配置也可能会发生变化，进而影响JA3指纹的唯一性。</p>
</li>
</ol>
<p>综上所述，JA3指纹在识别和分类TLS客户端方面提供了一种有用的方法，但在实际应用中需要综合考虑其他因素并进行进一步验证，以确保准确性和可靠性。</p>
<h1 id="JA3指纹的应用"><a href="#JA3指纹的应用" class="headerlink" title="JA3指纹的应用"></a>JA3指纹的应用</h1><p>具体分为两部分</p>
<p><strong>网络安全领域的应用</strong></p>
<ol>
<li><p>威胁情报分析</p>
</li>
<li><p>恶意软件检测</p>
</li>
<li><p>流量分析和监测</p>
</li>
</ol>
<p><strong>应用领域的应用</strong></p>
<ol>
<li><p>应用识别和版本检测</p>
</li>
<li><p>通信指纹的对比和识别</p>
</li>
<li><p>数据包的分类和过滤</p>
</li>
</ol>
<h1 id="JA3指纹的实例和实用技巧"><a href="#JA3指纹的实例和实用技巧" class="headerlink" title="JA3指纹的实例和实用技巧"></a>JA3指纹的实例和实用技巧</h1><p>JA3指纹：eb6f49e8db7ad1809f885d12232f4855</p>
<p>实用技巧：</p>
<ol>
<li><p>JA3指纹的比对：通过收集和比对网络流量中的JA3指纹，可以检测和识别不同类型的TLS客户端。例如，您可以建立一个JA3指纹数据库，并与实时的网络流量进行比对，以发现异常或恶意的TLS行为。</p>
</li>
<li><p>恶意软件识别：JA3指纹可用于检测和分类恶意软件的通信行为。通过比对已知恶意软件的JA3指纹，您可以快速识别并阻止类似指纹的流量，以提高网络安全性。</p>
</li>
<li><p>威胁情报分析：JA3指纹可以与威胁情报平台进行集成，以获取有关特定指纹的更多信息。这样，您可以了解该指纹是否与已知的恶意活动、攻击或特定组织相关联。</p>
</li>
<li><p>异常检测：通过监视网络流量中的JA3指纹变化，您可以识别到不寻常的TLS行为。例如，当某个JA3指纹频繁变化或与正常流量有明显差异时，可能表明存在潜在的安全问题或攻击行为。</p>
</li>
<li><p>风险评估和访问控制：在安全环境中，根据JA3指纹可以评估客户端的安全性，并采取相应的访问控制策略。如果某个客户端的JA3指纹与高风险的配置相关，可以采取额外的安全措施，例如强制进行多因素身份验证或限制其访问权限。</p>
</li>
<li><p>安全事件响应：JA3指纹可以用于网络安全事件的响应和调查。在检测到安全事件后，可以使用JA3指纹追踪相关的TLS客户端，并识别受影响的系统或用户，从而进行进一步的分析和应对。</p>
</li>
</ol>
<p>注意，JA3指纹仅作为一种辅助工具和指标，应与其他安全技术和方法相结合使用，以全面评估和提高网络安全性。</p>
<h1 id="JA3指纹的限制和隐私考虑"><a href="#JA3指纹的限制和隐私考虑" class="headerlink" title="JA3指纹的限制和隐私考虑"></a>JA3指纹的限制和隐私考虑</h1><p>JA3指纹具有隐私保护和加密协议选择以及JA3指纹的可变性和易受干扰性</p>
<p>以下是常见的限制和隐私考虑：</p>
<ol>
<li><p>配置和环境的影响：JA3指纹受到TLS客户端的配置和环境影响。不同的配置和环境可能导致不同的JA3指纹，这可能增加了误报或漏报的风险。</p>
</li>
<li><p>版本和升级的影响：TLS客户端的版本和升级可能导致JA3指纹的变化。对于同一款TLS客户端的不同版本，其生成的JA3指纹可能会有差异。这需要在分析和比对JA3指纹时考虑版本和细微差异。</p>
</li>
<li><p>隐私泄露风险：JA3指纹可以泄露关于客户端的一些信息，例如所使用的TLS版本、加密套件和扩展。这些信息可能被用于识别和追踪特定的客户端，从而对隐私造成风险。特别是在面对具有大规模网络流量的环境时，JA3指纹的唯一性可能导致识别个体用户。</p>
</li>
<li><p>指纹伪造：攻击者有可能通过修改TLS握手消息中的字段值来伪造JA3指纹，以规避指纹识别和防御措施。这可能降低JA3指纹的可靠性和准确性，因此在使用JA3指纹时需要谨慎验证和结合其他信息进行分析。</p>
</li>
<li><p>数据采集和存储：收集和存储大量的JA3指纹数据可能需要相应的资源和隐私保护措施。确保合规性和数据安全性非常重要，包括数据保护、加密和访问控制等方面的考虑。</p>
</li>
</ol>
<h1 id="抓包展示"><a href="#抓包展示" class="headerlink" title="抓包展示"></a>抓包展示</h1><p>用下某网站做测试 且此网站也有有Ja3指纹加密的</p>
<blockquote>
<p>aHR0cHM6Ly9nZ3p5LmppYW5neGkuZ292LmNuL3h3ZHQvMDAxMDAyL3NlYzEuaHRtbA&#x3D;&#x3D;</p>
</blockquote>
<h2 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h2><p>!注意 fiddler要想抓Ja3-tls指纹 包<br>要把CONNECTS选项取消勾选，不然抓不到指纹包<br><img src="https://s2.loli.net/2024/08/26/MaLQRDKgSeZ2cl3.png"></p>
<p>然后我们抓到了很多指纹包，然后我们挨个打开看看<br><img src="https://s2.loli.net/2024/08/26/4xZ839vospTAODV.png"></p>
<p><img src="https://s2.loli.net/2024/08/26/T3Gb2qZphFXnM8k.png"><br>然后我们看到很多的加密算法，还有加密方式<br><strong>其实这种包其实本质上就是加入黑名单</strong></p>
<p>已经tls的版本也有<br><img src="https://s2.loli.net/2024/08/26/xRbPZY8wMdE2TU9.png"></p>
<h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p>相比较fiddler charles抓到的包就很有限了。<br>但是操作也更加的简单了<br>我们直接打开charles 然后刷新网站<br><img src="https://s2.loli.net/2024/08/26/FKg6wTEQYM8vtV4.png"><br>这里直接就显示了tls的信息<br><img src="https://s2.loli.net/2024/08/26/e3WR9zNDuijZdV7.png"><br>我们接着点开详细信息 这里显示了tls的加密方式 已经加密的两种方式.</p>
<p>这两种抓包方式终究还是图一乐，真要抓包还得看wireshark</p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>步骤如下</p>
<ol>
<li><p>查询网站IP地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; cmd &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; ping xxx.com &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 复制IP地址</p>
</li>
<li><p>打开wireShark抓包，选择抓取的网卡</p>
</li>
<li><p>刷新浏览器</p>
</li>
<li><p>在过滤器中输入 ip.addr &#x3D;&#x3D; 你要查看的ip地址 具体如下图<br><img src="https://s2.loli.net/2024/08/26/EpSkUnq1PbNuc9Y.png"></p>
</li>
<li><p>找到一个Client hello的包<br><img src="https://s2.loli.net/2024/08/26/ayHqf3cUi9Jo7tv.png"></p>
</li>
<li><p>查看详细信息<br><img src="https://s2.loli.net/2024/08/26/1NDKZ7xSRrPycoe.png"></p>
</li>
</ol>
<p>最下面的是hash指纹 和详细指纹信息<br><img src="https://s2.loli.net/2024/08/26/8SlE1ZWzpYFyod6.png"></p>
<p>把这个指纹fullstring复制出来<br><code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code><br>这个指纹信息就是网站可以运行的指纹信息</p>
<h1 id="指纹分析"><a href="#指纹分析" class="headerlink" title="指纹分析"></a>指纹分析</h1><p>指纹信息分析其实很简单，<br>我们接下来用三种方式去获取这个指纹信息<br>也就是上文的<code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code></p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>这里我们选择直接用上文抓包抓到的指纹<br>还有一种方式<br><a class="link"   href="https://tls.browserleaks.com/json" >https://tls.browserleaks.com/json <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 直接去网站看自己的浏览器指纹也是可以的</p>
<p>由于上面已经获取了浏览器的指纹了，我们直接就拿来用了</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</span><br></pre></td></tr></table></figure></div>

<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>接着我们使用requests原生库，即正常访问，携带基本的参数去请求即可<br>我们使用代码去访问下这个网站<a class="link"   href="https://tls.browserleaks.com/json" >https://tls.browserleaks.com/json <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></div>

<p>结果</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;ja3_hash&quot;</span>: <span class="string">&quot;8d9f7747675e24454cd9b7ed35c58707&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3_text&quot;</span>: <span class="string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3n_hash&quot;</span>: <span class="string">&quot;a790a1e311289ac1543f411f6ffceddf&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3n_text&quot;</span>: <span class="string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-10-11-13-16-21-22-23-43-45-49-51,29-23-30-25-24,0-1-2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;akamai_hash&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;akamai_text&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>所以这个指纹是</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2</span><br></pre></td></tr></table></figure></div>

<h2 id="python-魔改库"><a href="#python-魔改库" class="headerlink" title="python 魔改库"></a>python 魔改库</h2><p>我们再试试 Python有关SSL的魔改库<br>其实这类库有很多<br>简单举例两个吧 一个是 <code>curl_cffi</code> 一个是 <code>tls_client</code></p>
<ul>
<li><p>tls_client : <a class="link"   href="https://pypi.org/project/tls-client/" >https://pypi.org/project/tls-client/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>curl_cffi: <a class="link"   href="https://pypi.org/project/curl-cffi/" >https://pypi.org/project/curl-cffi/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>我们这里使用curl_cffi 去访问一下看看这个指纹是什么</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://tls.browserleaks.com/json&quot;</span>, impersonate=<span class="string">&quot;chrome101&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></div>
<p>结果</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;ja3_hash&quot;</span>: <span class="string">&quot;cd08e31494f9531f560d64c695473da9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3_text&quot;</span>: <span class="string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3n_hash&quot;</span>: <span class="string">&quot;aa56c057ad164ec4fdcb7a5a283be9fc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ja3n_text&quot;</span>: <span class="string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-5-10-11-13-16-18-21-23-27-35-43-45-51-17513-65281,29-23-24,0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;akamai_hash&quot;</span>: <span class="string">&quot;4f04edce68a7ecbe689edce7bf5f23f3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;akamai_text&quot;</span>: <span class="string">&quot;1:65536;3:1000;4:6291456;6:262144|15663105|0|m,a,s,p&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而这个指纹是</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0</span><br></pre></td></tr></table></figure></div>


<h2 id="总结三种方式"><a href="#总结三种方式" class="headerlink" title="总结三种方式"></a>总结三种方式</h2><p>然后我们把这三个指纹拿出来做个对比</p>
<p><img src="https://s2.loli.net/2024/08/26/ZdyAJjuQvlMxYF1.png"><br><img src="https://s2.loli.net/2024/08/26/q6WHfujkaTKlw9V.png"></p>
<p>可以清楚地看到 python的魔改库和浏览器的指纹是长度是一样的。</p>
<p>这样我们可以知道了，这个指纹长度只要和浏览器相同就可以了。</p>
<p>我们使用魔改库访问开头所要访问的网站实验一下</p>
<p><img src="https://s2.loli.net/2024/08/26/3VAtJunrdpfLoIa.png"><br>发现可以正常访问</p>
<p>那该如何不借助魔改库去完成Ja3网站的解密呢<br>可以通过修改ssl的套接字 使得防火墙黑名单失效<br>从而<strong>保证指纹长度一致</strong> 即可完成解密</p>
<h1 id="tls-检测的绕过方案"><a href="#tls-检测的绕过方案" class="headerlink" title="tls 检测的绕过方案"></a>tls 检测的绕过方案</h1><p><strong>临时方案:</strong></p>
<p><code>注意 requests库必须在2.4 以上版本 不然会失败</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS =<span class="string">&#x27;ALL&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>修改了requests内部包的 ssI里面的套接字设置，使防火墙黑名单失效</p>
<p>动态 DEFAULT CIPHERS :<br><a class="link"   href="https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html" >https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html" >https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>这种方法国内处理就已经够了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认 cipher 在这里定义：https://github.com/encode/httpx/blob/master/httpx/_config.py</span></span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line"><span class="comment"># create an ssl context</span></span><br><span class="line">ssl_context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS)</span><br><span class="line">CIPHERS = <span class="string">&#x27;DH+AES:RSA+AES&#x27;</span></span><br><span class="line">ssl_context.set_ciphers(CIPHERS)</span><br><span class="line"></span><br><span class="line">r = httpx.get(<span class="string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=ssl_context)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>非临时方案:</strong><br>自设ssl，并覆写requests中的类的一些方法<br><a class="link"   href="https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted" >https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite" >https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>深入理解requests中 建立 tls的过程<br>先抓包看下正常的访问 tls，和requests访问的区别<br>我们需要单步调试requests源码，并且想办法修改 tls访问过程中的UA<br>按照上面的思路，加上对 ssl的理解，就可以实现一个针对于 tls检测的高并发方案</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JA3指纹是一种通过提取和哈希TLS握手消息中的关键字段来标识和识别TLS客户端的方法。它可以用于识别不同类型的TLS客户端、检测恶意软件、进行威胁情报分析、异常检测和风险评估等。</p>
<p>然而，JA3指纹也有一些限制和隐私考虑。它受到TLS客户端配置和环境的影响，可能受到版本和升级的影响。此外，使用JA3指纹可能泄露一些客户端信息，存在隐私风险，并且有可能被攻击者伪造。</p>
<p>在使用JA3指纹时，需要综合考虑其实用性和隐私风险。适当的数据采集和存储措施、数据保护、加密和隐私保护措施都是重要的考虑因素。此外，JA3指纹应作为辅助工具和指标，并结合其他安全技术和方法来提高网络安全性。</p>
<p>总之，JA3指纹提供了一种用于标识和识别TLS客户端的方法，可以在网络安全领域的多个方面发挥作用，但需要在实际应用中权衡其实用性、准确性和隐私风险</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><p><a class="link"   href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/" >https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/" >https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Ja3</tag>
      </tags>
  </entry>
  <entry>
    <title>plasmo框架</title>
    <url>/2024/09/07/plasmo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>plasmo 是一个用于构建浏览器扩展的框架，它基于 React 和 TypeScript，提供了一套简单易用的 API，可以帮助开发者快速构建功能丰富的浏览器扩展。<br>plasmo 的主要特点包括：跨平台支持、模块化开发、丰富的插件系统等。通过使用 plasmo，开发者可以轻松地创建出具有强大功能的浏览器扩展，例如：广告拦截器、密码管理器、翻译工具等。</p>
<h2 id="安装器安装"><a href="#安装器安装" class="headerlink" title="安装器安装"></a>安装器安装</h2><p>这里使用 pnpm 安装</p>
<p>pnpm安装<br>在powershell中执行以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Invoke-WebRequest https://get.pnpm.io/install.ps1 -UseBasicParsing | Invoke-Expression</span><br></pre></td></tr></table></figure></div>
<p>直接拉github 可能比较慢</p>
<p>也可以在npm中安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install -g @pnpm/exe</span><br></pre></td></tr></table></figure></div>
<p>兼容性<br>以下是各版本 pnpm 与各版本 Node.js 之间的兼容性表格。</p>
<table>
<thead>
<tr>
<th>Node.js</th>
<th>pnpm 7</th>
<th>pnpm 8</th>
<th>pnpm 9</th>
</tr>
</thead>
<tbody><tr>
<td>Node.js 12</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>Node.js 14</td>
<td>✔️</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>Node.js 16</td>
<td>✔️</td>
<td>✔️</td>
<td>❌</td>
</tr>
<tr>
<td>Node.js 18</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>Node.js 20</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
</tbody></table>
<h2 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm create plasmo</span><br><span class="line"></span><br><span class="line">yarn create plasmo</span><br><span class="line"></span><br><span class="line">npm create plasmo</span><br></pre></td></tr></table></figure></div>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plasmo create plasmo_study</span><br></pre></td></tr></table></figure></div>

<p>这里创建项目 输入自己的项目名 |描述|作者名</p>
<p><img src="https://s2.loli.net/2024/09/07/GSxYd87LOMf2P4k.png"></p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plasmo dev</span><br></pre></td></tr></table></figure></div>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://s2.loli.net/2024/09/07/75IHzpOoKDyJLmN.png"></p>
<h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My Extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A simple extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;storage&quot;</span><span class="punctuation">,</span> <span class="string">&quot;activeTab&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 权限  </span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background/index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content/index.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>background 脚本用于处理扩展的后台逻辑，例如：监听浏览器事件、与浏览器通信等。</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Plasmo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@plasmo/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Plasmo</span>.<span class="title function_">registerBackground</span>(&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onInstall</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Extension installed&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onUpdated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Extension updated&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">any</span>, <span class="attr">sender</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message received:&quot;</span>, message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Message received&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="content"><a href="#content" class="headerlink" title="content"></a>content</h2><p>content 脚本用于在网页中注入代码，例如：修改网页内容、添加事件监听等。</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Plasmo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@plasmo/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Plasmo</span>.<span class="title function_">registerContent</span>(&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onDOMReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOM ready&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">any</span>, <span class="attr">sender</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Message received:&quot;</span>, message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Message received&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="popup"><a href="#popup" class="headerlink" title="popup"></a>popup</h2><p>popup 脚本用于创建扩展的弹出窗口，例如：显示扩展的界面、与用户交互等。</p>
<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Plasmo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@plasmo/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Plasmo</span>.<span class="title function_">registerPopup</span>(&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Plasmo!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&quot;Hello, Plasmo!&quot;)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>plasmo.config.ts</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PlasmoConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@plasmo/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PlasmoConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置项</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>plasmo 是一个功能强大的浏览器扩展开发框架，它提供了丰富的 API 和插件系统，可以帮助开发者快速构建出具有强大功能的浏览器扩展。通过使用 plasmo，开发者可以轻松地实现广告拦截、密码管理、翻译工具等功能，为用户提供更加便捷、安全的浏览体验。</p>
]]></content>
      <categories>
        <category>浏览器开发</category>
      </categories>
  </entry>
  <entry>
    <title>如何在Linux 安装node</title>
    <url>/2024/09/09/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%20%E5%AE%89%E8%A3%85node/</url>
    <content><![CDATA[<h1 id="如何在Linux-安装node"><a href="#如何在Linux-安装node" class="headerlink" title="如何在Linux 安装node"></a>如何在Linux 安装node</h1><p>之前说过 NVM安装node 非常方便。但是在某些环境上 安装NVM 会一直卡住不动。非常头疼。</p>
<p>这里直接安装Node</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a class="link"   href="https://nodejs.cn/download/" >下载 | Node.js 中文网 (nodejs.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择 文中的 <strong>Linux 二进制文件 (x64)</strong></p>
<p>右击 复制链接 </p>
<p><img src="https://s2.loli.net/2024/09/09/3d8jFrSKDNvs5pa.png"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>直接 wget 下载链接</p>
<p> <img src="https://s2.loli.net/2024/09/09/vnRrQaoEWYFbZjs.png"></p>
<p>然后 执行如下命令</p>
<p>-C 是指定目录解压</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v20.17.0-linux-x64.tar.xz -C /usr/local/bin</span><br></pre></td></tr></table></figure></div>

<p>重命名一下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> node-v20.17.0-linux-x64/ node-v20</span><br></pre></td></tr></table></figure></div>

<p>建立软连接</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/local/bin/node-v20/bin/node /usr/local/bin/node</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/local/bin/node-v20/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></div>

<p>如果报错就</p>
<p>把 <strong>-s</strong> 命令修改成 <strong>-sf</strong> 命令；**-f** 命令的意思是强制执行，也就意味着如果不存在就执行创建，存在就执行覆盖掉</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>编译环境文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>新增如下内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/local/bin/node-v20/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NODE_HOME</span>:/usr/local/bin/</span><br></pre></td></tr></table></figure></div>

<p>然后刷新配置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>



<h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>然后执行Node ~ 直接大功告成。 怎么说~~</p>
<p><img src="https://s2.loli.net/2024/09/09/VtXqJUNWaY1lekQ.png"></p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>某团新版Web mtgsig1.2 算法分析</title>
    <url>/2024/09/11/%E6%9F%90%E5%9B%A2%E6%96%B0%E7%89%88Web%20mtgsig/</url>
    <content><![CDATA[<h1 id="某团新版Web-mtgsig1-2-算法解析"><a href="#某团新版Web-mtgsig1-2-算法解析" class="headerlink" title="某团新版Web mtgsig1.2 算法解析"></a>某团新版Web mtgsig1.2 算法解析</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算法和环境更新了一下。某些接口请求几次就强校验了。今天简单来看看。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>首先AST解混淆，把代码中b函数给解出来就行了。非常简单。</p>
<p>后面解完之后发现 环境代码非常之多。</p>
<p>这里算了。我补了一天最后还差了200多位。这里正常应该是476位。</p>
<p>这里就不多B了。之间开撸。</p>
<p>这里其实就是一个VMP。</p>
<p>层层入栈 直接插桩</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">ki+<span class="number">1</span>,kg[<span class="string">&quot;getUint8&quot;</span>](ki+<span class="number">1</span>),kb</span><br></pre></td></tr></table></figure></div>



<p><img src="https://s2.loli.net/2024/09/01/FoCdXHZzsxeMQA7.png"></p>
<p>保存打印的日志。</p>
<p>​	</p>
<h1 id="a3"><a href="#a3" class="headerlink" title="a3"></a>a3</h1><p><img src="https://s2.loli.net/2024/09/01/Fn5MoQSGdZvkrtj.png"></p>
<p><img src="https://s2.loli.net/2024/09/01/fwsNncSl2CTHtqp.png"></p>
<p>之间搜索dfpID的位置。</p>
<p><img src="https://s2.loli.net/2024/09/01/lNhYBAeDIGUnup9.png"></p>
<p>扣完 a3 即生成。</p>
<h1 id="a5"><a href="#a5" class="headerlink" title="a5"></a>a5</h1><p>然后找到位置再插一波</p>
<p>如下图</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">kR[<span class="string">&quot;apply&quot;</span>](kS, kP)</span><br></pre></td></tr></table></figure></div>



<p><img src="https://s2.loli.net/2024/09/01/iyFhOoZCx6mupGj.png"></p>
<p>这里 可以看见 数组转换成字符串。那我们两个断点一起打着看看。</p>
<p><img src="https://s2.loli.net/2024/09/01/DFLAk84clR2UyYt.png"></p>
<p>这里重新插一下一开始的位置</p>
<p><img src="https://s2.loli.net/2024/09/01/nvcAzBQ8jCUlI4t.png"></p>
<p>单步进栈。发现又是一个 switch 流程</p>
<p>那继续插</p>
<p><img src="https://s2.loli.net/2024/09/01/fPR7Yy3ZDo1uKxO.png"></p>
<p>OK。那就继续插</p>
<p><img src="https://s2.loli.net/2024/09/01/Nzx85qjJWCT9sym.png"></p>
<p>定位到下图位置 单步调试跟栈</p>
<p><img src="https://s2.loli.net/2024/09/01/J2hiGVuks4QKzo5.png"></p>
<p>如下图 扣下来即可。后面就是考虑动态数组的问题了。</p>
<p><img src="https://s2.loli.net/2024/09/01/k8ZtdMx7Rs6zfuW.png"></p>
<p>即lI，lJ,lK 三个值。那又要插装。</p>
<p>这里重新插装要打印全部值。</p>
<p>这里找到 0,1,2,3,4 …256的地方。</p>
<p>重新插</p>
<p><img src="https://s2.loli.net/2024/09/01/rM3msoDkWTb7njy.png"></p>
<p>这里动态数组。我们JSON.stringify 来分析下。</p>
<p>这里分析如下</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">origin_arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要与之运算的16位数组</span></span><br><span class="line">encrypt_arr = [<span class="number">152</span>, <span class="number">232</span>, <span class="number">186</span>, <span class="number">109</span>, <span class="number">125</span>, <span class="number">188</span>, <span class="number">249</span>, <span class="number">229</span>, <span class="number">95</span>, <span class="number">58</span>, <span class="number">250</span>, <span class="number">230</span>, <span class="number">169</span>, <span class="number">75</span>, <span class="number">115</span>, <span class="number">56</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个</span></span><br><span class="line"><span class="comment">// 152+0 = 152   152 = 152+0  232 第一个数组</span></span><br><span class="line"><span class="number">152</span> + <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">183</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个</span></span><br><span class="line"><span class="comment">// 184+232 = 416   184 = 183+1  232 第二个数组</span></span><br><span class="line"><span class="number">416</span> + <span class="number">31</span></span><br><span class="line"><span class="number">447</span> - <span class="number">256</span> || <span class="number">447</span> % <span class="number">256</span></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">191</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个</span></span><br><span class="line"><span class="comment">// 193+186   191+2  186 第三个数组</span></span><br><span class="line"><span class="number">379</span> + <span class="number">31</span></span><br><span class="line"><span class="number">410</span> - <span class="number">256</span> || <span class="number">410</span> % <span class="number">256</span></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">154</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四个</span></span><br><span class="line"><span class="comment">// 157 + 109  154+3    109 第四个数组</span></span><br><span class="line"><span class="number">266</span> + <span class="number">31</span></span><br><span class="line"><span class="number">297</span> - <span class="number">256</span> || <span class="number">297</span> * <span class="number">256</span></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==== ..... 一组轮询完毕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第16个</span></span><br><span class="line"><span class="comment">// 231 + 56   216 + 15  56 第15个数组</span></span><br><span class="line"><span class="number">287</span> + <span class="number">31</span></span><br><span class="line"><span class="number">318</span> - <span class="number">256</span> || <span class="number">318</span> % <span class="number">256</span></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">62</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第17个</span></span><br><span class="line"><span class="comment">// 78+152     62+16   152 第1个数组</span></span><br><span class="line"><span class="number">230</span> + <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="number">261</span> - <span class="number">256</span> || <span class="number">318</span> % <span class="number">256</span></span><br></pre></td></tr></table></figure></div>

<p>这里直接保姆级教学了。</p>
<p>然后就可以整合算法了。</p>
<p>这里有个小坑~~~ 留着先自己弄弄</p>
<p>这里还有个地方 就是与之运算的16位数组了。</p>
<p>这个地方继续如下图插装</p>
<p><img src="https://s2.loli.net/2024/09/12/B5OXj82IoEUzFqe.png"></p>
<p>然后插装 13 39 </p>
<p><img src="https://s2.loli.net/2024/09/12/kJyH6KYDROt9pPC.png"></p>
<p>然后发现 这一层是上一层kr &#x3D; kR[&quot;apply”](kS, kP) 生成的。</p>
<p>所以继续插装 这个位置的length</p>
<p>最后走到这个位置。</p>
<p>这里发现。有传参的两个值。第一个 是一串类似于hash加密的。</p>
<p>第二端是把这个值转换成数组。这个直接抠出来就可以。</p>
<p><img src="https://s2.loli.net/2024/09/13/G3NVyLHx5uzZIiX.png"></p>
<p>这里继续回去看最外层的日志。</p>
<p>这里直接贴3张图。一眼就能看懂</p>
<p><img src="https://s2.loli.net/2024/09/13/qF9vdimx8ycJHlQ.png"></p>
<p><img src="https://s2.loli.net/2024/09/13/FvWiS4u8zRQ2Lkl.png"></p>
<p><img src="https://s2.loli.net/2024/09/13/zuXo78ephOGHZNi.png"></p>
<p>至此的话。a5就算是搞定了。</p>
<h1 id="a6"><a href="#a6" class="headerlink" title="a6"></a>a6</h1><p>直接老样子 根据日志 去插装</p>
<p><img src="https://s2.loli.net/2024/09/13/bGpDuJynCiHgANw.png"></p>
<p>最后瞎JB一顿乱找 和 乱猜</p>
<p>定位点如下图所示</p>
<p><img src="https://s2.loli.net/2024/09/13/5cadXL6VWbYZAke.png"></p>
<p>OK 这个函数直接缺啥扣啥。确实感觉没什么写的。</p>
<p>至此 a3 a5 a6 全部搞定。</p>
<p><img src="https://s2.loli.net/2024/09/14/GRQLv68qbyUgEY3.png"></p>
<p>后面拼出来就行了。</p>
<p>然后找几个关键校验的接口 这里我用的是某Boking 去测试的。至于 还有a8 和 d1 。。 只能说待续</p>
<p><img src="https://s2.loli.net/2024/09/14/DkvWtXI8MrfYKR2.png"></p>
]]></content>
      <categories>
        <category>JS逆向</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器插件开发</title>
    <url>/2024/09/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>本文参考文档:  <a class="link"   href="https://www.yuque.com/tuntun-nozomi/gurht0" >浏览器插件开发教程文档 (yuque.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul>
<li>manifest.json</li>
<li>service worker</li>
<li>content scripts</li>
<li>插件页面</li>
</ul>
<h1 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h1><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 必须的</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插件名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;版本&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 常用</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插件描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;作者名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置service worker</span></span><br><span class="line">  <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.js&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;options_ui&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置options页面</span></span><br><span class="line">  <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;options.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;open_in_tab&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 配置content scripts</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;*://www.baidu.com/*&quot;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;test.js&quot;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;all_frames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;web_accessible_resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 配置Web可访问资源</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;*://www.baidu.com/*&quot;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;test.css&quot;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;host_permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 与主机权限相关，推荐使用同样的设置</span></span><br><span class="line">  <span class="string">&quot;https://*/*&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 配置插件所使用的api权限</span></span><br><span class="line">  <span class="string">&quot;storage&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;contextMenus&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;cookies&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 使用action api配置插件工具栏中图标、弹出页面等内容</span></span><br><span class="line">  <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;32&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;64&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon64.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon128.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;32&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;64&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon64.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon128.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="content-scripts"><a href="#content-scripts" class="headerlink" title="content scripts"></a>content scripts</h2><p>文档如下: <a class="link"   href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/" >https://developer.chrome.com/docs/extensions/mv3/content_scripts/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>content scripts只能使用部分的浏览器api，最常用的api为storage与runtime两个api。</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>详情</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>matches</td>
<td>指定此内容脚本将被注入到哪些页面，详见<a class="link"   href="https://developer.chrome.com/docs/extensions/mv3/match_patterns/" >match_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td></td>
</tr>
<tr>
<td>js</td>
<td>要注入匹配页面的 JavaScript 文件列表。它们按照它们在此数组中出现的顺序注入。</td>
<td></td>
</tr>
<tr>
<td>css</td>
<td>要注入匹配页面的 CSS 文件列表。在为页面构造或显示任何 DOM 之前，它们按照它们在此数组中出现的顺序注入。</td>
<td></td>
</tr>
<tr>
<td>all_frames</td>
<td>默认为<code>false</code>，表示仅匹配顶部框架。 如果指定<code>true</code>，它将注入所有框架，即使该框架不是选项卡中最顶层的框架。每个框架都独立检查 URL 要求，如果不满足 URL 要求，它不会注入子框架。</td>
<td></td>
</tr>
<tr>
<td>run_at</td>
<td>document_idle</td>
<td>参考：<a class="link"   href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/#run_time" >运行 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
</tr>
<tr>
<td>document_start</td>
<td></td>
<td></td>
</tr>
<tr>
<td>document_end</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h2><p>一个插件只能有一个service worker，可以在manifest配置type来使service worker声明为<code>ES Module</code></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&quot;<span class="attribute">background</span>&quot;: &#123;</span><br><span class="line">  &quot;service_worker&quot;: <span class="string">&quot;background.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在background.js 中 设置如下</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">action</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="title function_">async</span> (tab) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tab);</span><br><span class="line">    <span class="keyword">if</span> (tab.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&quot;www.baidu.com&quot;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is baidu page&quot;</span>);</span><br><span class="line">        chrome.<span class="property">scripting</span>.<span class="title function_">executeScript</span>(&#123;</span><br><span class="line">            <span class="attr">target</span>: &#123; <span class="attr">tabId</span>: tab.<span class="property">id</span> &#125;,</span><br><span class="line">            <span class="attr">files</span>: [<span class="string">&#x27;exec.js&#x27;</span>],</span><br><span class="line">            <span class="attr">world</span>:<span class="string">&quot;MAIN&quot;</span> <span class="comment">// 设置主环境</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is not baidu page&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>上文意思是。点击这个图标 代表着 执行下面这个js 并且主环境</p>
<h2 id="Ul-elements"><a href="#Ul-elements" class="headerlink" title="Ul elements"></a>Ul elements</h2><p><a class="link"   href="https://developer.chrome.com/docs/extensions/develop/ui?hl=zh-cn#additional_features" >界面组件  | Chrome Extensions  | Chrome for Developers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>样式很多 自己看</p>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p><a class="link"   href="https://developer.chrome.com/docs/extensions/develop/ui?hl=zh-cn#additional_features" >界面组件  | Chrome Extensions  | Chrome for Developers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>由于content_scripts运行在网页中，而不是浏览器插件的环境，所以它需要一些特殊的方式来和浏览器插件的内容进行通信。</p>
<p>通信的方式包括用于一次性请求的简单通信和用于长期连接的长连接通信。</p>
<p>挨个传递通信</p>
]]></content>
      <categories>
        <category>浏览器开发</category>
      </categories>
  </entry>
  <entry>
    <title>腾讯天御滑块流程逆向</title>
    <url>/2024/09/05/%E8%85%BE%E8%AE%AF%E5%A4%A9%E5%BE%A1%E6%BB%91%E5%9D%97%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e744c4f29a9e8fdeeb1afbf96f2b9342df17b9c074feb243aad742f1308cf99c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JS逆向</category>
      </categories>
  </entry>
  <entry>
    <title>AST_解OB混淆_速记</title>
    <url>/2024/08/31/AST-%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="cec59574ed3bbab25c1d5bab473ba0d82cf22dba0e00a898d71884289edf03ce"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码哦。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AST学习日记</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>JSVMP逆向流程——QQ音乐</title>
    <url>/2024/08/23/QQ%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="cee553be26ced82ee960d3887a2b07e5c1a78e5bc82974908f3195ac00381600">83e5631915b29311d4c3e64518d9116cf799faaa72bca5bee977eff17ed08e1ece99b4463c2b5935746483d4c5a15edb14958198b2930f9bd4c599113c3b09114558f913c0eb0f950595ecffef3b3ff4dd0fcfea4466e81da8433649598d9bf6247c578e88cca7cf1583da86d37d2081e9f621384578fed6816d94b6d233423362d323fb6fd12348c0774959a5e96bb3bff8ce2321d570b48d9ca39e09d7f19083257fc6e35f409277fd440492c9596b8649cc8652fd6da95120102a7636d8e6feed127b5a50756afe2426815232408867b92c5b68887c6c73fda8bd6ac1f8e8644aeec8f087caad07bc361c1f2be91acf5d546dacca9008770962d632a2da6964021c6200d195b2c415fda527471690b0a2a8070a77570ff89ca872482784d71ca5efe35fef3eefd54464c84b5a074a9431b8d8fd74dfc8d82d23415bce53ae711086df7927d6a9025d88e3a5d375f1279859d0caa1b311dcbd9a29a2ee61ef964b2b14e813a0c0fc256b17c6b4af70ef4140770aeed72236a122978727da383f798c7142bfb19ee2211ee4e0ae5b6f20ae3b756429bb7172a62843b2efa379a8b36557afa1047b2c43873ac549736aa4fd71370d0ed215c10ec9b414cdd6c28a7989c60661708a603506fa5b9e7091194c7be1338f1154a908c7f671da00c424c09be10bc2a3711e5f7507bd168ede91a85190b7fc847164ec429c32029523fc1e1a09af37cf5de4c393f223a202f2cac07947bad2d2ad37988aa2ef9f76ec1cb8de93f20ad81956345e6ba75bb9019f75371f6637c74c6920901dc75f6fc04a0979178ff20b0197dbf7acdc3d76edc38881ce167c93e6e45a12c64fb9c4d277e1c592aa602cd08eed28fafefd367be9707f32bc896d3a6a2af5f503b889c1c56696eb2d9d2e4d448d352de884056d3c6813e3b03cc4c38f97f5fc00b67955aabc87561829bf4b3dfed791ddca92ef397283c79be1f08cc1c22c12473ef546ffd5c2d03dc2e101b8564263ac403713c0ae7033cab5f2c605c94aa0ee1d15f0d12aa803c409b8e52d2ecdd87846f151746afd45dc0ab854fe352e191ab200f112f99158843e1c232523514e9b73174d302254a2a57f574a6430ee77480e8998547fe00d25cba5aa4d590b6e195f7add46949ce960c33e60755b59fe37e685b8352e6ab91095f705a75527b5f69ae8ce7c36281bcbc36463270ec98a0a6b8b362076678826ea50e3538ae3ed2cdc06dda8949d2cf4df287b2873ce4b6ab22d38eaba09a3658ede8991e176325fefc1ec035bc5d116685cf31617919589d09363b10be990030a50c6bacedab6769116393c5bf05804f07810772ff565340b95d9131d65deff70ec5bef6255c19236321c86e3f23f77101c5f1f371db6b683ef824bb94019223b8eac896cd6ace60885ceabb77a88c88b2be57adf39120488eff0c18f7adc832c8561498750767d356995a2e92c67598d929d13b2ccd2db230763469398838ff563bc4654b1b8d8fe5a9de5a9ffd6d038d0554f74074e5d9ca5cc35b639c234ac15e473e18ed2d0e122b8980e721b192bb880029a906e93393429d0c6bd23fa1fa6150c499faa5d74585a5f6244e1b7f0277555cc927ffdd28fb765e56d0c458c83c7583c527c8f4ddde72be0a8eee4d210074bfa73bcd93a43a677cceca994d89b21bb3d93bc91ee6fed528234d441faa4fa81946a96b4d96952bcd66c58dcf9c167c85f74bf817c4f61641be6d0589a92ebcbd51c9fd894a6a59ace778c7c8f9d8a01d24758d0bf0a13d45a691f342eed1e1cbee2e0b2d9ba869750d55ac4e9bde711120fe15790fa82</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码哦。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JSVMP</tag>
      </tags>
  </entry>
  <entry>
    <title>美团ebooking登录爬取流程</title>
    <url>/2024/08/23/%E7%BE%8E%E5%9B%A2ebooking%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="86046bf51d66a5a0fb19c0b43864cbb3c3380f8c7218d05a6fdd4a5945c2ea99">83e5631915b29311d4c3e64518d9116cf799faaa72bca5bee977eff17ed08e1e715ed1668239966402cfd484ab715edcdc2d171c3dfefbfe61dc9559626fab3bcae0b4ef88b0e8037c98b3312325caf3adf834bc524e6cdc6979cdb7eac296ceae579354a900ea8dd64d918501c408e58247db1be68c7b76753f17093659cc9166571d9ac9dc866e23eb01263a23d779a61d2639d81299dc3792e1c59965e7c2fe9780774ae6e6b9ad0bc6d716458a0d013906124835052e6c880627e477540e2ce0b9a9cdbcb7a1daceeffced7420c3a38fd69f81529b1ea3dfd44ef0b6243c2d26a69322c9cd9e296424928f0cf85461f5966a60b3300d004ff67ed8dd217c07be7cb8e31e0e7d30a7120a9dd4bdc1b77bcac5ba171c4885aebb051ec48e7f5008a6bc57a61dac0bff4976ddc0dcb9a002af3c56503e0969baad9479cf8a52eb9944028f4a9122421eddcfe992f2c6679b460719cbfc832767b8f481382e4d06c36b9ff02852e00743634cb7c13f27e6f59a0de13a9abbc0d7b9756b840116225f60fb06ab27ae8bc09bbdbd14e9be175ca76858e023a20cf9252330beda3e7a0ee2c336946f16d76d6f30a3b7e1fdea90287be60fe7d1a5a74b61bf459764c297ab3ed628ff062a04c74dd2273d5f8ce5fbb587a78601ec6095d640be6b1d9674a56d8c10b94449a0b11dcfff8491e650083718075d37ac0d02a9f9660cef3355a9cfd95ad46bfd2709b038ac0e089d388678a7f34f5a282880da56474ed05f2e9618cc16e8ec9b7f1ad177889446c4047364a4f431ab14f9aee6771dc2660b2c6a1a03e95a3c55cc62cbc88f2cd771d04af45004887bdd7ea88ab578786a7b51fdb5b7e8e1aa52040d37d9a3d1a3a31bf3129e4e01dd679fc7c7360df47c27747a84cc0ac602bc250a2131285819a4a4458c57b10f37e9c3f9eced53aa332ceb74fb4dab3328b3d44694c2f0b3edac241668e80f43e2ceee958e86f8440fe84cfa1453698244bb718512d93d1caf58d6fd5a4cfe692447e3bd31552d4be9f6860f809b5c895819e755a29ed63a36739f1c3262f5bfe55efa3b8136ddfdd59ee5c39e1cfcdbe20b1cf9cd393e32c11f633cab2c0e0ddbc14582ec6d0c96aa8be3c366db90f889d472033f4634be2e26614fdf61fc44c7e86465a9a0727a9f54e53c6d379628957410220e01e83c895d79460878cbbf363db19fdf6ad78134c527b900d844bad94dfe28ee836a958392793f2893e808920f772068b8f145cd62d4108ddaea0a4479651cd6126408dcb591983d8c7eca08b0a977f69ca8f7ec</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码哦。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>项目流程</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>从零实现JSVMP</title>
    <url>/2024/08/23/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0JSVMP/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="5b9a3ce179ac4247f8e5964230506357d027e2f80548add6517e49c66d19996e">83e5631915b29311d4c3e64518d9116c756c3e2e226792b7371cfd24a9946e54109f4320faa329a4a9ef06f584fae74b38d0d8614cd6a998299f2adeb367ad5d456f9225984b5ce5a2f04497c7b015dcd13df71ba3c89c8f9b912f6fb6162bd9e2c3e2b7823cdd9ab25aa54a2b842bd59b394dd76c63121a19c1a8097fb1a5a1dcddc763898b2fa3fbbbedd1fa4bc8723b18fc86ac35962b207152d4fc5aa0b2284818003e61a25152dc06ab2f627268843e806e5ca8da7eff8e60e69483aee165b43c6ee8826c8d59eb73fd8f950f0bd608892721e05e4f587dfe1f840efb4fd8f559488834a38aa37b80ef521be65ef24d2af82313b24deeec96c1b34514155a7d7eaf849de6f9002f26e7d6137513584395d0301bbf25d77b7ce89d880f822c05faa88031cebedc1157a0e685d397157a6521623dae00ab2f13487e0538de23cea71b3321a115adcd4c4ad504fd13f72d9870e06f0c2a2b60d0055d5fc5d061ad72da53a1b768bae86f9729df8a262f50de59230587da00ccf6a3b011570155f640843ded6522802421cdefae3a8fe39dd0ad2b6e79960f05e84f07643310e6d30f31b704fa628c092e1cb22a8cb0aad73e52f3469211c7db28cfee5201ab2d7bfc901d06db76302219f94d9bcb326169c5839d54c8bc44f75806a1e1d52e50dcdef2fc70f27d739f93351d482cebe9de16510a9c555003718bfbed1c68bdb7c6cfc75eef49018e26d614a4d41ed0b51e1fd617bb34f8a18e29f9567f0306674d32da5bc343026743db0baef2f630b007d0318f2459c7331dea7a05c04ee04e9293f17a8159d2c0ceb49140eff280e1b9062e96bfcd44f22ea64c3b2a1058c7fe2dcea455bc77237afe23bc2c07ed48a89aae0d946cd06ef4ff18d9f24751322176fd71d59428f854b26e3494d9384f2eb2ff66b20ce0b56158e24e5d27205eda52e8c4b0459a2c6278a93eb908e38da900a8eae3991453062a7f3a08e783b87f208f9e4a7a75c609b09aa1ca15fe61ffbdecd41e1863cabbfba25d7e9f0c3d942efdb0908b664e97bd79cf9dc5aadaf4c61280d6ca6686e9c85c3f71d633853932b005afb92b3a3fd3d9bfcd435f1eb5fc132d24b93e6d89b7728603502420eee3cf88b7da54409fff69046ee0cc95bf206c953e7905f3bf9658815d610b3d8150417d712bb4edbf1d27e7c3dd7fdbc92998795e2899ca523faa1051f65a936a28dfe90e4b265fbf069fdde60be02971a84af817f829c9e0457c7283adf1374d462ac2902713c96d4058b90d7fc71ec8e04af3d4af60d0af70ee0a40096083b6f457b243efee971711ee96b13ecd8e62f0a23b1bb8049f3bbfbcce81961216a1fdccd1e72e86ebc1503b4aa554854b8970adcf8a3534d187acd1384777c1b29156a51dd3cfcfdb9019d41bb5cdd3850352d00bb2cd0c483f1976053ff51042022e306d280d085d4501f417eda19bfff75535ac6369b72dd4234ce2d5f0aa80e550fb583189c062fb18d4640689c6ca52750d2a6c37e9bdd6f19fbe53a0463bb83f3f91d9b449a2344861a4bd773ec6aade2223caaa34021849a7cdb36bfe846096bd53893a45d3861070b518caae87f55a8e2466ec579c448d3b99a3142cf04379b6972091e6e97a696c6503cb38398e5b90ee866479ec1f03686d7a73293a47b0283ce390e184f46c00b796663f3f039a5dbc39358c29169318fe44cc0313d184057e6d70b08809fa9b97139ee1e52f332d2b99ce45bf48658cc7ed51e667b931e56576a63ac94a142d03f0de8947bd20f7beb87bcf13fd0fddd4e92bae48db2b86c6789c3c0038fa6d538b71f849a21054d3d21855eb9d55e9d056953aedffb68f2409c0bfd1bdb9280867b416</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码哦。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>JSVMP</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫&amp;反爬&amp;反反爬&amp;风控</title>
    <url>/2024/08/23/%E7%88%AC%E8%99%AB&amp;%E5%8F%8D%E7%88%AC&amp;%E5%8F%8D%E5%8F%8D%E7%88%AC&amp;%E9%A3%8E%E6%8E%A7/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="9f18e96aed117289055c83cac4872c70f87f43b5c2d365e7360e0e5ef016c0de"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码哦。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
</search>
