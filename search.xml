<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gin_gorm时间格式化模型类重写</title>
    <url>/2024/08/26/Gin-gorm%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%B1%BB%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p>问题：</p>
<blockquote>
<p>在使用GORM中 如果我们使用到了CreateAt 和UpdateAt 就会发现 这个时间的类型是time.Time 而其数据是<br>“2022-10-13T10:14:02.973528+08:00” 这样的,<br>然而这样的数据你说能用确实能用 ，但是一旦写入数据库中就变成了<br>0001-01-01 00:00:00.000000 +00:00</p>
</blockquote>
<h1 id="重写数据类型"><a href="#重写数据类型" class="headerlink" title="重写数据类型"></a>重写数据类型</h1><p>话不多说 直接上代码<br>并且此代码通用【小弟也是copy学习视频上的】</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;database/sql/driver&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> timeFormat = <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span><br><span class="hljs-keyword">const</span> timezone = <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><br><span class="hljs-keyword">type</span> Time time.Time<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> MarshalJSON() ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br>    b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(timeFormat)+<span class="hljs-number">2</span>)<br>    b = <span class="hljs-built_in">append</span>(b, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>    b = time.Time(t).AppendFormat(b, timeFormat)<br>    b = <span class="hljs-built_in">append</span>(b, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> b, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span></span> UnmarshalJSON(data []<span class="hljs-type">byte</span>) (err <span class="hljs-type">error</span>) &#123;<br>    now, err := time.ParseInLocation(<span class="hljs-string">`&quot;`</span>+timeFormat+<span class="hljs-string">`&quot;`</span>, <span class="hljs-type">string</span>(data), time.Local)<br>    *t = Time(now)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> time.Time(t).Format(timeFormat)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> local() time.Time &#123;<br>    loc, _ := time.LoadLocation(timezone)<br>    <span class="hljs-keyword">return</span> time.Time(t).In(loc)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t Time)</span></span> Value() (driver.Value, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">var</span> zeroTime time.Time<br>    <span class="hljs-keyword">var</span> ti = time.Time(t)<br>    <span class="hljs-keyword">if</span> ti.UnixNano() == zeroTime.UnixNano() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ti, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *Time)</span></span> Scan(v <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-type">error</span> &#123;<br>    value, ok := v.(time.Time)<br>    <span class="hljs-keyword">if</span> ok &#123;<br>        *t = Time(value)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;can not convert %v to timestamp&quot;</span>, v)<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>至于调用就更简单了 如下代码所示</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><br><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">type</span> Category <span class="hljs-keyword">struct</span> &#123;<br> <span class="hljs-comment">//*gorm.Model</span><br> ID       <span class="hljs-type">uint</span>      <span class="hljs-string">`json:&quot;id&quot; gorm:&quot;primary key&quot;`</span><br> Name     <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;type:varchar(50); not null;unique&quot;`</span><br> CreatedAt Time     <span class="hljs-string">`json:&quot;create_at&quot;`</span><br> UpdatedAt Time     <span class="hljs-string">`json:&quot;update_at&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Gin速用</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>bcrypt库</title>
    <url>/2024/08/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8Bbcrypt/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#%25E5%2589%258D%25E8%25A8%2580">前言</a></li>
<li><a href="#%25E6%25A6%2582%25E8%25BF%25B0">概述</a></li>
<li><a href="#bcrypt%25E5%259F%25BA%25E6%259C%25AC%25E4%25BB%258B%25E7%25BB%258D">bcrypt基本介绍</a></li>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585">安装</a></li>
<li><a href="#cost%25E5%25B8%25B8%25E9%2587%258F%25E5%2588%2586%25E7%25B1%25BB">cost常量分类</a></li>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8">使用</a><ul>
<li><a href="#GenerateFromPassword-%25E7%2594%259F%25E6%2588%2590%25E4%25B8%2580%25E4%25B8%25AAhash%25E5%25AF%2586%25E7%25A0%2581">GenerateFromPassword 生成一个hash密码</a></li>
<li><a href="#Cost%25E6%2596%25B9%25E6%25B3%2595-%25E8%25BF%2594%25E5%259B%259E%25E7%25BB%2599%25E5%25AE%259A%25E7%259A%2584cost">Cost方法 返回给定的cost</a></li>
<li><a href="#CompareHashAndPassword-%25E5%25AF%25B9%25E6%25AF%2594%25E6%2598%258E%25E6%2596%2587%25E5%25AF%2586%25E7%25A0%2581%25E5%2592%258C%25E6%2595%25A3%25E5%2588%2597%25E5%25AF%2586%25E7%25A0%2581">CompareHashAndPassword 对比明文密码和散列密码</a></li>
</ul>
</li>
<li><a href="#%25E8%25B0%2583%25E7%2594%25A8utils%25E6%2596%2587%25E4%25BB%25B6-%25E2%2580%2594%25E2%2580%2594-%25E9%259B%2586%25E6%2588%2590%25E7%2589%2588">调用utils文件 —— 集成版</a></li>
<li><a href="#bcrypt%25E6%259F%2590%25E4%25BA%259B%25E9%2594%2599%25E8%25AF%25AF%25E7%25B1%25BB%25E5%259E%258B">bcrypt某些错误类型</a></li>
</ul>
<!-- tocstop -->

<hr>
<blockquote>
<p>官方文档： <a class="link"   href="https://pkg.go.dev/golang.org/x/crypto/bcrypt" >https://pkg.go.dev/golang.org/x/crypto/bcrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前讲过JWT Token JWT呢是信息是经过数字签名的，因此可以被验证和信任。<br>然后今天就来说说密码学，我们在做鉴权 做用户处理时 会把密码存储到数据库中，但是这个密码我们肯定不能明文去存储，如果这个数据库链接一旦被别人拿到<br>那后果是不堪设想的。不仅仅是为了防止系统管理员或者DBA等公司人员获得用户的密码，也是防止被黑客拖库产生更大的信息泄露。<br>如果黑客通过不法手段获取了服务的数据库存储信息，盗取里面的内容，从而直接获得明文密码，那么影响就会很大。<br>所以我们的密码一般通过几种方式去加密存储</p>
<ol>
<li><strong>MD5</strong></li>
</ol>
<p>其实个人觉得MD5加密不太好，因为MD5是不加盐的，虽然是不可逆的，但是黑客其实会针对常见的一些密码，生成彩虹表。<br>彩虹表是什么呢？<br><code>是用于加密散列函数逆运算的预先计算好的表，常用于破解加密过的密码散列（维基百科）</code><br>所以相对的感觉安全等级不是很够。</p>
<ol start="2">
<li><strong>SHA1及其他</strong></li>
</ol>
<p>SHA-1基于MD5，MD5又基于MD4<br>SHA-1是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，也是目前最先进的加密技术，被政府部门和私营业主用来处理敏感的信息。<br>这个缺点个人认为和 MD5一样。</p>
<ol start="3">
<li><strong>hmacsha</strong></li>
</ol>
<p>我之前也写过相应的文章 里面有相应的hmasha加密<br>HMAC是密钥相关的哈希运算消息认证码（Hash-basedMessageAuthenticationCode）,HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。<br>HMAC是需要一个密钥的。所以，HMACSHA1也是需要一个密钥的，而SHA1不需要。</p>
<ol start="4">
<li><strong>CRC</strong></li>
</ol>
<p>CRC的全称为CyclicRedundancyCheck，中文名称为循环冗余校验。它是一类重要的线性分组码，编码和解码方法简单，检错和纠错能力强，在通信领域广泛地用于实现差错控制。实际上，除数据通信外，CRC在其它很多领域也是大有用武之地的。例如我们读软盘上的文件，以及解压一个ZIP文件时，偶尔会碰到“BadCRC”错误，由此它在数据存储方面的应用可略见一斑。</p>
<ol start="5">
<li><strong>还有很多加密方式这里就不一 一赘述了…</strong></li>
</ol>
<p>这里介绍一种加密方式 <code>bcrypt</code></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>bcrypt是一个由美国计算机科学家尼尔斯·普罗沃斯（Niels Provos）以及大卫·马齐耶（David Mazières）根据Blowfish加密算法所设计的密码散列函数，于1999年在USENIX中展示[1]。实现中bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御日益增进的电脑运算能力透过暴力法破解。</p>
<p>由bcrypt加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。然而，所提供的所有字符都具有十分重要的意义。密码越强大，数据就越安全。</p>
<p>除了对数据进行加密，默认情况下，bcrypt在删除数据之前将使用随机数据三次覆盖原始输入文件，以阻挠可能会获得计算机数据的人恢复数据的尝试。如果您不想使用此功能，可设置禁用此功能。</p>
<p>具体来说，bcrypt使用美国密码学家保罗·柯切尔的算法实现。随bcrypt一起发布的源代码对原始版本作了略微改动。</p>
<p><strong>以上内容来自于wiki维基百科</strong> &gt;&gt;&gt;&gt; <a class="link"   href="https://zh.wikipedia.org/wiki/Bcrypt" >https://zh.wikipedia.org/wiki/Bcrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="bcrypt基本介绍"><a href="#bcrypt基本介绍" class="headerlink" title="bcrypt基本介绍"></a>bcrypt基本介绍</h1><p>其实简单来说<br><code>bcrypt</code>就是一种加盐的单向Hash，不可逆的加密算法，同一种明文（plaintext），每次加密后的密文都不一样，而且不可反向破解生成明文，破解难度很大<br>而我们熟知的另一种不可逆的加密算法<br><code>md5</code> 是不加盐的单向Hash，不可逆的加密算法，同一个密码经过hash的时候生成的是同一个hash值，在大多数的情况下，有些经过md5加密的方法将会被破解。</p>
<p>Bcrypt生成的密文是60位的。而MD5的是32位的。<br>总的来说，BCrypt比MD5更安全，但加密更慢。<br>各有优缺点吧。</p>
<p>这里推荐个网站可以完成 bcrypt的加密 我们来尝尝鲜。</p>
<p><a class="link"   href="https://www.bejson.com/encrypt/bcrpyt_encode/" >https://www.bejson.com/encrypt/bcrpyt_encode/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里找遍了全网好像也没找到github地址。并且也没有什么安装的教程。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">go</span> get -u golang.org/x/crypto/bcrypt<br></code></pre></td></tr></table></figure></div>

<h1 id="cost常量分类"><a href="#cost常量分类" class="headerlink" title="cost常量分类"></a>cost常量分类</h1><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">const</span> (<br>        <span class="hljs-comment">// 传递给GenerateFromPassword的最小允许开销</span><br> MinCost     <span class="hljs-type">int</span> = <span class="hljs-number">4</span>  <br>        <span class="hljs-comment">// 传递给GenerateFromPassword的最大允许开销</span><br> MaxCost     <span class="hljs-type">int</span> = <span class="hljs-number">31</span><br>        <span class="hljs-comment">// 如果将低于MinCost的cost传递给GenerateFromPassword，则实际设置的cost</span><br> DefaultCost <span class="hljs-type">int</span> = <span class="hljs-number">10</span> <br>)<br></code></pre></td></tr></table></figure></div>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>这里我们直接看官方写好的测试用例，可能需要 …(你懂的)<br><a class="link"   href="https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go" >https://cs.opensource.google/go/x/crypto/+/refs/tags/v0.8.0:bcrypt/bcrypt_test.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="GenerateFromPassword-生成一个hash密码"><a href="#GenerateFromPassword-生成一个hash密码" class="headerlink" title="GenerateFromPassword 生成一个hash密码"></a>GenerateFromPassword 生成一个hash密码</h2><p>GenerateFromPassword以给定的代价返回密码的bcrypt散列。如果给定的cost小于MinCost，则该cost将被设置为DefaultCost。<br>GenerateFromPassword不接受长度超过72字节的密码，这是bcrypt操作的最长密码</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">password, _ := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>), bcrypt.DefaultCost)<br>fmt.Println(<span class="hljs-type">string</span>(password))<br></code></pre></td></tr></table></figure></div>
<p>结果如下<br>第一次</p>
<blockquote>
<p>$2a$10$SNRLHrG.ExJHKfR8LihSLOqAJOu&#x2F;hCpP0ARhwoKvsduxv5xMXkl4u<br>第二次<br>$2a$10$Np1EBVQ9DZXMvIUkT7Y2P.cA0psEmW2SAVJYcCDqDDN8TsASo7aZm</p>
</blockquote>
<p><strong>注： 每次结果都不一样 因为这不是MD5加密，会通过加盐来完成不可逆的加密</strong></p>
<h2 id="Cost方法-返回给定的cost"><a href="#Cost方法-返回给定的cost" class="headerlink" title="Cost方法 返回给定的cost"></a>Cost方法 返回给定的cost</h2><p>Cost返回用于创建给定散列密码的散列成本。将来，当密码系统的哈希成本需要增加以适应更大的计算能力时，这个功能允许人们确定需要更新哪些密码。<br>简单来说 返回上文的 bcrypt.DefaultCost</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">cost, _ := bcrypt.Cost([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))<br>fmt.Println(cost)<br></code></pre></td></tr></table></figure></div>
<p>结果如下</p>
<blockquote>
<p>10</p>
</blockquote>
<h2 id="CompareHashAndPassword-对比明文密码和散列密码"><a href="#CompareHashAndPassword-对比明文密码和散列密码" class="headerlink" title="CompareHashAndPassword 对比明文密码和散列密码"></a>CompareHashAndPassword 对比明文密码和散列密码</h2><p>CompareHashAndPassword，将返回的散列密码与其明文版本进行比较。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">password, _ := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>), bcrypt.DefaultCost)<br>fmt.Println(<span class="hljs-type">string</span>(password))<br><br><span class="hljs-comment">// 可以解析出上文</span><br>cost, _ := bcrypt.Cost([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;$2a$10$XgLBtSfJsrBd.liLOYWddOYWYWboBUAlKmivcSwq647C3vTNUOVMO&quot;</span>))<br>fmt.Println(cost)<br><br>err := bcrypt.CompareHashAndPassword(password, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> fmt.Println(<span class="hljs-string">&quot;密码验证错误&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;密码验证成功&gt;&gt;&gt;&quot;</span>, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>$2a$10$ANuBn8FthHbgfYir4v65AOvdtqoR3xjZ0G8duN5ynH1Vm0h3yUF&#x2F;G<br>10<br>密码验证成功&gt;&gt;&gt; <nil></p>
</blockquote>
<h1 id="调用utils文件-——-集成版"><a href="#调用utils文件-——-集成版" class="headerlink" title="调用utils文件 —— 集成版"></a>调用utils文件 —— 集成版</h1><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> utils<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;golang.org/x/crypto/bcrypt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(encryptText <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br> hashStr, err := bcrypt.GenerateFromPassword([]<span class="hljs-type">byte</span>(encryptText), bcrypt.DefaultCost)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(hashStr), err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CompareHashAndPassword</span><span class="hljs-params">(hashPassword, Password <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br> err := bcrypt.CompareHashAndPassword([]<span class="hljs-type">byte</span>(hashPassword), []<span class="hljs-type">byte</span>(Password))<br><br> <span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure></div>

<h1 id="bcrypt某些错误类型"><a href="#bcrypt某些错误类型" class="headerlink" title="bcrypt某些错误类型"></a>bcrypt某些错误类型</h1><ul>
<li><p>type HashVersionTooNewError byte</p>
<blockquote>
<p>使用 创建哈希时从 CompareHashAndPassword 返回的错误 比此实现更新的 bcrypt 算法。<br>func (hv HashVersionTooNewError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
<li><p>type InvalidCostError int</p>
<blockquote>
<p>类型 无效cost错误<br>func (ic InvalidCostError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
<li><p>type InvalidHashPrefixError byte</p>
<blockquote>
<p>类型无效哈希前缀错误<br>当哈希以“$”以外的内容开头时，从 CompareHashAndPassword 返回的错误<br>func (ih InvalidHashPrefixError) Error() string 调用error返回字符串</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>一日一库</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GoRequests库</title>
    <url>/2024/08/26/Golang%E4%B8%80%E6%97%A5%E4%B8%80%E5%BA%93%E4%B9%8BGoRequests/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#%25E5%25AE%2598%25E6%2596%25B9%25E6%2596%2587%25E6%25A1%25A3">官方文档</a></li>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585">安装</a></li>
<li><a href="#%25E5%25AF%25BC%25E5%2585%25A5">导入</a></li>
<li><a href="#%25E5%258F%2591%25E9%2580%2581%25E8%25AF%25B7%25E6%25B1%2582">发送请求</a><ul>
<li><a href="#Get%25E8%25AF%25B7%25E6%25B1%2582">Get请求</a></li>
<li><a href="#Post%25E8%25AF%25B7%25E6%25B1%2582">Post请求</a></li>
</ul>
</li>
<li><a href="#Post%25E4%25B8%258A%25E4%25BC%25A0%25E6%2596%2587%25E4%25BB%25B6">Post上传文件</a></li>
<li><a href="#Gorequests-%25E4%25BD%25BF%25E7%2594%25A8session">Gorequests 使用session</a></li>
<li><a href="#GoRequests-%25E4%25BD%25BF%25E7%2594%25A8%25E4%25BB%25A3%25E7%2590%2586">GoRequests 使用代理</a></li>
</ul>
<!-- tocstop -->

<hr>
<p>我们在使用Go做爬虫的时候，首先接触的肯定是 Golang 标准库 net&#x2F;http</p>
<blockquote>
<p><a class="link"   href="https://pkg.go.dev/net/http" >https://pkg.go.dev/net/http <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>有兴趣的可以去看看文档。<br>但是老实说 这个库个人感觉不是特别的好用</p>
</blockquote>
<p>有可能是之前就是使用了Python 所以还是感觉如果有像Python库中的requests<br>那样去实现请求就好了。<br>所以GoRequests 就诞生了。</p>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>DOC: <a class="link"   href="https://pkg.go.dev/github.com/levigross/grequests" >https://pkg.go.dev/github.com/levigross/grequests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>Github: <a class="link"   href="http://github.com/levigross/grequests" >http://github.com/levigross/grequests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>响应可以序列化为 JSON 和 XML</li>
<li>轻松上传文件</li>
<li>轻松下载文件</li>
<li>支持以下 HTTP 谓词GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">go get -u github.com/levigross/grequests<br></code></pre></td></tr></table></figure></div>

<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><blockquote>
<p>import “github.com&#x2F;levigross&#x2F;grequests”</p>
</blockquote>
<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">ro := &amp;RequestOptions&#123;<br> Params: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hybpjx&quot;</span>&#125;,<br>&#125;<br><span class="hljs-comment">// url路径上的参数会被覆盖</span><br>resp, err := grequests.Get(<span class="hljs-string">&quot;http://httpbin.org/get?h=1&quot;</span>, ro)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(resp.String())<br></code></pre></td></tr></table></figure></div>

<h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">option := &amp;grequests.RequestOptions&#123;Data: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17302343.html&quot;</span>&#125;&#125;<br>resp, err := grequests.Post(<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span>, option)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">if</span> resp.Ok != <span class="hljs-literal">true</span> &#123;<br> fmt.Println(resp.Ok)<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h1 id="Post上传文件"><a href="#Post上传文件" class="headerlink" title="Post上传文件"></a>Post上传文件</h1><p>还可以支持上传文件</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs Golang"><span class="hljs-comment">// 允许您通过指定磁盘上的位置来创建FileUpload结构片</span><br>fd, err := grequests.FileUploadFromDisk(<span class="hljs-string">&quot;test/1&quot;</span>)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br> fmt.Printf(<span class="hljs-string">&quot;文件打开失败:%v\n&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 这将以请求的形式上传文件</span><br>resp, _ := grequests.Post(<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span>,<br> &amp;grequests.RequestOptions&#123;<br>  Files: fd,<br>  Data:  <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;One&quot;</span>: <span class="hljs-string">&quot;Two&quot;</span>&#125;,<br> &#125;)<br><br>fmt.Println(resp.Ok,resp.StatusCode)<br></code></pre></td></tr></table></figure></div>

<h1 id="Gorequests-使用session"><a href="#Gorequests-使用session" class="headerlink" title="Gorequests 使用session"></a>Gorequests 使用session</h1><div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang">session := grequests.Session&#123;<br>  RequestOptions: &amp;grequests.RequestOptions&#123;<br>   Headers: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>    <span class="hljs-string">&quot;authority&quot;</span>:  <span class="hljs-string">&quot;mp3.haoge500.com&quot;</span>,<br>    <span class="hljs-string">&quot;referer&quot;</span>:    <span class="hljs-string">&quot;https://www.zz123.com/&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span>,<br>   &#125;,<br>  &#125;,<br> &#125;<br></code></pre></td></tr></table></figure></div>

<h1 id="GoRequests-使用代理"><a href="#GoRequests-使用代理" class="headerlink" title="GoRequests 使用代理"></a>GoRequests 使用代理</h1><p>gorequest代理，非常简单 网上的Demo很多 也不只这一个<br>我展示的是阿布云的代理<br>需要注意的是 需要把 Proxies 中的url 添加为 *url.URL 代理</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> test<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/levigross/grequests&quot;</span><br> <span class="hljs-string">&quot;net/url&quot;</span><br> <span class="hljs-string">&quot;testing&quot;</span><br> <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 代理服务器</span><br><span class="hljs-keyword">const</span> proxyServer = <span class="hljs-string">&quot;http-pro.xxx.com:9010&quot;</span><br><br><span class="hljs-comment">// 代理隧道验证信息</span><br><span class="hljs-keyword">const</span> proxyUser = <span class="hljs-string">&quot;xxxxxxxxx&quot;</span><br><br><span class="hljs-keyword">const</span> proxyPass = <span class="hljs-string">&quot;xxxxxxxxx&quot;</span><br><br><span class="hljs-keyword">type</span> Proxy <span class="hljs-keyword">struct</span> &#123;<br> AppID     <span class="hljs-type">string</span><br> AppSecret <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Proxy)</span></span> ProxyURL() *url.URL &#123;<br> proxyUrl, _ := url.Parse(<span class="hljs-string">&quot;http://&quot;</span> + p.AppID + <span class="hljs-string">&quot;:&quot;</span> + p.AppSecret + <span class="hljs-string">&quot;@&quot;</span> + proxyServer)<br> <span class="hljs-keyword">return</span> proxyUrl<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCommon</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br> <span class="hljs-comment">// 初始化 proxy http client</span><br> proxyURL := Proxy&#123;AppID: proxyUser, AppSecret: proxyPass&#125;.ProxyURL()<br> fmt.Println(proxyURL)<br> trueUrl := <span class="hljs-string">&quot;http://www.xiushui.gov.cn/xxgk/bmxxgk/sthjj/sthj/xmhp/index.html&quot;</span><br> ro := &amp;grequests.RequestOptions&#123;<br>  Headers: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>   <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,<br>  &#125;,<br>  Proxies: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*url.URL&#123;<br>   <span class="hljs-string">&quot;http&quot;</span>: proxyURL,<br>  &#125;,<br> &#125;<br> resp, err := grequests.Get(trueUrl, ro)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err.Error())<br> &#125;<br> fmt.Println(<span class="hljs-string">&quot;&quot;</span>, resp.StatusCode)<br> time.Sleep(time.Second * <span class="hljs-number">10</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>一日一库</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin_Resonse返回格式</title>
    <url>/2024/08/26/Gin-Resonse%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p>目的： gin返回restful格式的数据，返回的200，201 的数据 也包括异常时的404&#x2F;500等情况<br>全局统一返回RESTful风格数据，主要是实现Respon接口的方法，对返回值在输出之前进行修改。</p>
<p>直接调用下文代码即可</p>
<h1 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h1><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> response<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br> <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-comment">// Response</span><br><span class="hljs-comment">// context 上下文</span><br><span class="hljs-comment">// httpStatus http 状态码</span><br><span class="hljs-comment">// code 自己定义的状态码</span><br><span class="hljs-comment">// data 返回的空接口</span><br><span class="hljs-comment">// msg 返回的信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Response</span><span class="hljs-params">(context *gin.Context, httpStatus <span class="hljs-type">int</span>, code <span class="hljs-type">int</span>, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(httpStatus, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: code,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Success</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusOK, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fail</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusOK, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">400</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnprocessableEntity</span><span class="hljs-params">(context *gin.Context, data gin.H, msg <span class="hljs-type">string</span>)</span></span> &#123;<br> context.JSON(http.StatusUnprocessableEntity, gin.H&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">422</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: data,<br>  <span class="hljs-string">&quot;msg&quot;</span>:  msg,<br> &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure></div>



<p>后续可以自己添加方法然后固定的格式</p>
<h1 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h1><p>构建一个结构体 然后只有有些无用的值是可以不传的。<br>这种方式对比上一种更加灵活多变。</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> api<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br> <span class="hljs-string">&quot;net/http&quot;</span><br> <span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> ResponseJson <span class="hljs-keyword">struct</span> &#123;<br> Status <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;-&quot;`</span><br> Code   <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;code,omitempty&quot;`</span><br> Msg    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;msg,omitempty&quot;`</span><br> Data   any    <span class="hljs-string">`json:&quot;data,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-comment">// IsEmpty 判断结构体是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r ResponseJson)</span></span> IsEmpty() <span class="hljs-type">bool</span> &#123;<br> <span class="hljs-keyword">return</span> reflect.DeepEqual(r, ResponseJson&#123;&#125;)<br>&#125;<br><br><span class="hljs-comment">// 构建状态码 ，如果 传入的ResponseJson没有Status 就使用默认的状态码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildStatus</span><span class="hljs-params">(resp ResponseJson, defaultStatus <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br> <span class="hljs-keyword">if</span> resp.Status == <span class="hljs-number">0</span> &#123;<br>  <span class="hljs-keyword">return</span> defaultStatus<br> &#125;<br> <span class="hljs-keyword">return</span> resp.Status<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HttpResponse</span><span class="hljs-params">(ctx *gin.Context, status <span class="hljs-type">int</span>, resp ResponseJson)</span></span> &#123;<br> <span class="hljs-keyword">if</span> resp.IsEmpty() &#123;<br>  ctx.AbortWithStatus(status)<br>  <span class="hljs-keyword">return</span><br> &#125;<br> ctx.AbortWithStatusJSON(status, resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Success</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusOK), resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fail</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusBadRequest), resp)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ServerFail</span><span class="hljs-params">(ctx *gin.Context, resp ResponseJson)</span></span> &#123;<br> HttpResponse(ctx, buildStatus(resp, http.StatusInternalServerError), resp)<br><br>&#125;<br><br></code></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Gin速用</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ja3指纹学习</title>
    <url>/2024/08/26/Ja3%E6%8C%87%E7%BA%B9%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#%25E5%25A3%25B0%25E6%2598%258E">声明</a></li>
<li><a href="#%25E5%25BC%2595%25E8%25A8%2580%25EF%25BC%259A">引言：</a></li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E6%25A6%2582%25E8%25BF%25B0">JA3指纹的概述</a><ul>
<li><a href="#%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AFJA3%25E6%258C%2587%25E7%25BA%25B9%25EF%25BC%259F">什么是JA3指纹？</a></li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E7%25BB%2584%25E6%2588%2590%25E5%2592%258C%25E6%25A0%25BC%25E5%25BC%258F">JA3指纹的组成和格式</a><ul>
<li><a href="#%25E7%25BB%2584%25E6%2588%2590">组成</a></li>
<li><a href="#%25E6%25A0%25BC%25E5%25BC%258F">格式</a></li>
</ul>
</li>
<li><a href="#JA3%25E6%258F%25A1%25E6%2589%258B%25E6%258C%2587%25E7%25BA%25B9%25E5%2592%258CJA3S%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E5%258C%25BA%25E5%2588%25AB">JA3握手指纹和JA3S指纹的区别</a></li>
</ul>
</li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E5%25B7%25A5%25E4%25BD%259C%25E5%258E%259F%25E7%2590%2586">JA3指纹的工作原理</a><ul>
<li><a href="#TLS%25E6%258F%25A1%25E6%2589%258B%25E8%25BF%2587%25E7%25A8%258B%25E7%259A%2584%25E5%2585%25B3%25E9%2594%25AE%25E4%25BF%25A1%25E6%2581%25AF">TLS握手过程的关键信息</a></li>
<li><a href="#%25E9%2580%259A%25E8%25BF%2587TLS%25E6%258F%25A1%25E6%2589%258B%25E4%25BF%25A1%25E6%2581%25AF%25E7%2594%259F%25E6%2588%2590JA3%25E6%258C%2587%25E7%25BA%25B9">通过TLS握手信息生成JA3指纹</a></li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E5%258F%25AF%25E5%258F%2598%25E6%2580%25A7%25E5%2592%258C%25E5%2594%25AF%25E4%25B8%2580%25E6%2580%25A7">JA3指纹的可变性和唯一性</a></li>
</ul>
</li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E5%25BA%2594%25E7%2594%25A8">JA3指纹的应用</a></li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E5%25AE%259E%25E4%25BE%258B%25E5%2592%258C%25E5%25AE%259E%25E7%2594%25A8%25E6%258A%2580%25E5%25B7%25A7">JA3指纹的实例和实用技巧</a></li>
<li><a href="#JA3%25E6%258C%2587%25E7%25BA%25B9%25E7%259A%2584%25E9%2599%2590%25E5%2588%25B6%25E5%2592%258C%25E9%259A%2590%25E7%25A7%2581%25E8%2580%2583%25E8%2599%2591">JA3指纹的限制和隐私考虑</a></li>
<li><a href="#%25E6%258A%2593%25E5%258C%2585%25E5%25B1%2595%25E7%25A4%25BA">抓包展示</a><ul>
<li><a href="#fiddler">fiddler</a></li>
<li><a href="#charles">charles</a></li>
<li><a href="#wireshark">wireshark</a></li>
</ul>
</li>
<li><a href="#%25E6%258C%2587%25E7%25BA%25B9%25E5%2588%2586%25E6%259E%2590">指纹分析</a><ul>
<li><a href="#%25E6%25B5%258F%25E8%25A7%2588%25E5%2599%25A8">浏览器</a></li>
<li><a href="#python">python</a></li>
<li><a href="#python-%25E9%25AD%2594%25E6%2594%25B9%25E5%25BA%2593">python 魔改库</a></li>
<li><a href="#%25E6%2580%25BB%25E7%25BB%2593%25E4%25B8%2589%25E7%25A7%258D%25E6%2596%25B9%25E5%25BC%258F">总结三种方式</a></li>
</ul>
</li>
<li><a href="#tls-%25E6%25A3%2580%25E6%25B5%258B%25E7%259A%2584%25E7%25BB%2595%25E8%25BF%2587%25E6%2596%25B9%25E6%25A1%2588">tls 检测的绕过方案</a></li>
<li><a href="#%25E6%2580%25BB%25E7%25BB%2593">总结</a></li>
<li><a href="#%25E5%258F%2582%25E8%2580%2583%25E6%2596%2587%25E7%258C%25AE">参考文献</a></li>
</ul>
<!-- tocstop -->

<hr>
<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</p>
<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>在当今互联网时代，保护通信数据的安全性变得至关重要。为了建立安全的通信连接，TLS（Transport Layer Security）协议被广泛应用于Web浏览器、移动应用和其他网络应用程序中。而与此同时，识别和分析这些TLS通信也成为网络安全研究和威胁情报分析的重要任务之一。JA3指纹作为一种独特的指纹识别技术，为我们提供了一种有效的手段来识别和分析TLS通信。</p>
<h1 id="JA3指纹的概述"><a href="#JA3指纹的概述" class="headerlink" title="JA3指纹的概述"></a>JA3指纹的概述</h1><h2 id="什么是JA3指纹？"><a href="#什么是JA3指纹？" class="headerlink" title="什么是JA3指纹？"></a>什么是JA3指纹？</h2><p>JA3指纹（JA3 fingerprint）是一种用于网络流量分析的技术，旨在识别和分类不同的TLS（Transport Layer Security）客户端。TLS是一种常用于加密互联网通信的协议，它提供了安全的数据传输和身份验证机制。</p>
<p>JA3指纹通过分析TLS握手阶段中客户端和服务器之间交换的握手消息来创建一个唯一的指纹。在TLS握手期间，客户端和服务器交换一系列的握手消息，包括支持的TLS版本、密码套件、压缩算法和TLS扩展等信息。JA3指纹将这些消息中的特定字段进行哈希处理，生成一个字符串来表示客户端的TLS配置。</p>
<p>由于不同的TLS客户端在握手消息中的字段值可能会有所不同，因此它们生成的JA3指纹也会有所不同。这使得JA3指纹可以用于识别和区分不同类型的TLS客户端，例如Web浏览器、移动应用程序、恶意软件等。</p>
<p>通过分析网络流量中的JA3指纹，安全分析人员和网络管理员可以检测和识别异常的TLS行为、恶意软件的活动或者潜在的网络攻击。然而，值得注意的是，JA3指纹并非绝对可靠，因为攻击者可以通过更改TLS</p>
<h2 id="JA3指纹的组成和格式"><a href="#JA3指纹的组成和格式" class="headerlink" title="JA3指纹的组成和格式"></a>JA3指纹的组成和格式</h2><p>JA3指纹由TLS握手消息中的特定字段值组成，并使用逗号进行分隔。</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul>
<li><p>JA3_HASH,JA3_SSLVersion,JA3_CipherSuites,JA3_Extensions</p>
</li>
<li><p>JA3_HASH：这是根据TLS握手消息中的客户端Hello消息计算得出的哈希值，通常使用MD5或SHA256算法生成。JA3_HASH用于唯一标识TLS客户端的配置。</p>
</li>
<li><p>JA3_SSLVersion：这是客户端支持的TLS版本号。例如，TLS 1.2的版本号是0x0303，TLS 1.3的版本号是0x0304。</p>
</li>
<li><p>JA3_CipherSuites：这是客户端支持的加密套件列表。加密套件指定了用于加密通信的加密算法和密钥交换协议。每个加密套件都有一个唯一的标识号。在JA3指纹中，多个加密套件由逗号分隔。</p>
</li>
<li><p>JA3_Extensions：这是客户端在TLS握手消息中发送的TLS扩展列表。TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication (SNI)、Supported Elliptic Curves、Supported Point Formats等。在JA3指纹中，多个扩展由逗号分隔。</p>
</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>以下是一个示例JA3指纹的格式：</p>
<div class="highlight-container" data-rel="Llvm"><figure class="iseeu highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">eb<span class="hljs-number">6</span>f<span class="hljs-number">49e8</span>db<span class="hljs-number">7</span>ad<span class="hljs-number">1809</span>f<span class="hljs-number">885</span>d<span class="hljs-number">12232</span>f<span class="hljs-number">4855</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0303</span><span class="hljs-punctuation">,</span><span class="hljs-number">0xc02c</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>f<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">00</span>a<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">009</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">013</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">014</span><span class="hljs-punctuation">,</span><span class="hljs-number">0xff01</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0000</span><br></code></pre></td></tr></table></figure></div>

<p>在上述示例中，</p>
<ol>
<li>JA3_HASH为<code>eb6f49e8db7ad1809f885d12232f4855</code>，</li>
<li>JA3_SSLVersion为<code>0x0303（表示TLS 1.2）</code>，</li>
<li>JA3_CipherSuites包括多个加密套件</li>
<li>JA3_Extensions为空。</li>
</ol>
<h2 id="JA3握手指纹和JA3S指纹的区别"><a href="#JA3握手指纹和JA3S指纹的区别" class="headerlink" title="JA3握手指纹和JA3S指纹的区别"></a>JA3握手指纹和JA3S指纹的区别</h2><p>JA3指纹和JA3S指纹是两种相关但略有不同的TLS指纹技术。</p>
<ol>
<li><p>JA3指纹（Just Another SSL&#x2F;TLS Fingerprint）：它是根据客户端发送的TLS握手消息中的字段值生成的指纹。这些字段包括SSL&#x2F;TLS版本、加密套件、TLS扩展等信息。JA3指纹用于识别和分类不同的TLS客户端。</p>
</li>
<li><p>JA3S指纹（Just Another SSL&#x2F;TLS Signature）：它是基于服务器在TLS握手过程中发送的服务器Hello消息中的字段值生成的指纹。与JA3指纹不同，JA3S指纹用于识别和分类不同的TLS服务器。</p>
</li>
</ol>
<p>JA3指纹和JA3S指纹的生成方法类似，都是通过计算握手消息中的字段值的哈希值来生成唯一的指纹。它们的区别在于指纹生成的消息来源不同：JA3指纹是基于客户端Hello消息，而JA3S指纹是基于服务器Hello消息。</p>
<p>这两种指纹技术在网络安全领域中被广泛应用，可以用于检测异常的TLS行为、识别恶意软件和网络攻击等。同时，它们也有一定的局限性，因为攻击者可以伪造或篡改握手消息中的字段值，以逃避指纹识别。因此，在使用JA3和JA3S指纹进行分析时，需要结合其他技术和方法进行验证和确认。</p>
<p>JA3和JA3S工具现在已经开源<br>下载地址： <a class="link"   href="https://github.com/salesforce/ja3" >https://github.com/salesforce/ja3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="JA3指纹的工作原理"><a href="#JA3指纹的工作原理" class="headerlink" title="JA3指纹的工作原理"></a>JA3指纹的工作原理</h1><h2 id="TLS握手过程的关键信息"><a href="#TLS握手过程的关键信息" class="headerlink" title="TLS握手过程的关键信息"></a>TLS握手过程的关键信息</h2><p>TLS握手过程中包含了多个关键信息，这些信息对于建立安全连接和进行身份验证非常重要。以下是TLS握手过程中的一些关键信息：</p>
<ol>
<li><p>客户端支持的TLS版本：客户端在ClientHello消息中指定其支持的TLS版本，例如TLS 1.2或TLS 1.3。服务器会根据客户端支持的版本选择适当的协议版本进行通信。</p>
</li>
<li><p>加密套件（Cipher Suite）：加密套件定义了在通信过程中使用的加密算法和密钥交换算法。它包括对称加密算法（如AES、DES）、密钥交换算法（如RSA、Diffie-Hellman）和消息认证算法（如HMAC）等。</p>
</li>
<li><p>随机数（Random）：客户端和服务器都会生成一个随机数，用于生成对称加密算法的密钥、初始化向量（IV）和计算消息认证码（MAC）。随机数的目的是增加通信的随机性和安全性。</p>
</li>
<li><p>数字证书（Digital Certificate）：服务器在ServerHello消息中会发送数字证书，证书用于验证服务器的身份。证书包含服务器的公钥和证书颁发机构（CA）的签名，客户端可以使用该公钥验证服务器的身份和建立安全通信。</p>
</li>
<li><p>客户端密钥交换（Client Key Exchange）：在握手过程中，客户端可能需要发送密钥交换相关的信息，用于与服务器协商会话密钥。这可以是一个PreMaster Secret（预主密钥）或Diffie-Hellman交换的公钥。</p>
</li>
<li><p>会话标识符（Session Identifier）：服务器可以为成功建立的会话分配一个唯一的会话标识符，以便在后续的握手过程中快速恢复会话状态，从而提高性能。</p>
</li>
<li><p>TLS扩展（TLS Extensions）：TLS扩展提供了额外的功能和安全性选项。常见的扩展包括Server Name Indication（SNI，用于指定服务器的域名）、支持的加密算法、应用层协议协商（ALPN）等。</p>
</li>
</ol>
<p>这些关键信息在TLS握手期间的交换和协商，确保了通信的机密性、完整性和身份验证，从而建立了安全的TLS连接。</p>
<h2 id="通过TLS握手信息生成JA3指纹"><a href="#通过TLS握手信息生成JA3指纹" class="headerlink" title="通过TLS握手信息生成JA3指纹"></a>通过TLS握手信息生成JA3指纹</h2><p>生成JA3指纹需要从TLS握手信息中提取关键字段，并对这些字段进行哈希处理。以下是生成JA3指纹的一般步骤：</p>
<ol>
<li><p>提取TLS握手消息中的关键字段：从客户端Hello消息中提取以下字段值：</p>
<pre><code>   - 支持的TLS版本（SSLVersion）
   - 加密套件（CipherSuites）
   - TLS扩展（Extensions）
</code></pre>
</li>
<li><p>将提取的字段值组合成一个字符串：将上述字段值按照特定的顺序连接起来，使用逗号进行分隔。例如：SSLVersion,CipherSuites,Extensions。</p>
</li>
<li><p>对组合的字符串进行哈希处理：使用特定的哈希算法，例如MD5或SHA256，对上述组合的字符串进行哈希处理，生成一个哈希值。</p>
</li>
<li><p>将哈希值作为JA3指纹：将生成的哈希值作为最终的JA3指纹。</p>
</li>
</ol>
<p>需要注意的是，不同的实现和工具可能对字段的顺序和格式有所不同。为了确保一致性，建议使用广泛接受的规范来提取字段和生成JA3指纹。</p>
<p><strong>示例</strong><br>假设提取的字段值为：</p>
<div class="highlight-container" data-rel="Llvm"><figure class="iseeu highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">SSLVersion: <span class="hljs-number">0x0303</span><br>CipherSuites: <span class="hljs-keyword">c</span><span class="hljs-number">02</span><span class="hljs-keyword">c</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">02</span>f<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">00</span>a<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">009</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">013</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">014</span><br>Extensions: <span class="hljs-number">0xff01</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x0000</span><br></code></pre></td></tr></table></figure></div>

<p>组合的字符串为：<code>0x0303,c02c,c02b,c02f,c00a,c009,c013,c014,0xff01,0x0000</code><br>通过MD5哈希处理上述字符串得到哈希值：<code>eb6f49e8db7ad1809f885d12232f4855</code><br>最终的JA3指纹为：<code>eb6f49e8db7ad1809f885d12232f4855</code></p>
<p>实际实现中可能会有一些细微的差异。</p>
<h2 id="JA3指纹的可变性和唯一性"><a href="#JA3指纹的可变性和唯一性" class="headerlink" title="JA3指纹的可变性和唯一性"></a>JA3指纹的可变性和唯一性</h2><p>JA3指纹具有一定的可变性和唯一性，这取决于TLS客户端的配置和握手消息中的字段值。</p>
<ol>
<li>可变性：</li>
</ol>
<ul>
<li><p>不同的TLS客户端可能支持不同的TLS版本、加密套件和TLS扩展，因此它们的JA3指纹会有所不同。</p>
</li>
<li><p>特定的TLS客户端可能会在不同的环境或配置下生成不同的JA3指纹。例如，同一款Web浏览器在不同的操作系统、版本或插件配置下生成的JA3指纹可能会有差异。</p>
</li>
</ul>
<ol start="2">
<li>唯一性：</li>
</ol>
<ul>
<li><p>在大多数情况下，每个TLS客户端的配置会生成一个唯一的JA3指纹。由于握手消息中的字段值是在握手期间由客户端动态生成的，因此不同的配置通常会产生不同的JA3指纹。</p>
</li>
<li><p>JA3指纹的哈希算法（如MD5或SHA256）通常能够保证较低的碰撞概率，即不同的配置生成相同的指纹的可能性较低。</p>
</li>
</ul>
<p>然而，需要注意的是，JA3指纹并不是绝对唯一和确定性的标识符，也存在一些限制和局限性：</p>
<ol>
<li><p>攻击者可以通过修改握手消息中的字段值来更改JA3指纹，从而规避指纹识别。</p>
</li>
<li><p>同一款TLS客户端的不同版本或补丁更新可能会导致生成不同的JA3指纹，因此在比较和匹配JA3指纹时需要考虑版本和细微差异。</p>
</li>
<li><p>由于新的TLS版本、加密套件和扩展的发布，TLS客户端的配置也可能会发生变化，进而影响JA3指纹的唯一性。</p>
</li>
</ol>
<p>综上所述，JA3指纹在识别和分类TLS客户端方面提供了一种有用的方法，但在实际应用中需要综合考虑其他因素并进行进一步验证，以确保准确性和可靠性。</p>
<h1 id="JA3指纹的应用"><a href="#JA3指纹的应用" class="headerlink" title="JA3指纹的应用"></a>JA3指纹的应用</h1><p>具体分为两部分</p>
<p><strong>网络安全领域的应用</strong></p>
<ol>
<li><p>威胁情报分析</p>
</li>
<li><p>恶意软件检测</p>
</li>
<li><p>流量分析和监测</p>
</li>
</ol>
<p><strong>应用领域的应用</strong></p>
<ol>
<li><p>应用识别和版本检测</p>
</li>
<li><p>通信指纹的对比和识别</p>
</li>
<li><p>数据包的分类和过滤</p>
</li>
</ol>
<h1 id="JA3指纹的实例和实用技巧"><a href="#JA3指纹的实例和实用技巧" class="headerlink" title="JA3指纹的实例和实用技巧"></a>JA3指纹的实例和实用技巧</h1><p>JA3指纹：eb6f49e8db7ad1809f885d12232f4855</p>
<p>实用技巧：</p>
<ol>
<li><p>JA3指纹的比对：通过收集和比对网络流量中的JA3指纹，可以检测和识别不同类型的TLS客户端。例如，您可以建立一个JA3指纹数据库，并与实时的网络流量进行比对，以发现异常或恶意的TLS行为。</p>
</li>
<li><p>恶意软件识别：JA3指纹可用于检测和分类恶意软件的通信行为。通过比对已知恶意软件的JA3指纹，您可以快速识别并阻止类似指纹的流量，以提高网络安全性。</p>
</li>
<li><p>威胁情报分析：JA3指纹可以与威胁情报平台进行集成，以获取有关特定指纹的更多信息。这样，您可以了解该指纹是否与已知的恶意活动、攻击或特定组织相关联。</p>
</li>
<li><p>异常检测：通过监视网络流量中的JA3指纹变化，您可以识别到不寻常的TLS行为。例如，当某个JA3指纹频繁变化或与正常流量有明显差异时，可能表明存在潜在的安全问题或攻击行为。</p>
</li>
<li><p>风险评估和访问控制：在安全环境中，根据JA3指纹可以评估客户端的安全性，并采取相应的访问控制策略。如果某个客户端的JA3指纹与高风险的配置相关，可以采取额外的安全措施，例如强制进行多因素身份验证或限制其访问权限。</p>
</li>
<li><p>安全事件响应：JA3指纹可以用于网络安全事件的响应和调查。在检测到安全事件后，可以使用JA3指纹追踪相关的TLS客户端，并识别受影响的系统或用户，从而进行进一步的分析和应对。</p>
</li>
</ol>
<p>注意，JA3指纹仅作为一种辅助工具和指标，应与其他安全技术和方法相结合使用，以全面评估和提高网络安全性。</p>
<h1 id="JA3指纹的限制和隐私考虑"><a href="#JA3指纹的限制和隐私考虑" class="headerlink" title="JA3指纹的限制和隐私考虑"></a>JA3指纹的限制和隐私考虑</h1><p>JA3指纹具有隐私保护和加密协议选择以及JA3指纹的可变性和易受干扰性</p>
<p>以下是常见的限制和隐私考虑：</p>
<ol>
<li><p>配置和环境的影响：JA3指纹受到TLS客户端的配置和环境影响。不同的配置和环境可能导致不同的JA3指纹，这可能增加了误报或漏报的风险。</p>
</li>
<li><p>版本和升级的影响：TLS客户端的版本和升级可能导致JA3指纹的变化。对于同一款TLS客户端的不同版本，其生成的JA3指纹可能会有差异。这需要在分析和比对JA3指纹时考虑版本和细微差异。</p>
</li>
<li><p>隐私泄露风险：JA3指纹可以泄露关于客户端的一些信息，例如所使用的TLS版本、加密套件和扩展。这些信息可能被用于识别和追踪特定的客户端，从而对隐私造成风险。特别是在面对具有大规模网络流量的环境时，JA3指纹的唯一性可能导致识别个体用户。</p>
</li>
<li><p>指纹伪造：攻击者有可能通过修改TLS握手消息中的字段值来伪造JA3指纹，以规避指纹识别和防御措施。这可能降低JA3指纹的可靠性和准确性，因此在使用JA3指纹时需要谨慎验证和结合其他信息进行分析。</p>
</li>
<li><p>数据采集和存储：收集和存储大量的JA3指纹数据可能需要相应的资源和隐私保护措施。确保合规性和数据安全性非常重要，包括数据保护、加密和访问控制等方面的考虑。</p>
</li>
</ol>
<h1 id="抓包展示"><a href="#抓包展示" class="headerlink" title="抓包展示"></a>抓包展示</h1><p>用下某网站做测试 且此网站也有有Ja3指纹加密的</p>
<blockquote>
<p>aHR0cHM6Ly9nZ3p5LmppYW5neGkuZ292LmNuL3h3ZHQvMDAxMDAyL3NlYzEuaHRtbA&#x3D;&#x3D;</p>
</blockquote>
<h2 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h2><p>!注意 fiddler要想抓Ja3-tls指纹 包<br>要把CONNECTS选项取消勾选，不然抓不到指纹包<br><img src="https://s2.loli.net/2024/08/26/MaLQRDKgSeZ2cl3.png"></p>
<p>然后我们抓到了很多指纹包，然后我们挨个打开看看<br><img src="https://s2.loli.net/2024/08/26/4xZ839vospTAODV.png"></p>
<p><img src="https://s2.loli.net/2024/08/26/T3Gb2qZphFXnM8k.png"><br>然后我们看到很多的加密算法，还有加密方式<br><strong>其实这种包其实本质上就是加入黑名单</strong></p>
<p>已经tls的版本也有<br><img src="https://s2.loli.net/2024/08/26/xRbPZY8wMdE2TU9.png"></p>
<h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p>相比较fiddler charles抓到的包就很有限了。<br>但是操作也更加的简单了<br>我们直接打开charles 然后刷新网站<br><img src="https://s2.loli.net/2024/08/26/FKg6wTEQYM8vtV4.png"><br>这里直接就显示了tls的信息<br><img src="https://s2.loli.net/2024/08/26/e3WR9zNDuijZdV7.png"><br>我们接着点开详细信息 这里显示了tls的加密方式 已经加密的两种方式.</p>
<p>这两种抓包方式终究还是图一乐，真要抓包还得看wireshark</p>
<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>步骤如下</p>
<ol>
<li><p>查询网站IP地址 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; cmd &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; ping xxx.com &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 复制IP地址</p>
</li>
<li><p>打开wireShark抓包，选择抓取的网卡</p>
</li>
<li><p>刷新浏览器</p>
</li>
<li><p>在过滤器中输入 ip.addr &#x3D;&#x3D; 你要查看的ip地址 具体如下图<br><img src="https://s2.loli.net/2024/08/26/EpSkUnq1PbNuc9Y.png"></p>
</li>
<li><p>找到一个Client hello的包<br><img src="https://s2.loli.net/2024/08/26/ayHqf3cUi9Jo7tv.png"></p>
</li>
<li><p>查看详细信息<br><img src="https://s2.loli.net/2024/08/26/1NDKZ7xSRrPycoe.png"></p>
</li>
</ol>
<p>最下面的是hash指纹 和详细指纹信息<br><img src="https://s2.loli.net/2024/08/26/8SlE1ZWzpYFyod6.png"></p>
<p>把这个指纹fullstring复制出来<br><code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code><br>这个指纹信息就是网站可以运行的指纹信息</p>
<h1 id="指纹分析"><a href="#指纹分析" class="headerlink" title="指纹分析"></a>指纹分析</h1><p>指纹信息分析其实很简单，<br>我们接下来用三种方式去获取这个指纹信息<br>也就是上文的<code>771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0</code></p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>这里我们选择直接用上文抓包抓到的指纹<br>还有一种方式<br><a class="link"   href="https://tls.browserleaks.com/json" >https://tls.browserleaks.com/json <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 直接去网站看自己的浏览器指纹也是可以的</p>
<p>由于上面已经获取了浏览器的指纹了，我们直接就拿来用了</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><code class="hljs text">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,18-51-35-23-45-5-27-10-13-43-65281-11-16-17513-0-21,29-23-24,0<br></code></pre></td></tr></table></figure></div>

<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>接着我们使用requests原生库，即正常访问，携带基本的参数去请求即可<br>我们使用代码去访问下这个网站<a class="link"   href="https://tls.browserleaks.com/json" >https://tls.browserleaks.com/json <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>r = requests.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure></div>

<p>结果</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;ja3_hash&quot;</span>: <span class="hljs-string">&quot;8d9f7747675e24454cd9b7ed35c58707&quot;</span>,<br>  <span class="hljs-string">&quot;ja3_text&quot;</span>: <span class="hljs-string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_hash&quot;</span>: <span class="hljs-string">&quot;a790a1e311289ac1543f411f6ffceddf&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_text&quot;</span>: <span class="hljs-string">&quot;771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-10-11-13-16-21-22-23-43-45-49-51,29-23-30-25-24,0-1-2&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_hash&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_text&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>所以这个指纹是</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><code class="hljs text">771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2<br></code></pre></td></tr></table></figure></div>

<h2 id="python-魔改库"><a href="#python-魔改库" class="headerlink" title="python 魔改库"></a>python 魔改库</h2><p>我们再试试 Python有关SSL的魔改库<br>其实这类库有很多<br>简单举例两个吧 一个是 <code>curl_cffi</code> 一个是 <code>tls_client</code></p>
<ul>
<li><p>tls_client : <a class="link"   href="https://pypi.org/project/tls-client/" >https://pypi.org/project/tls-client/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>curl_cffi: <a class="link"   href="https://pypi.org/project/curl-cffi/" >https://pypi.org/project/curl-cffi/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>我们这里使用curl_cffi 去访问一下看看这个指纹是什么</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> curl_cffi <span class="hljs-keyword">import</span> requests<br><br>r = requests.get(<span class="hljs-string">&quot;https://tls.browserleaks.com/json&quot;</span>, impersonate=<span class="hljs-string">&quot;chrome101&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;<br>  <span class="hljs-string">&quot;ja3_hash&quot;</span>: <span class="hljs-string">&quot;cd08e31494f9531f560d64c695473da9&quot;</span>,<br>  <span class="hljs-string">&quot;ja3_text&quot;</span>: <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_hash&quot;</span>: <span class="hljs-string">&quot;aa56c057ad164ec4fdcb7a5a283be9fc&quot;</span>,<br>  <span class="hljs-string">&quot;ja3n_text&quot;</span>: <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-5-10-11-13-16-18-21-23-27-35-43-45-51-17513-65281,29-23-24,0&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_hash&quot;</span>: <span class="hljs-string">&quot;4f04edce68a7ecbe689edce7bf5f23f3&quot;</span>,<br>  <span class="hljs-string">&quot;akamai_text&quot;</span>: <span class="hljs-string">&quot;1:65536;3:1000;4:6291456;6:262144|15663105|0|m,a,s,p&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>而这个指纹是</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><code class="hljs text">771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0<br></code></pre></td></tr></table></figure></div>


<h2 id="总结三种方式"><a href="#总结三种方式" class="headerlink" title="总结三种方式"></a>总结三种方式</h2><p>然后我们把这三个指纹拿出来做个对比</p>
<p><img src="https://s2.loli.net/2024/08/26/ZdyAJjuQvlMxYF1.png"><br><img src="https://s2.loli.net/2024/08/26/q6WHfujkaTKlw9V.png"></p>
<p>可以清楚地看到 python的魔改库和浏览器的指纹是长度是一样的。</p>
<p>这样我们可以知道了，这个指纹长度只要和浏览器相同就可以了。</p>
<p>我们使用魔改库访问开头所要访问的网站实验一下</p>
<p><img src="https://s2.loli.net/2024/08/26/3VAtJunrdpfLoIa.png"><br>发现可以正常访问</p>
<p>那该如何不借助魔改库去完成Ja3网站的解密呢<br>可以通过修改ssl的套接字 使得防火墙黑名单失效<br>从而<strong>保证指纹长度一致</strong> 即可完成解密</p>
<h1 id="tls-检测的绕过方案"><a href="#tls-检测的绕过方案" class="headerlink" title="tls 检测的绕过方案"></a>tls 检测的绕过方案</h1><p><strong>临时方案:</strong></p>
<p><code>注意 requests库必须在2.4 以上版本 不然会失败</code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS =<span class="hljs-string">&#x27;ALL&#x27;</span><br></code></pre></td></tr></table></figure></div>
<p>修改了requests内部包的 ssI里面的套接字设置，使防火墙黑名单失效</p>
<p>动态 DEFAULT CIPHERS :<br><a class="link"   href="https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html" >https://www.openssl.org/docs/man1.1.1/man1/openssl-ciphers.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html" >https://support.huaweicloud.com/bestpractice-waf/waf_06_0012.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>这种方法国内处理就已经够了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认 cipher 在这里定义：https://github.com/encode/httpx/blob/master/httpx/_config.py</span><br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">import</span> httpx<br><br><span class="hljs-comment"># create an ssl context</span><br>ssl_context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS)<br>CIPHERS = <span class="hljs-string">&#x27;DH+AES:RSA+AES&#x27;</span><br>ssl_context.set_ciphers(CIPHERS)<br><br>r = httpx.get(<span class="hljs-string">&#x27;https://tls.browserleaks.com/json&#x27;</span>, verify=ssl_context)<br><span class="hljs-built_in">print</span>(r.text)<br><br></code></pre></td></tr></table></figure></div>

<p><strong>非临时方案:</strong><br>自设ssl，并覆写requests中的类的一些方法<br><a class="link"   href="https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted" >https://stackoverflow.com/questions/60407057/python-requests-being-fingerprinted <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite" >https://stackoverflow.com/questions/64967706/python-requests-https-code-403-without-but-code-200-when-using-burpsuite <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>深入理解requests中 建立 tls的过程<br>先抓包看下正常的访问 tls，和requests访问的区别<br>我们需要单步调试requests源码，并且想办法修改 tls访问过程中的UA<br>按照上面的思路，加上对 ssl的理解，就可以实现一个针对于 tls检测的高并发方案</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JA3指纹是一种通过提取和哈希TLS握手消息中的关键字段来标识和识别TLS客户端的方法。它可以用于识别不同类型的TLS客户端、检测恶意软件、进行威胁情报分析、异常检测和风险评估等。</p>
<p>然而，JA3指纹也有一些限制和隐私考虑。它受到TLS客户端配置和环境的影响，可能受到版本和升级的影响。此外，使用JA3指纹可能泄露一些客户端信息，存在隐私风险，并且有可能被攻击者伪造。</p>
<p>在使用JA3指纹时，需要综合考虑其实用性和隐私风险。适当的数据采集和存储措施、数据保护、加密和隐私保护措施都是重要的考虑因素。此外，JA3指纹应作为辅助工具和指标，并结合其他安全技术和方法来提高网络安全性。</p>
<p>总之，JA3指纹提供了一种用于标识和识别TLS客户端的方法，可以在网络安全领域的多个方面发挥作用，但需要在实际应用中权衡其实用性、准确性和隐私风险</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><p><a class="link"   href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/" >https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/" >https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Ja3</tag>
      </tags>
  </entry>
  <entry>
    <title>Javacript加密解密方法</title>
    <url>/2024/08/26/Javacript%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#%25E4%25B8%2580%25E4%25BA%259B%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584built-in-%25E5%2587%25BD%25E6%2595%25B0%25E5%258A%25A0%25E5%25AF%2586">一些常见的built-in 函数加密</a><ul>
<li><a href="#unescape">unescape</a></li>
<li><a href="#URL%25E7%25BC%2596%25E7%25A0%2581%25E4%25B8%258E%25E8%25A7%25A3%25E7%25A0%2581">URL编码与解码</a></li>
<li><a href="#fromCharCode">fromCharCode</a></li>
</ul>
</li>
<li><a href="#Base64">Base64</a><ul>
<li><a href="#btoa-atob">btoa atob</a></li>
<li><a href="#node%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E5%25BC%258F">node实现方式</a></li>
<li><a href="#%25E5%25BC%2595%25E7%2594%25A8-crypto-js-%25E5%258A%25A0%25E5%25AF%2586%25E6%25A8%25A1%25E5%259D%2597">引用 crypto-js 加密模块</a></li>
</ul>
</li>
<li><a href="#MD5">MD5</a></li>
<li><a href="#PBKDF2">PBKDF2</a></li>
<li><a href="#SHA1">SHA1</a></li>
<li><a href="#SHA256">SHA256</a></li>
<li><a href="#HMAC-SHA256">HMAC-SHA256</a></li>
<li><a href="#HMAC">HMAC</a></li>
<li><a href="#DES">DES</a></li>
<li><a href="#3DES">3DES</a></li>
<li><a href="#AES">AES</a></li>
<li><a href="#RC4">RC4</a></li>
<li><a href="#Rabbit">Rabbit</a></li>
<li><a href="#RSA">RSA</a><ul>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8-node-rsa">使用 node-rsa</a></li>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8%25E8%2587%25AA%25E5%25B8%25A6%25E6%25A8%25A1%25E5%259D%2597crypto">使用自带模块crypto:</a></li>
</ul>
</li>
<li><a href="#RSA-%25E9%2595%25BF%25E5%258A%25A0%25E5%25AF%2586">RSA 长加密</a></li>
</ul>
<!-- tocstop -->

<hr>
<p>只需要安装几个库 其中需要了解最多的 <strong>crypto-js</strong></p>
<p>具体就不多介绍了直接上官网<br><a class="link"   href="https://www.npmjs.com/package/crypto-js" >https://www.npmjs.com/package/crypto-js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>安装</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install crypto-js --save-dev<br>npm install md5 --save-dev<br></code></pre></td></tr></table></figure></div>
<h1 id="一些常见的built-in-函数加密"><a href="#一些常见的built-in-函数加密" class="headerlink" title="一些常见的built-in 函数加密"></a>一些常见的built-in 函数加密</h1><h2 id="unescape"><a href="#unescape" class="headerlink" title="unescape"></a>unescape</h2><p>unescape() 函数可对通过 escape() 编码的字符串进行解码。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-built_in">escape</span>(<span class="hljs-string">&quot;始識&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// %u59CB%u8B58</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-built_in">unescape</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// 始識</span><br></code></pre></td></tr></table></figure></div>

<h2 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;https://始識的博客&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-built_in">decodeURI</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// https://始識的博客</span><br></code></pre></td></tr></table></figure></div>

<h2 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode"></a>fromCharCode</h2><p>将 Unicode 编码转为一个字符</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">65</span>);<br><span class="hljs-comment">// A</span><br><br><br>[<span class="hljs-number">101</span>,<span class="hljs-number">118</span>,<span class="hljs-number">97</span>,<span class="hljs-number">108</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(item)<br>&#125;)<br> [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>]<br></code></pre></td></tr></table></figure></div>



<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="btoa-atob"><a href="#btoa-atob" class="headerlink" title="btoa atob"></a>btoa atob</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> e = <span class="hljs-title function_">btoa</span>(<span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e) <span class="hljs-comment">// // https://%E5%A7%8B%E8%AD%98%E7%9A%84%E5%8D%9A%E5%AE%A2</span><br><span class="hljs-keyword">let</span> u = <span class="hljs-title function_">atob</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u) <span class="hljs-comment">// https://www.cnblogs.com/zichliang/p/17265960.html</span><br></code></pre></td></tr></table></figure></div>
<h2 id="node实现方式"><a href="#node实现方式" class="headerlink" title="node实现方式"></a>node实现方式</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Base64 encoded string</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang/p/17265960.html&#x27;</span>;<br><span class="hljs-comment">//b编码</span><br><span class="hljs-keyword">const</span> buffBase64 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(str, <span class="hljs-string">&#x27;utf-8&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffBase64);<br><br><span class="hljs-comment">//解码</span><br><span class="hljs-keyword">const</span> buffStr = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(buffBase64, <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-comment">// print normal string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buffStr);<br><br></code></pre></td></tr></table></figure></div>

<h2 id="引用-crypto-js-加密模块"><a href="#引用-crypto-js-加密模块" class="headerlink" title="引用 crypto-js 加密模块"></a>引用 crypto-js 加密模块</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64Encode</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text);<br>  <span class="hljs-keyword">var</span> encodeData = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(srcs);<br>  <span class="hljs-keyword">return</span> encodeData<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64Decode</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">parse</span>(encodeData);<br>  <span class="hljs-keyword">var</span> decodeData = srcs.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>  <span class="hljs-keyword">return</span> decodeData<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span><br><br><span class="hljs-keyword">var</span> encodeData = <span class="hljs-title function_">base64Encode</span>()<br><span class="hljs-keyword">var</span> decodeData = <span class="hljs-title function_">base64Decode</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Base64 编码: &quot;</span>, encodeData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Base64 解码: &quot;</span>, decodeData)<br><br><span class="hljs-comment">// Base64 编码:  aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemljaGxpYW5nL3AvMTcyNjU5NjAuaHRtbA==</span><br><span class="hljs-comment">// Base64 解码:  https://www.cnblogs.com/zichliang/p/17265960.html</span><br><br></code></pre></td></tr></table></figure></div>

<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MD5Test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">MD5</span>(text).<span class="hljs-title function_">toString</span>()<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MD5Test</span>())  <span class="hljs-comment">// 50177badb579733de56b628ae57fb972</span><br></code></pre></td></tr></table></figure></div>

<h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pbkdf2Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">var</span> salt = <span class="hljs-string">&quot;1234567&quot;</span><br>    <span class="hljs-comment">// key 长度 128，10 次重复运算</span><br>    <span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">PBKDF2</span>(text, salt, &#123;<span class="hljs-attr">keySize</span>: <span class="hljs-number">128</span>/<span class="hljs-number">32</span>,<span class="hljs-attr">iterations</span>: <span class="hljs-number">10</span>&#125;);<br>    <span class="hljs-keyword">return</span> encryptedData.<span class="hljs-title function_">toString</span>()<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">pbkdf2Encrypt</span>())  <span class="hljs-comment">// bcda4be78de797d8f5067331b1a70d40</span><br></code></pre></td></tr></table></figure></div>


<h1 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SHA1Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">SHA1</span>(text).<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SHA1Encrypt</span>())  <span class="hljs-comment">// ca481c13d5af7135b69d11ffb0a443a635fbc307</span><br></code></pre></td></tr></table></figure></div>

<h1 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SHA256Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">SHA256</span>(text).<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SHA256Encrypt</span>())  <span class="hljs-comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span><br></code></pre></td></tr></table></figure></div>
<p>或者使用原生JS源代码文件生成<br>不要问为什么只有这个有js源码，因为这个加密我刚好用到了。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> chrsz = <span class="hljs-number">8</span><br>    <span class="hljs-keyword">const</span> hexcase = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">safe_add</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-keyword">const</span> lsw = (x &amp; <span class="hljs-number">0xFFFF</span>) + (y &amp; <span class="hljs-number">0xFFFF</span>)<br>        <span class="hljs-keyword">const</span> msw = (x &gt;&gt; <span class="hljs-number">16</span>) + (y &gt;&gt; <span class="hljs-number">16</span>) + (lsw &gt;&gt; <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">return</span> (msw &lt;&lt; <span class="hljs-number">16</span>) | (lsw &amp; <span class="hljs-number">0xFFFF</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">S</span>(<span class="hljs-params">X, n</span>) &#123;<br>        <span class="hljs-keyword">return</span> (X &gt;&gt;&gt; n) | (X &lt;&lt; (<span class="hljs-number">32</span> - n))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">R</span>(<span class="hljs-params">X, n</span>) &#123;<br>        <span class="hljs-keyword">return</span> (X &gt;&gt;&gt; n)<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Ch</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>        <span class="hljs-keyword">return</span> ((x &amp; y) ^ ((~x) &amp; z))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Maj</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>        <span class="hljs-keyword">return</span> ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sigma0256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">2</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">13</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">22</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sigma1256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">6</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">11</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">25</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gamma0256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">7</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">18</span>) ^ <span class="hljs-title function_">R</span>(x, <span class="hljs-number">3</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Gamma1256</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S</span>(x, <span class="hljs-number">17</span>) ^ <span class="hljs-title function_">S</span>(x, <span class="hljs-number">19</span>) ^ <span class="hljs-title function_">R</span>(x, <span class="hljs-number">10</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">core_sha256</span>(<span class="hljs-params">m, l</span>) &#123;<br>        <span class="hljs-keyword">const</span> K = [<span class="hljs-number">0x428A2F98</span>, <span class="hljs-number">0x71374491</span>, <span class="hljs-number">0xB5C0FBCF</span>, <span class="hljs-number">0xE9B5DBA5</span>, <span class="hljs-number">0x3956C25B</span>, <span class="hljs-number">0x59F111F1</span>, <span class="hljs-number">0x923F82A4</span>, <span class="hljs-number">0xAB1C5ED5</span>, <span class="hljs-number">0xD807AA98</span>, <span class="hljs-number">0x12835B01</span>, <span class="hljs-number">0x243185BE</span>, <span class="hljs-number">0x550C7DC3</span>, <span class="hljs-number">0x72BE5D74</span>, <span class="hljs-number">0x80DEB1FE</span>, <span class="hljs-number">0x9BDC06A7</span>, <span class="hljs-number">0xC19BF174</span>, <span class="hljs-number">0xE49B69C1</span>, <span class="hljs-number">0xEFBE4786</span>, <span class="hljs-number">0xFC19DC6</span>, <span class="hljs-number">0x240CA1CC</span>, <span class="hljs-number">0x2DE92C6F</span>, <span class="hljs-number">0x4A7484AA</span>, <span class="hljs-number">0x5CB0A9DC</span>, <span class="hljs-number">0x76F988DA</span>, <span class="hljs-number">0x983E5152</span>, <span class="hljs-number">0xA831C66D</span>, <span class="hljs-number">0xB00327C8</span>, <span class="hljs-number">0xBF597FC7</span>, <span class="hljs-number">0xC6E00BF3</span>, <span class="hljs-number">0xD5A79147</span>, <span class="hljs-number">0x6CA6351</span>, <span class="hljs-number">0x14292967</span>, <span class="hljs-number">0x27B70A85</span>, <span class="hljs-number">0x2E1B2138</span>, <span class="hljs-number">0x4D2C6DFC</span>, <span class="hljs-number">0x53380D13</span>, <span class="hljs-number">0x650A7354</span>, <span class="hljs-number">0x766A0ABB</span>, <span class="hljs-number">0x81C2C92E</span>, <span class="hljs-number">0x92722C85</span>, <span class="hljs-number">0xA2BFE8A1</span>, <span class="hljs-number">0xA81A664B</span>, <span class="hljs-number">0xC24B8B70</span>, <span class="hljs-number">0xC76C51A3</span>, <span class="hljs-number">0xD192E819</span>, <span class="hljs-number">0xD6990624</span>, <span class="hljs-number">0xF40E3585</span>, <span class="hljs-number">0x106AA070</span>, <span class="hljs-number">0x19A4C116</span>, <span class="hljs-number">0x1E376C08</span>, <span class="hljs-number">0x2748774C</span>, <span class="hljs-number">0x34B0BCB5</span>, <span class="hljs-number">0x391C0CB3</span>, <span class="hljs-number">0x4ED8AA4A</span>, <span class="hljs-number">0x5B9CCA4F</span>, <span class="hljs-number">0x682E6FF3</span>, <span class="hljs-number">0x748F82EE</span>, <span class="hljs-number">0x78A5636F</span>, <span class="hljs-number">0x84C87814</span>, <span class="hljs-number">0x8CC70208</span>, <span class="hljs-number">0x90BEFFFA</span>, <span class="hljs-number">0xA4506CEB</span>, <span class="hljs-number">0xBEF9A3F7</span>, <span class="hljs-number">0xC67178F2</span>]<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HASH</span> = [<span class="hljs-number">0x6A09E667</span>, <span class="hljs-number">0xBB67AE85</span>, <span class="hljs-number">0x3C6EF372</span>, <span class="hljs-number">0xA54FF53A</span>, <span class="hljs-number">0x510E527F</span>, <span class="hljs-number">0x9B05688C</span>, <span class="hljs-number">0x1F83D9AB</span>, <span class="hljs-number">0x5BE0CD19</span>]<br>        <span class="hljs-keyword">const</span> W = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">let</span> a, b, c, d, e, f, g, h, i, j<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable constant_">T1</span>, <span class="hljs-variable constant_">T2</span><br>        m[l &gt;&gt; <span class="hljs-number">5</span>] |= <span class="hljs-number">0x80</span> &lt;&lt; (<span class="hljs-number">24</span> - l % <span class="hljs-number">32</span>)<br>        m[((l + <span class="hljs-number">64</span> &gt;&gt; <span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">15</span>] = l<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m.<span class="hljs-property">length</span>; i += <span class="hljs-number">16</span>) &#123;<br>            a = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>]<br>            b = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>]<br>            c = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>]<br>            d = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>]<br>            e = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>]<br>            f = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>]<br>            g = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>]<br>            h = <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>]<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">16</span>) &#123;<br>                    W[j] = m[j + i]<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    W[j] = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title class_">Gamma1256</span>(W[j - <span class="hljs-number">2</span>]), W[j - <span class="hljs-number">7</span>]), <span class="hljs-title class_">Gamma0256</span>(W[j - <span class="hljs-number">15</span>])), W[j - <span class="hljs-number">16</span>])<br>                &#125;<br>                <span class="hljs-variable constant_">T1</span> = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(<span class="hljs-title function_">safe_add</span>(h, <span class="hljs-title class_">Sigma1256</span>(e)), <span class="hljs-title class_">Ch</span>(e, f, g)), K[j]), W[j])<br>                <span class="hljs-variable constant_">T2</span> = <span class="hljs-title function_">safe_add</span>(<span class="hljs-title class_">Sigma0256</span>(a), <span class="hljs-title class_">Maj</span>(a, b, c))<br>                h = g<br>                g = f<br>                f = e<br>                e = <span class="hljs-title function_">safe_add</span>(d, <span class="hljs-variable constant_">T1</span>)<br>                d = c<br>                c = b<br>                b = a<br>                a = <span class="hljs-title function_">safe_add</span>(<span class="hljs-variable constant_">T1</span>, <span class="hljs-variable constant_">T2</span>)<br>            &#125;<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>] = <span class="hljs-title function_">safe_add</span>(a, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">0</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>] = <span class="hljs-title function_">safe_add</span>(b, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">1</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>] = <span class="hljs-title function_">safe_add</span>(c, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">2</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>] = <span class="hljs-title function_">safe_add</span>(d, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">3</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>] = <span class="hljs-title function_">safe_add</span>(e, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">4</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>] = <span class="hljs-title function_">safe_add</span>(f, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">5</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>] = <span class="hljs-title function_">safe_add</span>(g, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">6</span>])<br>            <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>] = <span class="hljs-title function_">safe_add</span>(h, <span class="hljs-variable constant_">HASH</span>[<span class="hljs-number">7</span>])<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">HASH</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">str2binb</span>(<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-keyword">const</span> bin = []<br>        <span class="hljs-keyword">const</span> mask = (<span class="hljs-number">1</span> &lt;&lt; chrsz) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span> * chrsz; i += chrsz) &#123;<br>            bin[i &gt;&gt; <span class="hljs-number">5</span>] |= (str.<span class="hljs-title function_">charCodeAt</span>(i / chrsz) &amp; mask) &lt;&lt; (<span class="hljs-number">24</span> - i % <span class="hljs-number">32</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> bin<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Utf8Encode</span>(<span class="hljs-params">string</span>) &#123;<br>        string = string.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\r\n/g</span>, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">let</span> utfText = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>; n &lt; string.<span class="hljs-property">length</span>; n++) &#123;<br>            <span class="hljs-keyword">const</span> c = string.<span class="hljs-title function_">charCodeAt</span>(n)<br>            <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">128</span>) &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(c)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((c &gt; <span class="hljs-number">127</span>) &amp;&amp; (c &lt; <span class="hljs-number">2048</span>)) &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &gt;&gt; <span class="hljs-number">6</span>) | <span class="hljs-number">192</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &gt;&gt; <span class="hljs-number">12</span>) | <span class="hljs-number">224</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(((c &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>                utfText += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> utfText<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">binb2hex</span>(<span class="hljs-params">binarray</span>) &#123;<br>        <span class="hljs-keyword">const</span> hex_tab = hexcase ? <span class="hljs-string">&#x27;0123456789ABCDEF&#x27;</span> : <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br>        <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; binarray.<span class="hljs-property">length</span> * <span class="hljs-number">4</span>; i++) &#123;<br>            str += hex_tab.<span class="hljs-title function_">charAt</span>((binarray[i &gt;&gt; <span class="hljs-number">2</span>] &gt;&gt; ((<span class="hljs-number">3</span> - i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span> + <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xF</span>) +<br>                hex_tab.<span class="hljs-title function_">charAt</span>((binarray[i &gt;&gt; <span class="hljs-number">2</span>] &gt;&gt; ((<span class="hljs-number">3</span> - i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xF</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>    s = <span class="hljs-title class_">Utf8Encode</span>(s)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">binb2hex</span>(<span class="hljs-title function_">core_sha256</span>(<span class="hljs-title function_">str2binb</span>(s), s.<span class="hljs-property">length</span> * chrsz))<br>&#125;<br><br></code></pre></td></tr></table></figure></div>

<p><strong>使用</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sha256</span>(<span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang&#x27;</span>)) <span class="hljs-comment">// 0b16c8942abbf124f6fef65ae145314dd72ed495ede2b95fe0bde722c0e26478</span><br></code></pre></td></tr></table></figure></div>


<h1 id="HMAC-SHA256"><a href="#HMAC-SHA256" class="headerlink" title="HMAC-SHA256"></a>HMAC-SHA256</h1><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">HmacSHA256Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> hash = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">HmacSHA256</span>(<span class="hljs-string">&quot;这是加密信息&quot;</span>, <span class="hljs-string">&quot;这是秘钥&quot;</span>);<br>    <span class="hljs-keyword">var</span> hashInBase64 = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(hash);<br>    <span class="hljs-keyword">return</span> hashInBase64;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">HmacSHA256Encrypt</span>())  <span class="hljs-comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span><br></code></pre></td></tr></table></figure></div>

<p>js源代码</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// To ensure cross-browser support even without a proper SubtleCrypto</span><br><span class="hljs-comment">// impelmentation (or without access to the impelmentation, as is the case with</span><br><span class="hljs-comment">// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256</span><br><span class="hljs-comment">// HMAC signatures using nothing but raw JavaScript</span><br><br><span class="hljs-comment">/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */</span><br><br><span class="hljs-comment">// By giving internal functions names that we can mangle, future calls to</span><br><span class="hljs-comment">// them are reduced to a single byte (minor space savings in minified file)</span><br><span class="hljs-keyword">var</span> uint8Array = <span class="hljs-title class_">Uint8Array</span>;<br><span class="hljs-keyword">var</span> uint32Array = <span class="hljs-title class_">Uint32Array</span>;<br><span class="hljs-keyword">var</span> pow = <span class="hljs-title class_">Math</span>.<span class="hljs-property">pow</span>;<br><br><span class="hljs-comment">// Will be initialized below</span><br><span class="hljs-comment">// Using a Uint32Array instead of a simple array makes the minified code</span><br><span class="hljs-comment">// a bit bigger (we lose our `unshift()` hack), but comes with huge</span><br><span class="hljs-comment">// performance gains</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DEFAULT_STATE</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<span class="hljs-number">8</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">ROUND_CONSTANTS</span> = [];<br><br><span class="hljs-comment">// Reusable object for expanded message</span><br><span class="hljs-comment">// Using a Uint32Array instead of a simple array makes the minified code</span><br><span class="hljs-comment">// 7 bytes larger, but comes with huge performance gains</span><br><span class="hljs-keyword">var</span> M = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<span class="hljs-number">64</span>);<br><br><span class="hljs-comment">// After minification the code to compute the default state and round</span><br><span class="hljs-comment">// constants is smaller than the output. More importantly, this serves as a</span><br><span class="hljs-comment">// good educational aide for anyone wondering where the magic numbers come</span><br><span class="hljs-comment">// from. No magic numbers FTW!</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> ((n - (n | <span class="hljs-number">0</span>)) * <span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>)) | <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">2</span>, nPrime = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (nPrime &lt; <span class="hljs-number">64</span>) &#123;<br>    <span class="hljs-comment">// isPrime() was in-lined from its original function form to save</span><br>    <span class="hljs-comment">// a few bytes</span><br>    <span class="hljs-keyword">var</span> isPrime = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes</span><br>    <span class="hljs-comment">// var sqrtN = pow(n, 1 / 2);</span><br>    <span class="hljs-comment">// So technically to determine if a number is prime you only need to</span><br>    <span class="hljs-comment">// check numbers up to the square root. However this function only runs</span><br>    <span class="hljs-comment">// once and we&#x27;re only computing the first 64 primes (up to 311), so on</span><br>    <span class="hljs-comment">// any modern CPU this whole function runs in a couple milliseconds.</span><br>    <span class="hljs-comment">// By going to n / 2 instead of sqrt(n) we net 8 byte savings and no</span><br>    <span class="hljs-comment">// scaling performance cost</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> factor = <span class="hljs-number">2</span>; factor &lt;= n / <span class="hljs-number">2</span>; factor++) &#123;<br>        <span class="hljs-keyword">if</span> (n % factor === <span class="hljs-number">0</span>) &#123;<br>            isPrime = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isPrime) &#123;<br>        <span class="hljs-keyword">if</span> (nPrime &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-variable constant_">DEFAULT_STATE</span>[nPrime] = <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-title function_">pow</span>(n, <span class="hljs-number">1</span> / <span class="hljs-number">2</span>));<br>        &#125;<br>        <span class="hljs-variable constant_">ROUND_CONSTANTS</span>[nPrime] = <span class="hljs-title function_">getFractionalBits</span>(<span class="hljs-title function_">pow</span>(n, <span class="hljs-number">1</span> / <span class="hljs-number">3</span>));<br><br>        nPrime++;<br>    &#125;<br><br>    n++;<br>&#125;<br><br><span class="hljs-comment">// For cross-platform support we need to ensure that all 32-bit words are</span><br><span class="hljs-comment">// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,</span><br><span class="hljs-comment">// so upon reading or writing to our ArrayBuffer we&#x27;ll only swap the bytes</span><br><span class="hljs-comment">// if our system is LittleEndian (which is about 99% of CPUs)</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">LittleEndian</span> = !!<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>([<span class="hljs-number">1</span>]).<span class="hljs-property">buffer</span>)[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertEndian</span>(<span class="hljs-params">word</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">LittleEndian</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="hljs-comment">// byte 1 -&gt; byte 4</span><br>            (word &gt;&gt;&gt; <span class="hljs-number">24</span>) |<br>            <span class="hljs-comment">// byte 2 -&gt; byte 3</span><br>            (((word &gt;&gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>) &lt;&lt; <span class="hljs-number">8</span>) |<br>            <span class="hljs-comment">// byte 3 -&gt; byte 2</span><br>            ((word &amp; <span class="hljs-number">0xff00</span>) &lt;&lt; <span class="hljs-number">8</span>) |<br>            <span class="hljs-comment">// byte 4 -&gt; byte 1</span><br>            (word &lt;&lt; <span class="hljs-number">24</span>)<br>        );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> word;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rightRotate</span>(<span class="hljs-params">word, bits</span>) &#123;<br>    <span class="hljs-keyword">return</span> (word &gt;&gt;&gt; bits) | (word &lt;&lt; (<span class="hljs-number">32</span> - bits));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// Copy default state</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">STATE</span> = <span class="hljs-variable constant_">DEFAULT_STATE</span>.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-comment">// Caching this reduces occurrences of &quot;.length&quot; in minified JavaScript</span><br>    <span class="hljs-comment">// 3 more byte savings! :D</span><br>    <span class="hljs-keyword">var</span> legth = data.<span class="hljs-property">length</span>;<br><br>    <span class="hljs-comment">// Pad data</span><br>    <span class="hljs-keyword">var</span> bitLength = legth * <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">var</span> newBitLength = (<span class="hljs-number">512</span> - ((bitLength + <span class="hljs-number">64</span>) % <span class="hljs-number">512</span>) - <span class="hljs-number">1</span>) + bitLength + <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">// &quot;bytes&quot; and &quot;words&quot; are stored BigEndian</span><br>    <span class="hljs-keyword">var</span> bytes = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(newBitLength / <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">var</span> words = <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(bytes.<span class="hljs-property">buffer</span>);<br><br>    bytes.<span class="hljs-title function_">set</span>(data, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// Append a 1</span><br>    bytes[legth] = <span class="hljs-number">0b10000000</span>;<br>    <span class="hljs-comment">// Store length in BigEndian</span><br>    words[words.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = <span class="hljs-title function_">convertEndian</span>(bitLength);<br><br>    <span class="hljs-comment">// Loop iterator (avoid two instances of &quot;var&quot;) -- saves 2 bytes</span><br>    <span class="hljs-keyword">var</span> round;<br><br>    <span class="hljs-comment">// Process blocks (512 bits / 64 bytes / 16 words at a time)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> block = <span class="hljs-number">0</span>; block &lt; newBitLength / <span class="hljs-number">32</span>; block += <span class="hljs-number">16</span>) &#123;<br>        <span class="hljs-keyword">var</span> workingState = <span class="hljs-variable constant_">STATE</span>.<span class="hljs-title function_">slice</span>();<br><br>        <span class="hljs-comment">// Rounds</span><br>        <span class="hljs-keyword">for</span> (round = <span class="hljs-number">0</span>; round &lt; <span class="hljs-number">64</span>; round++) &#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">MRound</span>;<br>            <span class="hljs-comment">// Expand message</span><br>            <span class="hljs-keyword">if</span> (round &lt; <span class="hljs-number">16</span>) &#123;<br>                <span class="hljs-comment">// Convert to platform Endianness for later math</span><br>                <span class="hljs-title class_">MRound</span> = <span class="hljs-title function_">convertEndian</span>(words[block + round]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">var</span> gamma0x = M[round - <span class="hljs-number">15</span>];<br>                <span class="hljs-keyword">var</span> gamma1x = M[round - <span class="hljs-number">2</span>];<br>                <span class="hljs-title class_">MRound</span> =<br>                    M[round - <span class="hljs-number">7</span>] + M[round - <span class="hljs-number">16</span>] + (<br>                        <span class="hljs-title function_">rightRotate</span>(gamma0x, <span class="hljs-number">7</span>) ^<br>                        <span class="hljs-title function_">rightRotate</span>(gamma0x, <span class="hljs-number">18</span>) ^<br>                        (gamma0x &gt;&gt;&gt; <span class="hljs-number">3</span>)<br>                    ) + (<br>                        <span class="hljs-title function_">rightRotate</span>(gamma1x, <span class="hljs-number">17</span>) ^<br>                        <span class="hljs-title function_">rightRotate</span>(gamma1x, <span class="hljs-number">19</span>) ^<br>                        (gamma1x &gt;&gt;&gt; <span class="hljs-number">10</span>)<br>                    )<br>                ;<br>            &#125;<br><br>            <span class="hljs-comment">// M array matches platform endianness</span><br>            M[round] = <span class="hljs-title class_">MRound</span> |= <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">// Computation</span><br>            <span class="hljs-keyword">var</span> t1 =<br>                (<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">6</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">11</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">4</span>], <span class="hljs-number">25</span>)<br>                ) +<br>                (<br>                    (workingState[<span class="hljs-number">4</span>] &amp; workingState[<span class="hljs-number">5</span>]) ^<br>                    (~workingState[<span class="hljs-number">4</span>] &amp; workingState[<span class="hljs-number">6</span>])<br>                ) + workingState[<span class="hljs-number">7</span>] + <span class="hljs-title class_">MRound</span> + <span class="hljs-variable constant_">ROUND_CONSTANTS</span>[round]<br>            ;<br>            <span class="hljs-keyword">var</span> t2 =<br>                (<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">2</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">13</span>) ^<br>                    <span class="hljs-title function_">rightRotate</span>(workingState[<span class="hljs-number">0</span>], <span class="hljs-number">22</span>)<br>                ) +<br>                (<br>                    (workingState[<span class="hljs-number">0</span>] &amp; workingState[<span class="hljs-number">1</span>]) ^<br>                    (workingState[<span class="hljs-number">2</span>] &amp; (workingState[<span class="hljs-number">0</span>] ^<br>                        workingState[<span class="hljs-number">1</span>]))<br>                )<br>            ;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">7</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                workingState[i] = workingState[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            workingState[<span class="hljs-number">0</span>] = (t1 + t2) | <span class="hljs-number">0</span>;<br>            workingState[<span class="hljs-number">4</span>] = (workingState[<span class="hljs-number">4</span>] + t1) | <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Update state</span><br>        <span class="hljs-keyword">for</span> (round = <span class="hljs-number">0</span>; round &lt; <span class="hljs-number">8</span>; round++) &#123;<br>            <span class="hljs-variable constant_">STATE</span>[round] = (<span class="hljs-variable constant_">STATE</span>[round] + workingState[round]) | <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Finally the state needs to be converted to BigEndian for output</span><br>    <span class="hljs-comment">// And we want to return a Uint8Array, not a Uint32Array</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">uint8Array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">uint32Array</span>(<br>        <span class="hljs-variable constant_">STATE</span>.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">convertEndian</span>(val);<br>        &#125;)<br>    ).<span class="hljs-property">buffer</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hmac</span>(<span class="hljs-params">key, data</span>) &#123;<br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-property">length</span> &gt; <span class="hljs-number">64</span>)<br>        key = <span class="hljs-title function_">sha256</span>(key);<br><br>    <span class="hljs-keyword">if</span> (key.<span class="hljs-property">length</span> &lt; <span class="hljs-number">64</span>) &#123;<br>        <span class="hljs-keyword">const</span> tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>        tmp.<span class="hljs-title function_">set</span>(key, <span class="hljs-number">0</span>);<br>        key = tmp;<br>    &#125;<br><br>    <span class="hljs-comment">// Generate inner and outer keys</span><br>    <span class="hljs-keyword">var</span> innerKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>    <span class="hljs-keyword">var</span> outerKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) &#123;<br>        innerKey[i] = <span class="hljs-number">0x36</span> ^ key[i];<br>        outerKey[i] = <span class="hljs-number">0x5c</span> ^ key[i];<br>    &#125;<br><br>    <span class="hljs-comment">// Append the innerKey</span><br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(data.<span class="hljs-property">length</span> + <span class="hljs-number">64</span>);<br>    msg.<span class="hljs-title function_">set</span>(innerKey, <span class="hljs-number">0</span>);<br>    msg.<span class="hljs-title function_">set</span>(data, <span class="hljs-number">64</span>);<br><br>    <span class="hljs-comment">// Has the previous message and append the outerKey</span><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">64</span> + <span class="hljs-number">32</span>);<br>    result.<span class="hljs-title function_">set</span>(outerKey, <span class="hljs-number">0</span>);<br>    result.<span class="hljs-title function_">set</span>(<span class="hljs-title function_">sha256</span>(msg), <span class="hljs-number">64</span>);<br><br>    <span class="hljs-comment">// Hash the previous message</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(result);<br>&#125;<br><br><span class="hljs-comment">// Convert a string to a Uint8Array, SHA-256 it, and convert back to string</span><br><span class="hljs-keyword">const</span> encoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">inputKey, inputData</span>) &#123;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-keyword">typeof</span> inputKey === <span class="hljs-string">&quot;string&quot;</span> ? encoder.<span class="hljs-title function_">encode</span>(inputKey) : inputKey;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">typeof</span> inputData === <span class="hljs-string">&quot;string&quot;</span> ? encoder.<span class="hljs-title function_">encode</span>(inputData) : inputData;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">hmac</span>(key, data);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">hex</span>(<span class="hljs-title function_">sha256</span>(encoder.<span class="hljs-title function_">encode</span>(str)));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hex</span>(<span class="hljs-params">bin</span>) &#123;<br>    <span class="hljs-keyword">return</span> bin.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val</span>) =&gt;</span><br>        acc + (<span class="hljs-string">&quot;00&quot;</span> + val.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)).<span class="hljs-title function_">substr</span>(-<span class="hljs-number">2</span>)<br>        , <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure></div>

<p><strong>使用</strong></p>
<div class="highlight-container" data-rel="Stylus"><figure class="iseeu highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">sign</span>(<span class="hljs-string">&quot;秘钥&quot;</span>, <span class="hljs-string">&quot;数据&quot;</span>))) <span class="hljs-comment">// qMlLziV3yzjVb3VgwWhbSTYLsCZXTB1jftypu04SUDM=</span><br></code></pre></td></tr></table></figure></div>


<h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">HMACEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br>  <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;secret&quot;</span><br>  <span class="hljs-keyword">return</span> CryptoJS.HmacMD5(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(HMACEncrypt())<span class="hljs-comment">// 20ca7a63f1f4a7047ffd6b722b45319a</span><br></code></pre></td></tr></table></figure></div>

<h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><div class="highlight-container" data-rel="Stata"><figure class="iseeu highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(&#x27;crypto-js&#x27;)<br><br>function desEncrypt() &#123;<br>  <span class="hljs-keyword">var</span> key = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desKey),<br>      iv = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desIv),<br>      srcs = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(text),<br>      <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span><br>      encrypted = CryptoJS.<span class="hljs-keyword">DES</span>.encrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: CryptoJS.mode.CBC,<br>        padding: CryptoJS.pad.Pkcs7<br>      &#125;);<br>  <span class="hljs-keyword">return</span> encrypted.<span class="hljs-keyword">toString</span>();<br>&#125;<br><br>function desDecrypt() &#123;<br>  <span class="hljs-keyword">var</span> key = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desKey),<br>      iv = CryptoJS.<span class="hljs-keyword">enc</span>.Utf8.<span class="hljs-keyword">parse</span>(desIv),<br>      srcs = encryptedData,<br>      <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span><br>      decrypted = CryptoJS.<span class="hljs-keyword">DES</span>.decrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: CryptoJS.mode.CBC,<br>        padding: CryptoJS.pad.Pkcs7<br>      &#125;);<br>  <span class="hljs-keyword">return</span> decrypted.<span class="hljs-keyword">toString</span>(CryptoJS.<span class="hljs-keyword">enc</span>.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 密钥</span><br><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 初始向量</span><br><br><span class="hljs-keyword">var</span> encryptedData = desEncrypt()<br><span class="hljs-keyword">var</span> decryptedData = desDecrypt()<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  p+4ovmk1n5YwN3dq5y8VqhngLKW//5MM/qDgtj2SOC6TpJaFgSKEVg==</span><br><span class="hljs-comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span><br><br></code></pre></td></tr></table></figure></div>

<h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tripleDesEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desKey),<br>      iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desIv),<br>      srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text),<br>      <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span><br>      encrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">TripleDES</span>.<span class="hljs-title function_">encrypt</span>(srcs, key, &#123;<br>        <span class="hljs-attr">iv</span>: iv,<br>        <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Iso10126</span><br>      &#125;);<br>  <span class="hljs-keyword">return</span> encrypted.<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">tripleDesDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desKey),<br>      iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(desIv),<br>      srcs = encryptedData,<br>      <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span><br>      decrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">TripleDES</span>.<span class="hljs-title function_">decrypt</span>(srcs, key, &#123;<br>        <span class="hljs-attr">iv</span>: iv,<br>        <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Iso10126</span><br>      &#125;);<br>  <span class="hljs-keyword">return</span> decrypted.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 密钥</span><br><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">tripleDesEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">tripleDesDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:   pl/nNfpIrejwK+/X87VmGZIbS3kOB+IpFcx/97wpR4AO6q9HGjxb4w==</span><br><span class="hljs-comment">// 解密字符串:   https://www.cnblogs.com/zichliang</span><br><br></code></pre></td></tr></table></figure></div>

<h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aesEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesKey),<br>        iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesIv),<br>        srcs = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(text),<br>        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span><br>        encrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(srcs, key, &#123;<br>            <span class="hljs-attr">iv</span>: iv,<br>            <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;);<br>    <span class="hljs-keyword">return</span> encrypted.<span class="hljs-title function_">toString</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aesDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesKey),<br>        iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(aesIv),<br>        srcs = encryptedData,<br>        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span><br>        decrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(srcs, key, &#123;<br>            <span class="hljs-attr">iv</span>: iv,<br>            <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>            <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span><br>        &#125;);<br>    <span class="hljs-keyword">return</span> decrypted.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span>       <span class="hljs-comment">// 待加密对象</span><br><span class="hljs-keyword">var</span> aesKey = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>   <span class="hljs-comment">// 密钥，16 倍数</span><br><span class="hljs-keyword">var</span> aesIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量，16 倍数</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">aesEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">aesDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  /q8i+1GN8yfzIb8CaEJfDOfDQ74in+XzQZYBtKF2wkAB6dM1qbBZ3HJVlY+kHDE3</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span><br></code></pre></td></tr></table></figure></div>

<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RC4Encrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.RC4.encrypt(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RC4Decrypt</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang&quot;</span><br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;12345678ASDFG&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = RC4Encrypt()<br><span class="hljs-keyword">var</span> decryptedData = RC4Decrypt()<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  U2FsdGVkX19/bT2W57mzjwoF5Fc3Zb4WiyDU+MiNMmHfdJvZeScl0EW9yJWCPiRrsA==</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang</span><br></code></pre></td></tr></table></figure></div>

<h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><div class="highlight-container" data-rel="Arcade"><figure class="iseeu highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><br><span class="hljs-keyword">var</span> CryptoJS = require(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rabbitEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.encrypt(<span class="hljs-built_in">text</span>, key).toString();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rabbitDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">text</span> = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span><br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;1234567ASDFG&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = rabbitEncrypt()<br><span class="hljs-keyword">var</span> decryptedData = rabbitDecrypt()<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">// 加密字符串:  U2FsdGVkX1/pYbHvbNff3/RNpso4yRKIX0XDFta8hoLNxe52K8HSmF+XV8ayYqucTKVPP6AJtGczXS7U9kkxHnw=</span><br><span class="hljs-comment">// 解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span><br></code></pre></td></tr></table></figure></div>

<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="使用-node-rsa"><a href="#使用-node-rsa" class="headerlink" title="使用 node-rsa"></a>使用 node-rsa</h2><p>需要安装一个库 </p>
<blockquote>
<p>npm install node-rsa</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 node-rsa 加密模块</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">NodeRSA</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rsaEncrypt</span>(<span class="hljs-params"></span>) &#123;<br>    pubKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(publicKey,<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);<br>    <span class="hljs-keyword">var</span> encryptedData = pubKey.<span class="hljs-title function_">encrypt</span>(text, <span class="hljs-string">&#x27;base64&#x27;</span>);<br>    <span class="hljs-keyword">return</span> encryptedData<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rsaDecrypt</span>(<span class="hljs-params"></span>) &#123;<br>    priKey = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(privatekey,<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);<br>    <span class="hljs-keyword">var</span> decryptedData = priKey.<span class="hljs-title function_">decrypt</span>(encryptedData, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> decryptedData<br>&#125;<br><br><span class="hljs-keyword">var</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeRSA</span>(&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">512</span>&#125;);                    <span class="hljs-comment">//生成512位秘钥</span><br><span class="hljs-keyword">var</span> publicKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);    <span class="hljs-comment">//导出公钥</span><br><span class="hljs-keyword">var</span> privatekey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);  <span class="hljs-comment">//导出私钥</span><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/16653303.html&quot;</span><br><br><span class="hljs-keyword">var</span> encryptedData = <span class="hljs-title function_">rsaEncrypt</span>()<br><span class="hljs-keyword">var</span> decryptedData = <span class="hljs-title function_">rsaDecrypt</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;公钥:\n&quot;</span>, publicKey)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;私钥:\n&quot;</span>, privatekey)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">公钥:</span><br><span class="hljs-comment"> -----BEGIN PUBLIC KEY-----</span><br><span class="hljs-comment">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAN7JoMDNvvpB/po2OMSeSKsromfP5EyI</span><br><span class="hljs-comment">0fAz6XDVwqdTUBwwAArLlqIzmVNK0yi4nlbj5eF+O8ZjRkRQ6xKP/CMCAwEAAQ==</span><br><span class="hljs-comment">-----END PUBLIC KEY-----</span><br><span class="hljs-comment">私钥:</span><br><span class="hljs-comment"> -----BEGIN PRIVATE KEY-----</span><br><span class="hljs-comment">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA3smgwM2++kH+mjY4</span><br><span class="hljs-comment">xJ5IqyuiZ8/kTIjR8DPpcNXCp1NQHDAACsuWojOZU0rTKLieVuPl4X47xmNGRFDr</span><br><span class="hljs-comment">Eo/8IwIDAQABAkEArI0Ps6TnIJ9SmZAbYbWSZPjTvYHXuatSpq8eQ+Vb8Ql003G5</span><br><span class="hljs-comment">Y2FIoWpQX1jQ9/DsxEZ/1u+71bl08z1eONz2KQIhAPgLZOKanhDDaOn5sO7Y2RM3</span><br><span class="hljs-comment">TyLS08mCGNGQxEhkEttFAiEA5e7bvnrSNh1lcF/QTxkWPGoXb9kxPljm49CfiTS9</span><br><span class="hljs-comment">PEcCIDzxX7olTwzDVjWWeZhVgxArmK/vqMVrx3lF3lQC8ncZAiBlpY5nSoybd6tc</span><br><span class="hljs-comment">Xj8MeJ6n3o6112I5mbuYgqXEVhhCCQIgY6vinhOzMF0dX9MNjBm8x1mUCd4XG2TN</span><br><span class="hljs-comment">QQcOik3RIGw=</span><br><span class="hljs-comment">-----END PRIVATE KEY-----</span><br><span class="hljs-comment">加密字符串:  ZolvYwjFqOp1Yldui7rm75mSN5kz7533nc3B3H6xZGQR9v0elhbcjmI9vXaBsgdLNTuyoVk3bfzWfQdeIpvCpcBCTGe1HG9KrSBYDiWJc4vBgVBz8D57/XaS1zjM0kuAJ/ELu4os7XG5lMQbRbFhHXs7zQsIBq6/m2IZdGWx7HjB2jiQBQPMfszdQUOwQA</span><br><span class="hljs-comment">bM5o7lRvUgdMVaZkEWpOTEybmUX4kxBP5CvNtB86oTRUw+U7Ex7QB8lWj33hoKvh70</span><br><span class="hljs-comment">解密字符串:  https://www.cnblogs.com/zichliang/p/16653303.html</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></div>

<h2 id="使用自带模块crypto"><a href="#使用自带模块crypto" class="headerlink" title="使用自带模块crypto:"></a>使用自带模块crypto:</h2><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> nodeRSA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<br><br><span class="hljs-comment">// 生成一个1024长度的密钥对</span><br><span class="hljs-keyword">const</span> key = <span class="hljs-keyword">new</span> <span class="hljs-title function_">nodeRSA</span>(&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1024</span>&#125;);<br><span class="hljs-comment">// 导出公钥</span><br><span class="hljs-keyword">const</span> publicKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;public&#x27;</span>);<br><span class="hljs-comment">// 导出私钥</span><br><span class="hljs-keyword">const</span> privateKey = key.<span class="hljs-title function_">exportKey</span>(<span class="hljs-string">&#x27;private&#x27;</span>);<br><br><span class="hljs-keyword">const</span> secret = <span class="hljs-string">&#x27;https://www.cnblogs.com/zichliang/p/16653303.html&#x27;</span><br><span class="hljs-comment">// 使用私钥加密，公钥解密</span><br><span class="hljs-keyword">const</span> encrypt = crypto.<span class="hljs-title function_">privateEncrypt</span>(privateKey, <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(secret));<br><span class="hljs-keyword">const</span> decrypt = crypto.<span class="hljs-title function_">publicDecrypt</span>(publicKey, encrypt);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加密后：&#x27;</span>, encrypt.<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;base64&#x27;</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;解密后：&#x27;</span>, decrypt.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure></div>


<h1 id="RSA-长加密"><a href="#RSA-长加密" class="headerlink" title="RSA 长加密"></a>RSA 长加密</h1><p>这个加密是真的麻烦 ，而且还需要导入jsencrypt.min.js<br>这里贴上 GitHub地址 <a class="link"   href="https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js" >https://github.com/wangqinglongDo/github_demo/blob/master/libs/jsencrypt.min.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>对了 还需要补环境 而且解密也不是很好用，如果有大佬知道如何解密的 希望在评论区告诉我</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> encrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSEncrypt</span>();<br><span class="hljs-keyword">var</span> publickKey = <span class="hljs-string">&quot;-----BEGIN PUBLIC KEY-----\</span><br><span class="hljs-string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLFb8qp1vRFvi/qfgi1Wg7Mi8l\</span><br><span class="hljs-string">LcpfAc+tgpyD7aFW9QquQVMm/jG1IJZVQ6LsdkI7TiDutMCzOMCBXbdSC9BCIAGA\</span><br><span class="hljs-string">L2Sz3cYVlGb1kYSM0ZMcUMIK5eF4Bptke070XHvbi8wArtysJ0l71RHDd786tNbG\</span><br><span class="hljs-string">W0hDSw3zAqTErbxFaQIDAQAB\</span><br><span class="hljs-string">-----END PUBLIC KEY-----\</span><br><span class="hljs-string">&quot;</span><br>encrypt.<span class="hljs-title function_">setPublicKey</span>(publickKey);  <span class="hljs-comment">//设置公钥加密证书</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;https://www.cnblogs.com/zichliang/p/17265960.html&quot;</span>;<br><span class="hljs-keyword">var</span> commonEncodeData = encrypt.<span class="hljs-title function_">encryptLong</span>(data);   <span class="hljs-comment">// 普通的加密</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(commonEncodeData)<br><br><span class="hljs-keyword">var</span> cnEscapeData = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">btoa</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">encodeURIComponent</span>(data));  <span class="hljs-comment">//base64 解密后的加密</span><br><span class="hljs-keyword">var</span> encryptData = encrypt.<span class="hljs-title function_">encryptLong</span>(cnEscapeData);  <span class="hljs-comment">//获取加密后数据。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(encryptData)<br></code></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang加密解密算法</title>
    <url>/2024/08/26/Golang%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#md5-%25E5%258A%25A0%25E5%25AF%2586%25E2%2580%2594%25E2%2580%2594%25E4%25B8%258D%25E5%258F%25AF%25E9%2580%2586">md5 加密——不可逆</a><ul>
<li><a href="#%25E7%25AC%25AC%25E4%25B8%2580%25E7%25A7%258D">第一种</a></li>
<li><a href="#%25E7%25AC%25AC%25E4%25BA%258C%25E7%25A7%258D">第二种</a></li>
</ul>
</li>
<li><a href="#hmacsha-%25E5%258A%25A0%25E5%25AF%2586%25E2%2580%2594%25E2%2580%2594%25E4%25B8%258D%25E5%258F%25AF%25E9%2580%2586">hmacsha 加密——不可逆</a><ul>
<li><a href="#hmac-md5%25E5%258A%25A0%25E5%25AF%2586">hmac-md5加密</a></li>
<li><a href="#hamacsha1-%25E5%258A%25A0%25E5%25AF%2586">hamacsha1 加密</a></li>
<li><a href="#hamacsha-256-%25E5%258A%25A0%25E5%25AF%2586">hamacsha 256 加密</a></li>
<li><a href="#hmacsha512%25E5%258A%25A0%25E5%25AF%2586">hmacsha512加密</a></li>
<li><a href="#hamasha-%25E8%25B0%2583%25E7%2594%25A8">hamasha 调用</a></li>
</ul>
</li>
<li><a href="#Sha-%25E5%258A%25A0%25E5%25AF%2586%25E2%2580%2594%25E2%2580%2594%25E4%25B8%258D%25E5%258F%25AF%25E9%2580%2586">Sha 加密——不可逆</a><ul>
<li><a href="#sha1">sha1</a></li>
<li><a href="#sha256">sha256</a></li>
<li><a href="#sha512">sha512</a></li>
<li><a href="#sha%25E8%25B0%2583%25E7%2594%25A8">sha调用</a></li>
</ul>
</li>
<li><a href="#base-%25E5%258A%25A0%25E5%25AF%2586-%25E8%25A7%25A3%25E5%25AF%2586">base 加密 解密</a><ul>
<li><a href="#%25E5%258A%25A0%25E5%25AF%2586">加密</a></li>
<li><a href="#%25E8%25A7%25A3%25E5%25AF%2586">解密</a></li>
<li><a href="#base64--%25E8%25B0%2583%25E7%2594%25A8">base64 调用</a></li>
</ul>
</li>
<li><a href="#AES-%25E5%258A%25A0%25E5%25AF%2586">AES 加密</a><ul>
<li><a href="#CBC%25E6%2596%25B9%25E5%25BC%258F">CBC方式</a></li>
<li><a href="#ECB%25E6%2596%25B9%25E5%25BC%258F">ECB方式</a></li>
<li><a href="#CFB-%25E6%2596%25B9%25E5%25BC%258F">CFB 方式</a></li>
</ul>
</li>
<li><a href="#RSA%25E5%258A%25A0%25E5%25AF%2586">RSA加密</a><ul>
<li><a href="#RSA%25E5%258A%25A0%25E5%25AF%2586">RSA加密</a></li>
<li><a href="#RSA%25E5%2588%2586%25E6%25AE%25B5%25E5%258A%25A0%25E5%25AF%2586">RSA分段加密</a></li>
</ul>
</li>
<li><a href="#DES%25E5%258A%25A0%25E5%25AF%2586">DES加密</a><ul>
<li><a href="#%25E5%2586%2585%25E7%25BD%25AE%25E5%25BA%2593%25E5%25AE%258C%25E6%2588%2590">内置库完成</a></li>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8%25E7%25AC%25AC%25E4%25B8%2589%25E6%2596%25B9%25E5%25BA%2593">使用第三方库</a></li>
</ul>
</li>
<li><a href="#3DES%25E5%258A%25A0%25E5%25AF%2586%25E7%25AE%2597%25E6%25B3%2595">3DES加密算法</a><ul>
<li><a href="#%25E5%258C%2585%25E6%258B%25AC-Des%25E7%259A%2584%25E5%258A%25A0%25E5%25AF%2586%25E8%25A7%25A3%25E5%25AF%2586">包括 Des的加密解密</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<hr>
<h1 id="md5-加密——不可逆"><a href="#md5-加密——不可逆" class="headerlink" title="md5 加密——不可逆"></a>md5 加密——不可逆</h1><p>MD5信息摘要算法是一种被广泛使用的密码散列函数，可以产生出一个128位（16进制，32个字符）的散列值（hash value），用于确保信息传输完整一致。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/md5&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br></code></pre></td></tr></table></figure></div>
<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MD5Str md5验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MD5Str</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := md5.New()<br> h.Write([]<span class="hljs-type">byte</span>(src)) <span class="hljs-comment">// 需要加密的字符串为</span><br> fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))) <span class="hljs-comment">// 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MD5Str2 md5验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MD5Str2</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%x&quot;</span>, md5.Sum([]<span class="hljs-type">byte</span>(src)))<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h1 id="hmacsha-加密——不可逆"><a href="#hmacsha-加密——不可逆" class="headerlink" title="hmacsha 加密——不可逆"></a>hmacsha 加密——不可逆</h1><p>HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，<br>它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。<br>和我们自定义的加salt算法不同，Hmac算法针对所有哈希算法都通用，无论是MD5还是SHA-1。采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。</p>
<h2 id="hmac-md5加密"><a href="#hmac-md5加密" class="headerlink" title="hmac-md5加密"></a>hmac-md5加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//key随意设置 data 要加密数据</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hmac</span><span class="hljs-params">(key, data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-comment">// 创建对应的md5哈希加密算法</span><br>    hash:= hmac.New(md5.New, []<span class="hljs-type">byte</span>(key)) <br><br>    hash.Write([]<span class="hljs-type">byte</span>(data))<br><br>    <span class="hljs-keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br><br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<h2 id="hamacsha1-加密"><a href="#hamacsha1-加密" class="headerlink" title="hamacsha1 加密"></a>hamacsha1 加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSha1</span><span class="hljs-params">(src, key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha1.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h2 id="hamacsha-256-加密"><a href="#hamacsha-256-加密" class="headerlink" title="hamacsha 256 加密"></a>hamacsha 256 加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSHA256 hmacSha256验证  key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA256</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h2 id="hmacsha512加密"><a href="#hmacsha512加密" class="headerlink" title="hmacsha512加密"></a>hmacsha512加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HmacSHA512 hmacSha512验证</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA512</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha512.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h2 id="hamasha-调用"><a href="#hamasha-调用" class="headerlink" title="hamasha 调用"></a>hamasha 调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/hmac&quot;</span><br> <span class="hljs-string">&quot;crypto/md5&quot;</span><br> <span class="hljs-string">&quot;crypto/sha1&quot;</span><br> <span class="hljs-string">&quot;crypto/sha256&quot;</span><br> <span class="hljs-string">&quot;crypto/sha512&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// Hmac hmac验证 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hmac</span><span class="hljs-params">(key, data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><br> hash := hmac.New(md5.New, []<span class="hljs-type">byte</span>(key)) <span class="hljs-comment">// 创建对应的md5哈希加密算法</span><br><br> hash.Write([]<span class="hljs-type">byte</span>(data))<br><br> <span class="hljs-keyword">return</span> hex.EncodeToString(hash.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br><br>&#125;<br><br><span class="hljs-comment">// HmacSHA256 hmacSha256加密  key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA256</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// HmacSHA512 hmacSha512加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSHA512</span><span class="hljs-params">(key, src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha512.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// HmacSha1 hmacSha1加密 key随意设置 data 要加密数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HmacSha1</span><span class="hljs-params">(src, key <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> m := hmac.New(sha1.New, []<span class="hljs-type">byte</span>(key))<br> m.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(m.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// SHA256Str sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256Str</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> h.Write([]<span class="hljs-type">byte</span>(src)) <span class="hljs-comment">// 需要加密的字符串为</span><br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> hmac_ := Hmac(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamcsha1 := HmacSha1(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamcsha256 := HmacSHA256(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> hamacsha512 := HmacSHA512(<span class="hljs-string">&quot;hybpjx&quot;</span>, <span class="hljs-string">&quot;始識&quot;</span>)<br> fmt.Println(hmac_)<br> fmt.Println(hamcsha1)<br> fmt.Println(hamcsha256)<br> fmt.Println(hamacsha512)<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>d8801f70df7891764116e1ac003f7189</p>
<p>60d68e01c8a86f3b87e4e147e9f0fadce2a69661</p>
<p>b3f8ddf991288036864761a55046877adfe4f78ec9a89bb63932af92689b139f</p>
<p>b9b1fca0fe91522482ee1b2161e57d67482af6ef371614365b918c31ce774f9126ed627e378a063145f404ff2de7bd84f8e4798c385662ef4749e58e9209ca63</p>
</blockquote>
<h1 id="Sha-加密——不可逆"><a href="#Sha-加密——不可逆" class="headerlink" title="Sha 加密——不可逆"></a>Sha 加密——不可逆</h1><h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><p>SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sha1</span><span class="hljs-params">(data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> sha1_ := sha1.New()<br> sha1_.Write([]<span class="hljs-type">byte</span>(data))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h2 id="sha256"><a href="#sha256" class="headerlink" title="sha256"></a>sha256</h2><p>SHA256算法使用的哈希值长度是256位。这是一个抽象类。此类的唯一实现是SHA256Managed。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SHA256 sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h2 id="sha512"><a href="#sha512" class="headerlink" title="sha512"></a>sha512</h2><p>SHA (Secure Hash Algorithm，译作安全散列算法) 是美国国家安全局 (NSA) 设计，美国国家标准与技术研究院 (NIST) 发布的一系列密码散列函数。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SHA512 sha512加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA512</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha512.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h2 id="sha调用"><a href="#sha调用" class="headerlink" title="sha调用"></a>sha调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/sha1&quot;</span><br> <span class="hljs-string">&quot;crypto/sha256&quot;</span><br> <span class="hljs-string">&quot;crypto/sha512&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sha1</span><span class="hljs-params">(data <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> sha1_ := sha1.New()<br> sha1_.Write([]<span class="hljs-type">byte</span>(data))<br> <span class="hljs-keyword">return</span> hex.EncodeToString(sha1_.Sum([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)))<br>&#125;<br><br><span class="hljs-comment">// SHA256 sha256加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA256</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha256.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-comment">// SHA512 sha512加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SHA512</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> h := sha512.New()<br> <span class="hljs-comment">// 需要加密的字符串为</span><br> h.Write([]<span class="hljs-type">byte</span>(src))<br> <span class="hljs-comment">// fmt.Printf(&quot;%s\n&quot;, hex.EncodeToString(h.Sum(nil))) // 输出加密结果</span><br> <span class="hljs-keyword">return</span> hex.EncodeToString(h.Sum(<span class="hljs-literal">nil</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> _sha1 := Sha1(<span class="hljs-string">&quot;始識&quot;</span>)<br> _sha256 := SHA256(<span class="hljs-string">&quot;始識&quot;</span>)<br> _sha512 := SHA512(<span class="hljs-string">&quot;始識&quot;</span>)<br> fmt.Println(_sha1)<br> fmt.Println(_sha256)<br> fmt.Println(_sha512)<br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>7bac01cc58a26f3cb280b0466794a89441279946</p>
<p>6ef99e6d3fe34a46afcdc438435728fe95ffdab18e389ddd31609edd6729b11d</p>
<p>0c04e9b79f488646d0eac6f65468248507939d643cc92709b14eb0d18d8f13db509ed5ccd3312d6c234408185a4611a42525dce9e8d32255640f56a2f836635a</p>
</blockquote>
<h1 id="base-加密-解密"><a href="#base-加密-解密" class="headerlink" title="base 加密 解密"></a>base 加密 解密</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// BASE64StdEncode base编码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdEncode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="hljs-type">byte</span>(src))<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// BASE64StdDecode base解码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdDecode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> a, err := base64.StdEncoding.DecodeString(src)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  _ = fmt.Errorf(<span class="hljs-string">&quot;解密失败,%v\n&quot;</span>, err)<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure></div>
<h2 id="base64-调用"><a href="#base64-调用" class="headerlink" title="base64  调用"></a>base64  调用</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// BASE64StdEncode base编码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdEncode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> <span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="hljs-type">byte</span>(src))<br>&#125;<br><br><span class="hljs-comment">// BASE64StdDecode base解码</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BASE64StdDecode</span><span class="hljs-params">(src <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br> a, err := base64.StdEncoding.DecodeString(src)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  _ = fmt.Errorf(<span class="hljs-string">&quot;解密失败,%v\n&quot;</span>, err)<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(a)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> encodeBase64 := BASE64StdEncode(<span class="hljs-string">&quot;hybpjx&quot;</span>)<br> decodeBase64 := BASE64StdDecode(encodeBase64)<br> fmt.Println(encodeBase64)<br> fmt.Println(decodeBase64)<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<blockquote>
<p>aHlicGp4<br>hybpjx</p>
</blockquote>
<h1 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h1><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/12843286/1662199524599-a6b77cb9-25c9-4f5b-99c2-493ab50bb7ec.png#clientId=uae04fe37-f91f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub1ee8990&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3573&originWidth=1993&originalType=url&ratio=1&rotation=0&showTitle=false&size=1304823&status=done&style=none&taskId=u8b08ff15-15f1-45c8-b63a-6e18c32ee86&title=" alt="image.png"><br><strong>由于加密和解密的秘钥是相同的，所以AES为对称加密</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS7Padding</span><span class="hljs-params">(ciphertext []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(ciphertext)%blockSize<br> padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ciphertext, padtext...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PKCS7UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> length := <span class="hljs-built_in">len</span>(origData)<br> unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br> <span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br><br><span class="hljs-comment">//AES加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncrypt</span><span class="hljs-params">(origData, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br> blockSize := block.BlockSize()<br> origData = PKCS7Padding(origData, blockSize)<br> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize])<br> crypted := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(origData))<br> blockMode.CryptBlocks(crypted, origData)<br> <span class="hljs-keyword">return</span> crypted, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//AES解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecrypt</span><span class="hljs-params">(crypted, key []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br> blockSize := block.BlockSize()<br> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])<br> origData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(crypted))<br> blockMode.CryptBlocks(origData, crypted)<br> origData = PKCS7UnPadding(origData)<br> <span class="hljs-keyword">return</span> origData, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> text := <span class="hljs-string">&quot;今晚打老虎&quot;</span><br> AesKey := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;0f90023fc9ae101e&quot;</span>) <span class="hljs-comment">//秘钥长度为16的倍数</span><br> fmt.Printf(<span class="hljs-string">&quot;明文: %s\n秘钥: %s\n&quot;</span>, text, <span class="hljs-type">string</span>(AesKey))<br> encrypted, err := AesEncrypt([]<span class="hljs-type">byte</span>(text), AesKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> fmt.Printf(<span class="hljs-string">&quot;加密后: %s\n&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> origin, err := AesDecrypt(encrypted, AesKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> fmt.Printf(<span class="hljs-string">&quot;解密后明文: %s\n&quot;</span>, <span class="hljs-type">string</span>(origin))<br>&#125;<br><br><br></code></pre></td></tr></table></figure></div>


<h2 id="CBC方式"><a href="#CBC方式" class="headerlink" title="CBC方式"></a>CBC方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptCBC</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> <span class="hljs-comment">// 分组秘钥</span><br> <span class="hljs-comment">// NewCipher该函数限制了输入k的长度必须为16, 24或者32</span><br> block, _ := aes.NewCipher(key)<br> blockSize := block.BlockSize()                              <span class="hljs-comment">// 获取秘钥块的长度</span><br> origData = pkcs5Padding(origData, blockSize)                <span class="hljs-comment">// 补全码</span><br> blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) <span class="hljs-comment">// 加密模式</span><br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(origData))                     <span class="hljs-comment">// 创建数组</span><br> blockMode.CryptBlocks(encrypted, origData)                  <span class="hljs-comment">// 加密</span><br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptCBC</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> block, _ := aes.NewCipher(key)                              <span class="hljs-comment">// 分组秘钥</span><br> blockSize := block.BlockSize()                              <span class="hljs-comment">// 获取秘钥块的长度</span><br> blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) <span class="hljs-comment">// 加密模式</span><br> decrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(encrypted))                    <span class="hljs-comment">// 创建数组</span><br> blockMode.CryptBlocks(decrypted, encrypted)                 <span class="hljs-comment">// 解密</span><br> decrypted = pkcs5UnPadding(decrypted)                       <span class="hljs-comment">// 去除补全码</span><br> <span class="hljs-keyword">return</span> decrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5Padding</span><span class="hljs-params">(ciphertext []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(ciphertext)%blockSize<br> padtext := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(ciphertext, padtext...)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5UnPadding</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> length := <span class="hljs-built_in">len</span>(origData)<br> unpadding := <span class="hljs-type">int</span>(origData[length<span class="hljs-number">-1</span>])<br> <span class="hljs-keyword">return</span> origData[:(length - unpadding)]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ CBC模式 --------------------&quot;</span>)<br> encrypted := AesEncryptCBC(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptCBC(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<h2 id="ECB方式"><a href="#ECB方式" class="headerlink" title="ECB方式"></a>ECB方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptECB</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> cipher, _ := aes.NewCipher(generateKey(key))<br> length := (<span class="hljs-built_in">len</span>(origData) + aes.BlockSize) / aes.BlockSize<br> plain := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, length*aes.BlockSize)<br> <span class="hljs-built_in">copy</span>(plain, origData)<br> pad := <span class="hljs-type">byte</span>(<span class="hljs-built_in">len</span>(plain) - <span class="hljs-built_in">len</span>(origData))<br> <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(origData); i &lt; <span class="hljs-built_in">len</span>(plain); i++ &#123;<br>  plain[i] = pad<br> &#125;<br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(plain))<br> <span class="hljs-comment">// 分组分块加密</span><br> <span class="hljs-keyword">for</span> bs, be := <span class="hljs-number">0</span>, cipher.BlockSize(); bs &lt;= <span class="hljs-built_in">len</span>(origData); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;<br>  cipher.Encrypt(encrypted[bs:be], plain[bs:be])<br> &#125;<br><br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptECB</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> cipher, _ := aes.NewCipher(generateKey(key))<br> decrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(encrypted))<br> <span class="hljs-comment">//</span><br> <span class="hljs-keyword">for</span> bs, be := <span class="hljs-number">0</span>, cipher.BlockSize(); bs &lt; <span class="hljs-built_in">len</span>(encrypted); bs, be = bs+cipher.BlockSize(), be+cipher.BlockSize() &#123;<br>  cipher.Decrypt(decrypted[bs:be], encrypted[bs:be])<br> &#125;<br><br> trim := <span class="hljs-number">0</span><br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(decrypted) &gt; <span class="hljs-number">0</span> &#123;<br>  trim = <span class="hljs-built_in">len</span>(decrypted) - <span class="hljs-type">int</span>(decrypted[<span class="hljs-built_in">len</span>(decrypted)<span class="hljs-number">-1</span>])<br> &#125;<br><br> <span class="hljs-keyword">return</span> decrypted[:trim]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateKey</span><span class="hljs-params">(key []<span class="hljs-type">byte</span>)</span></span> (genKey []<span class="hljs-type">byte</span>) &#123;<br> genKey = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">16</span>)<br> <span class="hljs-built_in">copy</span>(genKey, key)<br> <span class="hljs-keyword">for</span> i := <span class="hljs-number">16</span>; i &lt; <span class="hljs-built_in">len</span>(key); &#123;<br>  <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span> &amp;&amp; i &lt; <span class="hljs-built_in">len</span>(key); j, i = j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span> &#123;<br>   genKey[j] ^= key[i]<br>  &#125;<br> &#125;<br> <span class="hljs-keyword">return</span> genKey<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ ECB模式 --------------------&quot;</span>)<br> encrypted := AesEncryptECB(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptECB(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h2 id="CFB-方式"><a href="#CFB-方式" class="headerlink" title="CFB 方式"></a>CFB 方式</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/aes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;io&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesEncryptCFB</span><span class="hljs-params">(origData []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (encrypted []<span class="hljs-type">byte</span>) &#123;<br> block, err := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> encrypted = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, aes.BlockSize+<span class="hljs-built_in">len</span>(origData))<br> iv := encrypted[:aes.BlockSize]<br> <span class="hljs-keyword">if</span> _, err := io.ReadFull(rand.Reader, iv); err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> stream := cipher.NewCFBEncrypter(block, iv)<br> stream.XORKeyStream(encrypted[aes.BlockSize:], origData)<br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AesDecryptCFB</span><span class="hljs-params">(encrypted []<span class="hljs-type">byte</span>, key []<span class="hljs-type">byte</span>)</span></span> (decrypted []<span class="hljs-type">byte</span>) &#123;<br> block, _ := aes.NewCipher(key)<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(encrypted) &lt; aes.BlockSize &#123;<br>  <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;ciphertext too short&quot;</span>)<br> &#125;<br> iv := encrypted[:aes.BlockSize]<br> encrypted = encrypted[aes.BlockSize:]<br><br> stream := cipher.NewCFBDecrypter(block, iv)<br> stream.XORKeyStream(encrypted, encrypted)<br> <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> origData := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;460154561234&quot;</span>) <span class="hljs-comment">// 待加密的数据</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;9876787656785679&quot;</span>)  <span class="hljs-comment">// 加密的密钥</span><br> log.Println(<span class="hljs-string">&quot;原文：&quot;</span>, <span class="hljs-type">string</span>(origData))<br><br> log.Println(<span class="hljs-string">&quot;------------------ CFB模式 --------------------&quot;</span>)<br> encrypted := AesEncryptCFB(origData, key)<br> log.Println(<span class="hljs-string">&quot;密文(hex)：&quot;</span>, hex.EncodeToString(encrypted))<br> log.Println(<span class="hljs-string">&quot;密文(base64)：&quot;</span>, base64.StdEncoding.EncodeToString(encrypted))<br> decrypted := AesDecryptCFB(encrypted, key)<br> log.Println(<span class="hljs-string">&quot;解密结果：&quot;</span>, <span class="hljs-type">string</span>(decrypted))<br>&#125;<br><br></code></pre></td></tr></table></figure></div>

<h1 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h1><p>RSA是一种基于公钥密码体制的优秀加密算法，1978年由美国(MIT)的李维斯特(Rivest)、沙米尔(Shamir)、艾德曼(Adleman)提的。<br>RSA算法是一种分组密码体制算法，它的保密强度是建立在具有大素数因子的合数其因子分解是困难的（基于大数分解的难度）。<br>公钥和私钥是一对大素数的函数，从一个公钥和密文中恢复出明文的难度等价于分解两个大素数之积。<br>RSA得到了世界上的最广泛的应用，ISO在1992年颁布的国际标准X.509中,将RSA算法正式纳入国际标准。</p>
<h2 id="RSA加密-1"><a href="#RSA加密-1" class="headerlink" title="RSA加密"></a>RSA加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;crypto/rsa&quot;</span><br> <span class="hljs-string">&quot;crypto/x509&quot;</span><br> <span class="hljs-string">&quot;encoding/pem&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><br><br><br><span class="hljs-comment">// GenerateRSAKey 生成RSA私钥和公钥，保存到文件中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRSAKey</span><span class="hljs-params">(bits <span class="hljs-type">int</span>)</span></span>&#123;<br> <span class="hljs-comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span><br> <span class="hljs-comment">//Reader是一个全局、共享的密码用强随机数生成器</span><br> privateKey, err := rsa.GenerateKey(rand.Reader, bits)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//保存私钥</span><br> <span class="hljs-comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span><br> <span class="hljs-comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span><br> X509PrivateKey,err := x509.MarshalPKCS8PrivateKey(privateKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//使用pem格式对x509输出的内容进行编码</span><br> <span class="hljs-comment">//创建文件保存私钥</span><br> privateFile, err := os.Create(<span class="hljs-string">&quot;private.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> privateFile.Close()<br> <span class="hljs-comment">//构建一个pem.Block结构体对象</span><br> privateBlock:= pem.Block&#123;Type: <span class="hljs-string">&quot;PRIVATE KEY&quot;</span>,Bytes:X509PrivateKey&#125;<br> <span class="hljs-comment">//将数据保存到文件</span><br> pem.Encode(privateFile,&amp;privateBlock)<br> <span class="hljs-comment">//保存公钥</span><br> <span class="hljs-comment">//获取公钥的数据</span><br> publicKey:=privateKey.PublicKey<br> <span class="hljs-comment">//X509对公钥编码</span><br> X509PublicKey,err:=x509.MarshalPKIXPublicKey(&amp;publicKey)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//pem格式编码</span><br> <span class="hljs-comment">//创建用于保存公钥的文件</span><br> publicFile, err := os.Create(<span class="hljs-string">&quot;public.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> publicFile.Close()<br> <span class="hljs-comment">//创建一个pem.Block结构体对象</span><br> publicBlock:= pem.Block&#123;Type: <span class="hljs-string">&quot;Public Key&quot;</span>,Bytes:X509PublicKey&#125;<br> <span class="hljs-comment">//保存到文件</span><br> pem.Encode(publicFile,&amp;publicBlock)<br>&#125;<br><br><span class="hljs-comment">// RsaEncrypt RSA加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaEncrypt</span><span class="hljs-params">(plainText []<span class="hljs-type">byte</span>,path <span class="hljs-type">string</span>)</span></span>[]<span class="hljs-type">byte</span>&#123;<br> <span class="hljs-comment">//打开文件</span><br> file,err:=os.Open(path)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//读取文件的内容</span><br> info, _ := file.Stat()<br> buf:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>,info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//x509解码</span><br> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//类型断言</span><br> publicKey:=publicKeyInterface.(*rsa.PublicKey)<br> <span class="hljs-comment">//对明文进行加密</span><br> cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//返回密文</span><br> <span class="hljs-keyword">return</span> cipherText<br>&#125;<br><br><span class="hljs-comment">// RsaDecrypt RSA解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaDecrypt</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>,path <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span>&#123;<br> <span class="hljs-comment">//打开文件</span><br> file,err:=os.Open(path)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//获取文件内容</span><br> info, _ := file.Stat()<br> buf:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>,info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//X509解码</span><br> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//对密文进行解密</span><br> plainText,_:=rsa.DecryptPKCS1v15(rand.Reader,privateKey.(*rsa.PrivateKey),cipherText)<br> <span class="hljs-comment">//返回明文</span><br> <span class="hljs-keyword">return</span> plainText<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-comment">// RSA/ECB/PKCS1Padding</span><br> <span class="hljs-comment">// RSA是算法，ECB是分块模式，PKCS1Padding是填充模式</span><br><br> <span class="hljs-comment">// pkcs1私钥生成openssl genrsa -out pkcs1.pem 1024</span><br> <span class="hljs-comment">// pkcs1转pkcs8私钥 ：openssl pkcs8 -in pkcs8.pem -nocrypt -out pkcs1.pem</span><br><br> <span class="hljs-comment">// pkcs1 BEGIN RSA PRIVATE KEY</span><br> <span class="hljs-comment">// pkcs8 BEGIN PRIVATE KEY</span><br><br> GenerateRSAKey(<span class="hljs-number">1024</span>)<br> publicPath := <span class="hljs-string">&quot;public_key.pem&quot;</span><br> privatePath := <span class="hljs-string">&quot;private_key.pem&quot;</span><br><br> publicPath = <span class="hljs-string">&quot;public.pem&quot;</span><br> privatePath = <span class="hljs-string">&quot;private.pem&quot;</span><br><br> txt := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br> encrptTxt := RsaEncrypt(txt,publicPath)<br> decrptCode := RsaDecrypt(encrptTxt,privatePath)<br> fmt.Println(<span class="hljs-type">string</span>(decrptCode))<br><br>&#125;<br><br></code></pre></td></tr></table></figure></div>

<h2 id="RSA分段加密"><a href="#RSA分段加密" class="headerlink" title="RSA分段加密"></a>RSA分段加密</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/rand&quot;</span><br> <span class="hljs-string">&quot;crypto/rsa&quot;</span><br> <span class="hljs-string">&quot;crypto/x509&quot;</span><br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/pem&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;log&quot;</span><br> <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> GenerateRSAKey(<span class="hljs-number">2048</span>)<br> publicPath := <span class="hljs-string">&quot;public.pem&quot;</span><br> privatePath := <span class="hljs-string">&quot;private.pem&quot;</span><br> <span class="hljs-keyword">var</span> a = []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br> encrptTxt, err := RsaEncryptBlock(a, publicPath)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br> &#125;<br> encodeString := base64.StdEncoding.EncodeToString(encrptTxt)<br> decodeByte, err := base64.StdEncoding.DecodeString(encodeString)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//生成RSA私钥和公钥，保存到文件中</span><br> decrptCode := RSA_Decrypts(decodeByte, privatePath)<br> fmt.Println(<span class="hljs-type">string</span>(decrptCode))<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenerateRSAKey</span><span class="hljs-params">(bits <span class="hljs-type">int</span>)</span></span> &#123;<br> <span class="hljs-comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span><br> <span class="hljs-comment">//Reader是一个全局、共享的密码用强随机数生成器</span><br> privateKey, err := rsa.GenerateKey(rand.Reader, bits)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//保存私钥</span><br> <span class="hljs-comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span><br> <span class="hljs-comment">// X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey) // PKCS1 和 9 是不一致的</span><br> X509PrivateKey, err := x509.MarshalPKCS8PrivateKey(privateKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> <span class="hljs-comment">//使用pem格式对x509输出的内容进行编码</span><br> <span class="hljs-comment">//创建文件保存私钥</span><br> privateFile, err := os.Create(<span class="hljs-string">&quot;private.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> privateFile.Close()<br> <span class="hljs-comment">//构建一个pem.Block结构体对象</span><br> privateBlock := pem.Block&#123;Type: <span class="hljs-string">&quot;PRIVATE KEY&quot;</span>, Bytes: X509PrivateKey&#125;<br> <span class="hljs-comment">//将数据保存到文件</span><br> pem.Encode(privateFile, &amp;privateBlock)<br> <span class="hljs-comment">//保存公钥</span><br> <span class="hljs-comment">//获取公钥的数据</span><br> publicKey := privateKey.PublicKey<br> <span class="hljs-comment">//X509对公钥编码</span><br> X509PublicKey, err := x509.MarshalPKIXPublicKey(&amp;publicKey)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//pem格式编码</span><br> <span class="hljs-comment">//创建用于保存公钥的文件</span><br> publicFile, err := os.Create(<span class="hljs-string">&quot;public.pem&quot;</span>)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> publicFile.Close()<br> <span class="hljs-comment">//创建一个pem.Block结构体对象</span><br> publicBlock := pem.Block&#123;Type: <span class="hljs-string">&quot;Public Key&quot;</span>, Bytes: X509PublicKey&#125;<br> <span class="hljs-comment">//保存到文件</span><br> pem.Encode(publicFile, &amp;publicBlock)<br>&#125;<br><br><span class="hljs-comment">// RSA_Decrypts RSA解密支持分段解密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RSA_Decrypts</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, path <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> <span class="hljs-comment">//打开文件</span><br> <span class="hljs-keyword">var</span> bytesDecrypt []<span class="hljs-type">byte</span><br> file, err := os.Open(path)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//获取文件内容</span><br> info, _ := file.Stat()<br> buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//X509解码</span><br> privateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err.Error())<br>  os.Exit(<span class="hljs-number">0</span>)<br> &#125;<br> p := privateKey.(*rsa.PrivateKey)<br> keySize := p.Size()<br> srcSize := <span class="hljs-built_in">len</span>(cipherText)<br> log.Println(<span class="hljs-string">&quot;密钥长度&quot;</span>, keySize, <span class="hljs-string">&quot;密文长度&quot;</span>, srcSize)<br> <span class="hljs-keyword">var</span> offSet = <span class="hljs-number">0</span><br> <span class="hljs-keyword">var</span> buffer = bytes.Buffer&#123;&#125;<br> <span class="hljs-keyword">for</span> offSet &lt; srcSize &#123;<br>  endIndex := offSet + keySize<br>  <span class="hljs-keyword">if</span> endIndex &gt; srcSize &#123;<br>   endIndex = srcSize<br>  &#125;<br>  bytesOnce, err := rsa.DecryptPKCS1v15(rand.Reader, p, cipherText[offSet:endIndex])<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>  &#125;<br>  buffer.Write(bytesOnce)<br>  offSet = endIndex<br> &#125;<br> bytesDecrypt = buffer.Bytes()<br> <span class="hljs-keyword">return</span> bytesDecrypt<br>&#125;<br><br><span class="hljs-comment">// RsaEncryptBlock 公钥加密-分段</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RsaEncryptBlock</span><span class="hljs-params">(src []<span class="hljs-type">byte</span>, path <span class="hljs-type">string</span>)</span></span> (bytesEncrypt []<span class="hljs-type">byte</span>, err <span class="hljs-type">error</span>) &#123;<br> <span class="hljs-comment">//打开文件</span><br> file, err := os.Open(path)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-keyword">defer</span> file.Close()<br> <span class="hljs-comment">//读取文件的内容</span><br> info, _ := file.Stat()<br> buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, info.Size())<br> file.Read(buf)<br> <span class="hljs-comment">//pem解码</span><br> block, _ := pem.Decode(buf)<br> <span class="hljs-comment">//x509解码</span><br> publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br> &#125;<br> <span class="hljs-comment">//类型断言</span><br> publicKey := publicKeyInterface.(*rsa.PublicKey)<br> keySize, srcSize := publicKey.Size(), <span class="hljs-built_in">len</span>(src)<br> log.Println(<span class="hljs-string">&quot;密钥长度&quot;</span>, keySize, <span class="hljs-string">&quot;明文长度&quot;</span>, srcSize)<br> offSet, once := <span class="hljs-number">0</span>, keySize<span class="hljs-number">-11</span><br> buffer := bytes.Buffer&#123;&#125;<br> <span class="hljs-keyword">for</span> offSet &lt; srcSize &#123;<br>  endIndex := offSet + once<br>  <span class="hljs-keyword">if</span> endIndex &gt; srcSize &#123;<br>   endIndex = srcSize<br>  &#125;<br>  <span class="hljs-comment">// 加密一部分</span><br>  bytesOnce, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, src[offSet:endIndex])<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125;<br>  buffer.Write(bytesOnce)<br>  offSet = endIndex<br> &#125;<br> bytesEncrypt = buffer.Bytes()<br> <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure></div>




<h1 id="DES加密"><a href="#DES加密" class="headerlink" title="DES加密"></a>DES加密</h1><ul>
<li>DES(Data Encryption)是1977年美国联邦信息处理标准(FIPS)中所采用的一种对称密码（FIPS46-3）,一直以来被美国及其他国家的政府和银行等广泛使用。随着计算机的进步，DES已经能够被暴力破解,1997年的DES Challenge I 中用了96天破译密钥，1998年的DES Challenge II-1中用了41天，1998年的DES Challenge II-2中用了56小时，1999年的DES Challenge III 中只用了22小时15分钟。</li>
<li>DES是一种将64比特的明文加密成64比特的密文的对称密码算法，它的密钥的长度是56比特。尽管从规格上来说，DES的密钥长度是64比特，但由于每隔7比特会设置一个用于错误检查的比特，因此实质上其密钥长度是56比特。</li>
<li>DES 是以64比特的明文（比特序列）为一个单位来进行加密的，这个64比特的单位称为分组 ，一般来说，以分组为单位进行处理的密码算法称为分组密码，DES就是分组密码的一种。</li>
<li>DES每次只能加密64比特的数据，如果要加密的明文比较长，就需要对DES加密进行迭代（反复），而迭代的具体方式就称为模式。</li>
<li>DES 内部实现理论：在 des 中各个步骤称为轮，整个加密过程进行16轮循环。</li>
</ul>
<h2 id="内置库完成"><a href="#内置库完成" class="headerlink" title="内置库完成"></a>内置库完成</h2><p>加密模式采用ECB、填充方式采用pkcs5padding、密码使用”12345678”,输出时经hex编码。自己可以通过一些在线测试工具进行测试，看结果是否一致。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;bytes&quot;</span><br> <span class="hljs-string">&quot;crypto/cipher&quot;</span><br> <span class="hljs-string">&quot;crypto/des&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> data := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;12345678&quot;</span>)<br> iv := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;43218765&quot;</span>)<br><br> result, err := DesCBCEncrypt(data, key, iv)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err)<br> &#125;<br> b := hex.EncodeToString(result)<br> fmt.Println(b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DesCBCEncrypt</span><span class="hljs-params">(data, key, iv []<span class="hljs-type">byte</span>)</span></span> ([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br> block, err := des.NewCipher(key)<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br> &#125;<br><br> data = pkcs5Padding(data, block.BlockSize())<br> cryptText := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-built_in">len</span>(data))<br><br> blockMode := cipher.NewCBCEncrypter(block, iv)<br> blockMode.CryptBlocks(cryptText, data)<br> <span class="hljs-keyword">return</span> cryptText, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pkcs5Padding</span><span class="hljs-params">(cipherText []<span class="hljs-type">byte</span>, blockSize <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br> padding := blockSize - <span class="hljs-built_in">len</span>(cipherText)%blockSize<br> padText := bytes.Repeat([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(padding)&#125;, padding)<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(cipherText, padText...)<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<h2 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/marspere/goencrypt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> <span class="hljs-comment">// key为12345678</span><br> <span class="hljs-comment">// iv为空</span><br> <span class="hljs-comment">// 采用ECB分组模式</span><br> <span class="hljs-comment">// 采用pkcs5padding填充模式</span><br> <span class="hljs-comment">// 输出结果使用base64进行加密</span><br> cipher := goencrypt.NewDESCipher([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;12345678&quot;</span>), []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>), goencrypt.ECBMode, goencrypt.Pkcs7, goencrypt.PrintBase64)<br> cipherText, err := cipher.DESEncrypt([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;hello world&quot;</span>))<br> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  fmt.Println(err)<br>  <span class="hljs-keyword">return</span><br> &#125;<br> fmt.Println(cipherText)<br>&#125;<br></code></pre></td></tr></table></figure></div>

<h1 id="3DES加密算法"><a href="#3DES加密算法" class="headerlink" title="3DES加密算法"></a>3DES加密算法</h1><p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。它相当于是对每个数据块应用三次DES加密算法。<br>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解；3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。<br>还有一个库 非常NB</p>
<p>ECB模式下的3DES算法加解密信息，golang默认只提供CBC模式<br>这边有golang的加密库，非常厉害<br><strong>github.com&#x2F;forgoer&#x2F;openssl</strong></p>
<p>安装：<br><strong>go get github.com&#x2F;thinkoner&#x2F;openssl</strong></p>
<p>代码如下：</p>
<div class="highlight-container" data-rel="Golang"><figure class="iseeu highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br> <span class="hljs-string">&quot;encoding/base64&quot;</span><br> <span class="hljs-string">&quot;encoding/hex&quot;</span><br> <span class="hljs-string">&quot;fmt&quot;</span><br> <span class="hljs-string">&quot;github.com/forgoer/openssl&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br> <span class="hljs-comment">//定义密钥，必须是24byte</span><br> key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;123456789012345678901234&quot;</span>)<br> fmt.Println(<span class="hljs-string">&quot;密钥：&quot;</span>, key, hex.EncodeToString(key))<br><br> <span class="hljs-comment">//定义明文</span><br> src := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;0102030109000000030000000F8898E37A7F8F3D742006111118080000FACE05&quot;</span>)<br><br> <span class="hljs-comment">//3DES-ECB加密</span><br> encodeData, _ := openssl.Des3ECBEncrypt(src, key, openssl.ZEROS_PADDING)<br> encryptBaseData := base64.StdEncoding.EncodeToString(encodeData)<br><br> fmt.Println(<span class="hljs-string">&quot;加密后Base64：&quot;</span>, encryptBaseData)<br> fmt.Println(<span class="hljs-string">&quot;加密后Hex：&quot;</span>, hex.EncodeToString(encodeData))<br><br> <span class="hljs-comment">//3DES-ECB解密</span><br> decodeBaseData, _ := base64.StdEncoding.DecodeString(encryptBaseData)<br> decodeData, _ := openssl.Des3ECBDecrypt(decodeBaseData, key, openssl.ZEROS_PADDING)<br><br> fmt.Println(<span class="hljs-string">&quot;解密后：&quot;</span>, hex.EncodeToString(decodeData))<br>&#125;<br><br></code></pre></td></tr></table></figure></div>
<h2 id="包括-Des的加密解密"><a href="#包括-Des的加密解密" class="headerlink" title="包括 Des的加密解密"></a>包括 Des的加密解密</h2><p>以下只举一个例子</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go">srcData := <span class="hljs-string">&quot;L0j+JvbeVM0svSpjIwXdE7yTu78wiEszCmW8rwjXY3vrx2nEaUeJ/Rw/c/IRdlxIH+/ro4pykx6ESOkGU1YwM8ddEuuoTg5uPsqQ9/SuNds=&quot;</span><br>key := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Ctpsp@884*&quot;</span>[:<span class="hljs-number">8</span>])<br><span class="hljs-comment">//3DES-ECB解密</span><br>decodeBaseData, _ := base64.StdEncoding.DecodeString(srcData)<br>decodeData, _ := openssl.DesECBDecrypt(decodeBaseData, key, openssl.PKCS5_PADDING)<br>fmt.Println(<span class="hljs-string">&quot;解密后：&quot;</span>, <span class="hljs-type">string</span>(decodeData))<br></code></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python加密解密算法</title>
    <url>/2024/08/26/Python%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#url-encode%25E5%258A%25A0%25E5%25AF%2586">url encode加密</a></li>
<li><a href="#unicode-%25E5%258A%25A0%25E5%25AF%2586">unicode 加密</a></li>
<li><a href="#Base64-%25E5%258A%25A0%25E5%25AF%2586">Base64 加密</a></li>
<li><a href="#MD5">MD5</a></li>
<li><a href="#PBKDF2">PBKDF2</a></li>
<li><a href="#SHA">SHA</a></li>
<li><a href="#HMAC">HMAC</a></li>
<li><a href="#DES">DES</a></li>
<li><a href="#3DES">3DES</a></li>
<li><a href="#AES">AES</a></li>
<li><a href="#RC4">RC4</a></li>
<li><a href="#Rabbit">Rabbit</a></li>
<li><a href="#RSA">RSA</a><ul>
<li><a href="#%25E6%25A8%25A1%25E5%259D%2597-Cryptodome%25EF%25BC%259A">模块 Cryptodome：</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<hr>
<h1 id="url-encode加密"><a href="#url-encode加密" class="headerlink" title="url encode加密"></a>url encode加密</h1><p>简介：当url地址含有中文，或者参数有中文的时候，这个算是很正常了，但是把这样的url作为参数传递的时候（最常见的callback）<br>，需要把一些中文甚至’&#x2F;‘做一下编码转换。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> urllib.parse<br><br><br>text = <span class="hljs-string">&quot;我爱吃鸡腿&quot;</span><br>s = urllib.parse.quote(text)<br><span class="hljs-built_in">print</span>(s) <span class="hljs-comment"># %E6%88%91%E7%88%B1%E5%90%83%E9%B8%A1%E8%85%BF</span><br>u = urllib.parse.unquote(s)<br><span class="hljs-built_in">print</span>(u) <span class="hljs-comment">#我爱吃鸡腿</span><br></code></pre></td></tr></table></figure></div>

<h1 id="unicode-加密"><a href="#unicode-加密" class="headerlink" title="unicode 加密"></a>unicode 加密</h1><p>其实这应该不算一种加密 更多的应该算是一种编码与解码<br>但是由于运用很广泛 我也加进去了</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2023/2/28 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br>str1 = <span class="hljs-string">&quot;你好&quot;</span><br><br><span class="hljs-comment"># 编码</span><br>enStr1 = str1.encode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>).decode()<br><span class="hljs-built_in">print</span>(enStr1) <span class="hljs-comment"># \u4f60\u597d</span><br><br><span class="hljs-comment"># 解码</span><br>deStr1 = enStr1.encode().decode(<span class="hljs-string">&#x27;unicode-escape&#x27;</span>)<br><span class="hljs-built_in">print</span>(deStr1) <span class="hljs-comment"># 你好</span><br></code></pre></td></tr></table></figure></div>


<h1 id="Base64-加密"><a href="#Base64-加密" class="headerlink" title="Base64 加密"></a>Base64 加密</h1><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_encode</span>(<span class="hljs-params">text</span>):<br>    encode_data = base64.b64encode(text.encode())<br>    <span class="hljs-keyword">return</span> encode_data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_decode</span>(<span class="hljs-params">encode_data</span>):<br>    decode_data = base64.b64decode(encode_data)<br>    <span class="hljs-keyword">return</span> decode_data<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span><br>    encode_data = base64_encode(text)<br>    decode_data = base64_decode(encode_data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 编码：&#x27;</span>, encode_data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 解码：&#x27;</span>, decode_data)<br>    <br>    <span class="hljs-comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span><br><span class="hljs-comment"># Base64 解码： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure></div>

<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，<br>由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，<br>用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。<br>摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串<br>（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，<br>两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test1</span>():<br>    md5 = hashlib.new(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test2</span>():<br>    md5 = hashlib.md5()<br>    md5.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    md5.update(<span class="hljs-string">&#x27;python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    md5_test1()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br>    md5_test2()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></code></pre></td></tr></table></figure></div>

<h1 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2"></a>PBKDF2</h1><p>简介：英文名称：Password-Based Key Derivation Function 2，<br>PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，<br>2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。<br>PBKDF2 将伪随机函数（例如 HMAC），<br>把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，<br>如果重复的次数足够大，破解的成本就会变得很高。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Cryptodome.Hash <span class="hljs-keyword">import</span> SHA1<br><span class="hljs-keyword">from</span> Cryptodome.Protocol.KDF <span class="hljs-keyword">import</span> PBKDF2<br><br><br>text = <span class="hljs-string">&#x27;I love Python!&#x27;</span><br>salt = <span class="hljs-string">b&#x27;43215678&#x27;</span><br>result = PBKDF2(text,  salt, count=<span class="hljs-number">10</span>, hmac_hash_module=SHA1)<br>result = binascii.hexlify(result)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span><br></code></pre></td></tr></table></figure></div>

<h1 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h1><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），<br>由美国国家安全局（NSA）所设计，主要适用于数字签名标准<br>（Digital Signature Standard DSS）里面定义的数字签名算法（<br>Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，<br>分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，<br>后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，<br>MD5 的密文是 32 位，而 SHA-1 是 40 位，<br>版本越强，密文越长，代价是速度越慢。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test1</span>():<br>    sha1 = hashlib.new(<span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test2</span>():<br>    sha1 = hashlib.sha1()<br>    sha1.update(<span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sha1_test1()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br>    sha1_test2()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></code></pre></td></tr></table></figure></div>

<h1 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h1><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码<br>（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），<br>于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash<br>函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、<br>对报文进行 Hash 运算，形成固定长度的认证码。通信双方<br>通过认证码的校验来确定报文的合法性。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hmac<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test1</span>():<br>    message = <span class="hljs-string">b&#x27;I love python!&#x27;</span><br>    key = <span class="hljs-string">b&#x27;secret&#x27;</span><br>    md5 = hmac.new(key, message, digestmod=<span class="hljs-string">&#x27;MD5&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(md5.hexdigest())<br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test2</span>():<br>    key = <span class="hljs-string">&#x27;secret&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    sha1 = hmac.new(key, digestmod=<span class="hljs-string">&#x27;sha1&#x27;</span>)<br>    sha1.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    sha1.update(<span class="hljs-string">&#x27;Python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(sha1.hexdigest())<br>        <br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    hmac_test1()  <span class="hljs-comment"># 9c503a1f852edcc3526ea56976c38edf</span><br>    hmac_test2()  <span class="hljs-comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br><br></code></pre></td></tr></table></figure></div>
<h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，<br>属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），<br>DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，<br>但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），<br>由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span><br><span class="hljs-keyword">from</span> pyDes <span class="hljs-keyword">import</span> des, CBC, PAD_PKCS5<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)<br>    en = k.encrypt(text, padmode=PAD_PKCS5)<br>    <span class="hljs-keyword">return</span> binascii.b2a_hex(en)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)<br>    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)<br>    <span class="hljs-keyword">return</span> de<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    iv = secret_key           <span class="hljs-comment"># 偏移量</span><br>    secret_str = des_encrypt(secret_key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)<br>    clear_str = des_decrypt(secret_key, secret_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<br>    <br>    <br>    <span class="hljs-comment"># 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span><br>    <span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br><br></code></pre></td></tr></table></figure></div>
<h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、<br>Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。<br>70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，<br>它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，<br>原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，<br>即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> DES3<br><span class="hljs-keyword">from</span> Cryptodome <span class="hljs-keyword">import</span> Random<br><br><br><span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        value += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    <span class="hljs-comment"># 加密模式 OFB</span><br>    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)<br>    encrypted_text = cipher_encrypt.encrypt(text.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">return</span> encrypted_text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):<br>    <span class="hljs-comment"># 加密模式 OFB</span><br>    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)<br>    decrypted_text = cipher_decrypt.decrypt(text)<br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    key = <span class="hljs-string">&#x27;12345678&#x27;</span>            <span class="hljs-comment"># 密钥，16 位</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>     <span class="hljs-comment"># 加密对象</span><br>    iv = Random.new().read(DES3.block_size)  <span class="hljs-comment"># DES3.block_size == 8</span><br>    secret_str = des_encrypt(key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)<br>    clear_str = des_decrypt(key, secret_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<br><br><br><span class="hljs-comment"># 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span><br><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure></div>
<h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），<br>在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，<br>并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。<br>这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，<br>它本身只有一个密钥，即用来实现加密，也用于解密。</p>
<p>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。<br>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        value += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<br><br><br><span class="hljs-comment"># 加密方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">key, t, iv</span>):<br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  <span class="hljs-comment"># 初始化加密器</span><br>    encrypt_aes = aes.encrypt(add_to_16(t)) <span class="hljs-comment"># 先进行 aes 加密</span><br>    <span class="hljs-comment"># 执行加密并转码返回 bytes</span><br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <br>    <span class="hljs-keyword">return</span> encrypted_text<br><br><br><span class="hljs-comment"># 解密方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">key, t, iv</span>):<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))     <br>    <span class="hljs-comment"># 优先逆向解密 base64 成 bytes   </span><br>    base64_decrypted = base64.decodebytes(t.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <br>    <span class="hljs-comment"># 执行解密密并转码返回str </span><br>    decrypted_text = <span class="hljs-built_in">str</span>(aes.decrypt(base64_decrypted), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">t,key,iv</span>):<br>    <span class="hljs-comment"># 初始化加密器</span><br>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))<br>    <span class="hljs-comment"># 优先逆向解密 base64 成 bytes</span><br>    base64_decrypted = base64.b64decode(t.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-comment"># 执行解密密并转码返回str</span><br>    decrypted_text = <span class="hljs-built_in">str</span>(unpad(aes.decrypt(base64_decrypted), AES.block_size), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> decrypted_text<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    iv = secret_key           <span class="hljs-comment"># 初始向量</span><br>    encrypted_str = aes_encrypt(secret_key, text, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><br><span class="hljs-comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span><br><span class="hljs-comment"># 解密字符串： I love Python!</span><br></code></pre></td></tr></table></figure></div>

<p><strong>AES ECB PKC7 模式</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Cryptodome.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_cipher</span>(<span class="hljs-params">key, aes_str</span>):<br>    <span class="hljs-comment"># 使用key,选择加密方式</span><br>    aes = AES.new(key.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)<br>    pad_pkcs7 = pad(aes_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size, style=<span class="hljs-string">&#x27;pkcs7&#x27;</span>)  <span class="hljs-comment"># 选择pkcs7补全</span><br>    encrypt_aes = aes.encrypt(pad_pkcs7)<br>    <span class="hljs-comment"># 加密结果</span><br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 解码</span><br>    encrypted_text_str = encrypted_text.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment"># 此处我的输出结果老有换行符，所以用了临时方法将它剔除</span><br>    <span class="hljs-keyword">return</span> encrypted_text_str<br></code></pre></td></tr></table></figure></div>


<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，<br>密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。<br>RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，<br>该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，<br>虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，<br>它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，<br>现在逐渐不推荐使用了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> ARC4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_encrypt</span>(<span class="hljs-params">key, t</span>):<br>    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    res = enc.encrypt(t.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    res = base64.b64encode(res)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, t</span>):<br>    data = base64.b64decode(t)<br>    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    res = enc.decrypt(data)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span><br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span><br>    encrypted_str = rc4_encrypt(secret_key, text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = rc4_decrypt(secret_key, encrypted_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><br><span class="hljs-comment"># 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span><br><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure></div>
<h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，<br>2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p>
<p>目前没有找到有第三方库可以直接实现 Rabbit 算法，<br>在 Python 中实现可以参考：<a class="link"   href="https://asecuritysite.com/encryption/rabbit2" >https://asecuritysite.com/encryption/rabbit2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、<br>阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，<br>RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。<br>在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。<br>RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> rsa<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_encrypt</span>(<span class="hljs-params">pu_key, t</span>):<br>    <span class="hljs-comment"># 公钥加密</span><br>    rsa = rsa.encrypt(t.encode(<span class="hljs-string">&quot;utf-8&quot;</span>), pu_key)<br>    <span class="hljs-keyword">return</span> rsa<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_decrypt</span>(<span class="hljs-params">pr_key, t</span>):<br>    <span class="hljs-comment"># 私钥解密</span><br>    rsa = rsa.decrypt(t, pr_key).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">return</span> rsa<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    public_key, private_key = rsa.newkeys(<span class="hljs-number">512</span>)   <span class="hljs-comment"># 生成公钥、私钥</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;公钥：&#x27;</span>, public_key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;私钥：&#x27;</span>, private_key)<br>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>  <span class="hljs-comment"># 加密对象</span><br>    encrypted_str = rsa_encrypt(public_key, text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)<br>    decrypted_str = rsa_decrypt(private_key, encrypted_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span><br><span class="hljs-string">私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span><br><span class="hljs-string">加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span><br><span class="hljs-string">解密字符串： I love Python!</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></div>
<h2 id="模块-Cryptodome："><a href="#模块-Cryptodome：" class="headerlink" title="模块 Cryptodome："></a>模块 Cryptodome：</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2022/9/29 10:43</span><br><span class="hljs-comment"># @Author  : lzc</span><br><span class="hljs-comment"># @Email   : hybpjx@163.com</span><br><span class="hljs-comment"># @File    : utilsMiddlewares.py</span><br><span class="hljs-comment"># @cnblogs : https://www.cnblogs.com/zichliang/</span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Cryptodome.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5<br><br><br>data = <span class="hljs-string">&quot;cKK8B2rWwfwWeXhz&quot;</span><br>public_key = <span class="hljs-string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span><br>rsa_key = RSA.import_key(base64.b64decode(public_key))  <span class="hljs-comment"># 导入读取到的公钥</span><br>cipher = PKCS1_v1_5.new(rsa_key)                        <span class="hljs-comment"># 生成对象</span><br>cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)))<br><span class="hljs-built_in">print</span>(cipher_text)<br></code></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>语言加解密</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JSVMP逆向流程——QQ音乐</title>
    <url>/2024/08/23/QQ%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8791b347265fc79548c200b3f85d6a4a43b08f3a82e3e7b49cd8379a2e5d901c">83e5631915b29311d4c3e64518d9116c9395bd0bf0663511fddd5e52bc0d8aa3e5bb18f4e03292ce901d25496b3c090e6234a36c8afa24646975318692b32b54510aa5eb10c57f0d1d138b1787cd44420ebab759e29d372cf2b4f3d7ea27a7ca146fd5d430a1a8dd7812ddb1042c132a5e64322e97f681db01bd05348f3713c9aa4580358160ee9c73174dddd339cc1e19e402ee3cf4ec9be94795e35af1886e223e9d85c63785a3e63509d7cd6610a570f0117f75257fa474e430c1ac5a4681b45d6ccbd354656c0780f89cda595ee744e6972217b239d19d029a3774fa63fa39ed3febfdb1df0201522ea3102744f14a1d3c4caacfd5bb25fbf6290ba52ae0a519ca4cbc9d1d93963231e8ef8f29301480d82d65fa340e90344409a5103c8ba80222b54adba5969649aa1bb98723f9d9304556f69670a26b7adeb46dad6dfd0204d2910c0c2695c0838700f84b8ea2c54cedcbc5bd2b551db0cdd5a67f01a0828885a1182ff51086b48907775b38c442abe0253e6a4d02165fa8f52ce6d5387c7ad809bfb1e15be9ce226b99fcee09bca839afb3fbfe3a77064d48ae9bd307dbc4b8f184f165159aa2c3d2a0b604e4b69660468adcb2ad0de01e3847a3d7fb5b7b1e2e4a8f5d576c1ae86298890f050cea067d206c32f017ae2069092557ecf15a6c8c2f704b74bc88ed9a01aa01c4d0f6f4f77b002b242a079f30ad4843bbc641a4c0d8bb7ceba64cbbf89626d56baeba854dc02ed4a3be48247826c13e363ed97277d3722be29659d24a736ff5dfbedbb534e205ddd94e4496d8d7f47722ec03288130c0b1d873194a530b89090afbc045406845f96407cb9d1c680a8c3b11f08953010b73dca7b3d84e62655bb4e6391dd744823594d3e62fc74ce639f6e28fc062ae67d4bc8ef9ae2c0cd70d071bec9e2fbe348df3c5c16ce0eb6c14aa01103c376a1e1adb840858ebfc7e0aa6f696b16847a808d3877ee11bc540daff1c53a7206713a9644ce8c950b357cf90a1002e1cdbfa64f9fe4e404044ceedf8657e0a776d8903a0b9a3f5c04ad474146b37e380de79bd8f8f54ca1dac28792cdac34dc8675044efb769d58d02952643169520e890089b628c24ee0f666a338aa4f79677cfca8f98cce32eb56a049b8ef84b725f4f85ab55f1a25bf71917f7061ba566de4e7ad8cef5d7457bc7d5eb7bd508d14f40d7845f8224e5c534ba1495e1b4ff943298032ca8cc049ed66f03dd6b243fd518b760e530d826a72347d7666a1ea67720f16754b7d1e9e782f8378c962eafe8e6d1051cb23b3d3b28933f8df93221c1761df6bd0a7b70450d27b63e2a70d6d3450d6d19794a101fe49686b8fd39d89852531200db8d144a8759f3065c79465dbab724c349836e9ec78c77a4d9f7a02a0826c7830c2d13922e94053d6225346cf527a1e3d4fe4f2e3c5df550c8cf353a5e9bf7203da589d95463589402d1955a9a5d14d61b8a626282f7ccbfea023a98d6b4880c935b64ad3d406fcd33699e3e87111448e2e4f8dbfecc506eb02932a96b7820f856ce86f27a03961f4defae48124cc313b25d6712189c9a5ec943baf09b433c585403f4b9b8ba638d87c015e7bed6d572138f7f41acc37bb3b1b4b8f85a8975240e1adb716308f53ef5de805ecad9853a6b1ce3d0357873c4f0e9f4d3cc729d5ac726120de339b6e2d3af4df99a37172636c97f6c52480559d10b057b68e650d514cf1675cb1daa4f7ab51e46d60a9f755ed7dc56900ba06a649c79fa0c0da58d401ff47e1f7e88ad701d78fbf4bb9bf655fd619006ae07f790f0585f2a70cf995c6231791fa695f09cd71afe5dbff6189b5acbdb26da986684e6d5647f01c46258f0fcc35b88fdf03480684de57094e68688c09dad001813328f16f6573eff529075a20245134d8680ed74c10dbc7925548ef8d10d226d6b45a331a9249af8775346d9e37d084408d4c05dfd35635d8f4924aee12169d0ee08c2a82591d2178e75a7c5278134c2424e2147dd787731a13493819e08ee9cc4657e87e6372a6ff79a9f2ae9527dbeb8b60cf9fef1564e690e9f0bc0d752258cd952d78ddb7ced127c3cfd890c0c107e9a204f60c554d22f9ff40e66784832c5fe0391b167c6c7ff3e979a3dd139e811c6c57549404a6223ba4eb12e1f3b33d0d32cc90716d590f0127bced68c406ed34d169632756e4cd0467e47b6232854392b6892da1df0c43706ea64637f0b51653df26c09f59cc44e4dc8d8354f5bfc8e0970e169d239a2d614d53f98eb0841b21888f22b54e8db1c502986b195b2bbe9c58120253d1ae93cfec798d802b4101be6e251e169e3c6e40da82e1eca5dd75890b831940a8b7a09de400c8bebc7e7ae85d178a28669cd8726ff7541c2771bf69bf8a7c94cdf4a308b2358f01fd187f6759f96ade9f9ea64568897195e29e49cb4efc9a1a6ea28fe042e39a06f53ed08b9dfdcbd008b5770b266e6164aa6b6100f22b896cd0e1f13c38281c920233563edd5fd3df2f233747b0d73d2b7381d00c6e9ff32bc8c3124ed904d8162f7da609feb57419864b1622d076a58d7d1c708c9ad03e34ff6c0085b6fc01991b6d04c82873e1ecbe27378c62f06f6568a1fb3aae27afb0d5294428d327aa2dd60bca1fa22a67d5886362f8475dc3f4b474feea5f023d7ec1113db371616e6d3892487a71fdc348f225e27c760ada8696d22175e1ba046010e2425645db2804a764a6083de2b9b97c1a8463290902d229919ffdd513d9846b1ac489c266878faf989878f0a47c03200bd68b10940072b93ce0f641f79c5360a515241ef2c358dbc11bcf63577d6f8d79a103321e5b618853dd6f9338b2b74a1064b93d3b773328e335b7ee542afc64c1d19fde9a98ca80d7c618d5d3bf9ab8b773c233fe5e74b735c6766115e5b248925a58aaff64b01985d8c00f2e6f553f3ad05809289282e744091671c02e8eeedfd052a42950a9f77b427b11dc82325e253ae262175efc09728ffb444af5e2004028a5391780e686bfd3ab8e7b1f6f9601ec6532e045289e43bd652f81b26ea05491491c391263fb3c85f24a190987d7f5b650e8552a90c6cc38434a264d5f26afe7a51c98a62476dd40e76d57134c187f4dee3ddd044926658f1b4fb2b3b9e117070521dee94cbd3c046e350b68e6b620adb7834abbc57506c37b81be03c09c4331064147304fc62bf641a6171e7c71d9e3d91480d99fbabe2c61702b3fcd8d2d9f096ec2dbeb629edc85019199095cc3ca225e615392888723c7255301814854804a9574ef2f334e9f1231bcf1524c28a74c27bc461eef51e86ddd6688edc919916462f6a1a26aab03e32d8ea2ecc4824acea1c2bffd565f7a20287a47c978554397366d31ddd984522cba7600956596abb564e1ce06664d5a6433598b1cee5e5e7bb5f903525fb511bdb11507218126fc2a1f48efdc65058e5ede136ad3b50e9f9c7a5597c2bbf9ce0a9995a1a57dd9cf8a579d529b7ece384c1ff6fb6c0d87e83398c55a679def162a1b4c6a65a0b06085db8c9d56f6ab16f62cbe158d5470e733130aa249b1b88854108623fe1b6eb4285f5b789cff38fd8df0a004f4490dc113035b0997c2d737bdb1770057087b161d7e81a6ef324e06829bca14805796255c8fb4c0998953d966e67649e168b7cd25f6e54472e61e29c64aa08617332feeb50d23f6f0683eca8bfddab9562d8a978897f4edf3ac23848e0d131d568139de62069ecc310988d65547e17208704933e08ad14888b3c859359ecd9d5c38f8b9aa6b2b6ebc6947c2d1a7014672c2803f6992614b3132e67d7836b56501c3615b0941611825a492bdaef2e1987f02a97b343e4cb5005c339af6babd79ab87b5d04209c2ddadacea76cdb4dd826f9043c1888e29611a6a271107c6b11545f81895c138e762ea716dae8429d7c04ad68b9ec0fd52c55aed6561b940ce5ce81de8c48886925667d19fd9d1f76ed1a0ca92d55758c2ce268104323c5018c43787e63c8ef881e7311f63f4f662cf02d89c9e34be9512018cab583c9be43d651f6fb8df66ee42f483881a185a005bfc27d1c3866fc6c60156b80539f6b3a43ead25605d39445462ada801f661353bf3519410a9e1f458c38fe5f549af1970f6e7163e853c57ca8226bd717c144998cfd580608c603f744e0b98c1fbfd60a8ff21fa6d882175aa246f1aaa6fafb06deb7ae0b910db87df234a372395255858569e8b4182a35b3823fe4372a8e47c090240340dd8a4a581fb804fb4ad7006d99890f08f8205f8ddac0eb3229ad3fa24351455d10d76d94184c8a50d32cefe3f2714b8b002a22cbca82ceca492a60b86b31b5175aac09e80ef34233ece5f45d6ec126da7b91034157d8115677aaae9e904682bd5a727a1c1861c30b2f9ea9999e8424b04e7f099baeab005b19ca30d5faece59bb28d800af83d732b582c10961b26a10896d642ab287e0192f33a3621fe86cdc7d806ba97c844b62e487e1e3fdcac2abd5be6e3431891350fc8472db90a287cc25a76dd36c53709f830fe732f1be4aa420ff515dfb5731789d78571905b2dc8984aaf85114fb79177d2ae9ae640aeee455a8e1f42dbade4a6249e04ad1de32719dd54950185dd6f0ea29cae3b7b6511fbf96a01c69bc8d68c57f36a39f0c0b56f69d911fdfd669c043b7a5ede471403fc495e8e0dc16fb9e9fb104c7fdf79373b672f6c07117393547918c0f777e4f57c37682284ff3f7e497d99b31f27b677b19c4ae931941eff27eb07fb5f2843808d542cf751f60be87a698befb6ba6dc3a832b5c6e8368166cfddba7d412b48be0a5d4e5641be5f1c3560efb490a52207a76dd1d5e863fa16e51d14b369bc033df64ee93f7b105fded8728abf18f60e264e42bebce9cc1cef0fa4a34e4cddf448920eb8aeec9e6e0b5f785169567f876aca5201215fc36fa2f43c35223213f7d3d4abf63373f66cc98d1fd0522450379755fd2f3da7337abc781b6d05d2f637e118c3b4cb75ac8bf76442ec98445f9febda0ee75cbab5bbd30d3c9296b449a24c4ea7af1888db37bb7cf40d4acdc0706985caa9afce437dd881aabd8690dcdb5b13521304a8193131a72e70153b2c2438f1957f82654a8dd45ced810a88dca915b979f7678a0117953d2bec0a4501d2b3e52e7346b7eab94efe39b7071091fddf66dd060651652ae5e6b7955fba5b32cde6e0edfbd26e683564b376db6f276f784ce9e8b875876dadda90897a875414b704750eba5c459e3f2646e152fbbb9f1f5ef07cb1146183c812e87573be0b366a6d06191881ed0b3558e992c7ec5501f439bbf62b046e47ec93b03332b8099ad30add692f4c59f36640f236702934aaa54db4c1c1fa750792e8726f60edf66038232ccf647a04061fa35ab26db22473283e4ea94312dbfa393d49119414398438388af77bbf899a08d91c53500b3c7727140c914209c965a3c43ac5689fe4ce6ed5470c2c98d5b73c45aead143f39e0090b1f973cc3bcc855966650dead5bdd2c3d6dd6f23078aaead1336a447eefb7f534a013b1618fd7bc6b24381bf53f6d7a38da2e70743e6bb1ab0bc9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JSVMP</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装anconda3</title>
    <url>/2024/08/26/ubuntu%E5%AE%89%E8%A3%85anconda3/</url>
    <content><![CDATA[<!--toc-->
<hr>
<h1 id="ubuntu-安装anaconda3"><a href="#ubuntu-安装anaconda3" class="headerlink" title="ubuntu 安装anaconda3"></a>ubuntu 安装anaconda3</h1><p>官网:<a class="link"   href="https://www.anaconda.com/" >https://www.anaconda.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>下载:<a class="link"   href="https://www.anaconda.com/products/individual#Downloads" >https://www.anaconda.com/products/individual#Downloads <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入以下命令执行所下载的安装程序：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh<br><br>bash Anaconda3-2021.11-Linux-x86_64.sh<br></code></pre></td></tr></table></figure></div>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>为了下载库的时候速度更快，更换conda下载源为清华大学镜像</p>
<div class="highlight-container" data-rel="Arduino"><figure class="iseeu highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">conda config --add channels https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure></div>
<p>在 &#x2F;home&#x2F;xxx里面添加Anaconda-python路径</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ vim ~/.bashrc<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/home/xxx/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span>  <span class="hljs-comment">## 在zshrc添加路径，然后保存退出</span><br><br>$ <span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure></div>

<p>然后在ubuntu 输入命令</p>
<blockquote>
<p>conda –version</p>
</blockquote>
<p><strong>建立虚拟环境</strong></p>
<blockquote>
<p>conda create -n test python&#x3D;3.9</p>
</blockquote>
<p><strong>激活 虚拟环境</strong></p>
<blockquote>
<p>conda activate test</p>
</blockquote>
<p><strong>在虚拟环境安装软件</strong></p>
<blockquote>
<p>conda install spyder</p>
</blockquote>
<p><strong>关闭虚拟环境</strong></p>
<blockquote>
<p>deactivate</p>
</blockquote>
<p><strong>移除环境</strong></p>
<blockquote>
<p>conda remove –name test –all</p>
</blockquote>
<p><strong>删除已经设定好默认镜像源，恢复原来的源</strong></p>
<blockquote>
<p>conda config –remove-key channels</p>
</blockquote>
<p><strong>列出当前所有的环境</strong></p>
<blockquote>
<p>conda env list</p>
</blockquote>
<p><strong>重置Base环境</strong></p>
<blockquote>
<p>conda install –revision 0</p>
</blockquote>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>从零实现JSVMP</title>
    <url>/2024/08/23/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0JSVMP/</url>
    <content><![CDATA[<!--toc-->
<hr>
<h1 id="从零JSVMP"><a href="#从零JSVMP" class="headerlink" title="从零JSVMP"></a>从零JSVMP</h1><p>JSCode ——&gt; Ast——&gt; 指令 ——&gt; 执行指令</p>
<h1 id="简单的解释器"><a href="#简单的解释器" class="headerlink" title="简单的解释器"></a>简单的解释器</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>*<span class="hljs-number">5</span>+<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure></div>

<ol>
<li>2*5</li>
<li>10+8</li>
<li>console.log(18)</li>
</ol>
<p>mul 2,5</p>
<p>add 10,8</p>
<p>print 18</p>
<p><strong>栈的形式</strong></p>
<blockquote>
<ol>
<li>push 2</li>
<li>push 5</li>
<li>mul</li>
<li>push 8</li>
<li>add</li>
<li>print</li>
</ol>
</blockquote>
<p>**栈： 先进后出 **</p>
<blockquote>
<ol>
<li>push</li>
<li>mul</li>
<li>add</li>
<li>print</li>
</ol>
</blockquote>
<p>得到指令集 &gt; [1,2,1,5,2,1,8,3,4]</p>
<p>2*5*8+2*3</p>
<p>得到指令集 &gt;  [1,2,1,5,2,1,8,2,1,2,1,3,2,3,4]</p>
]]></content>
      <tags>
        <tag>JSVMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装redis并且设置远程登陆和密码</title>
    <url>/2024/08/26/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E5%92%8C%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<!--toc-->
<hr>
<h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><blockquote>
<p>sudo apt-get install -y redis-server</p>
</blockquote>
<h1 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h1><blockquote>
<p>sudo vim &#x2F;etc&#x2F;redis&#x2F;redis.conf</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/08/26/XThu9WoMF1INzCJ.png"><br><img src="https://s2.loli.net/2024/08/26/wGmL1tdIK6EhqWQ.png"><br><img src="https://s2.loli.net/2024/08/26/zRoObl6vKPq1riC.png"></p>
<p>如果不知道怎么找<br>直接在命令行模式下输入<br>&#x2F;{你要搜索的东西} 然后按回车 然后按n是下一个 N是上一个</p>
<h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><blockquote>
<p>systemctl restart redis-server.service</p>
</blockquote>
<h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><p>使用远程工具 Redis Desktop Manager<br>下载地址<br>官网: <a class="link"   href="https://resp.app/pricing" >https://resp.app/pricing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>百度网盘：<a class="link"   href="https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g" >https://pan.baidu.com/s/1dxo16QadKMuKPYT-z7nm6g <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：00c0</p>
<p><img src="https://s2.loli.net/2024/08/26/lynw3ZIqLeWk8g9.png"></p>
<p><img src="https://s2.loli.net/2024/08/26/hziQdgPOETZaojN.png"><br>然后测试连接<br><img src="https://s2.loli.net/2024/08/26/mHoUBhuOxEz5W1e.png"></p>
<p>代表成功</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>在ubuntu上安装golang</title>
    <url>/2024/08/26/%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85golang/</url>
    <content><![CDATA[<!--toc-->
<hr>
<p><a class="link"   href="https://golang.google.cn/dl/" >https://golang.google.cn/dl/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://golang.google.cn/dl/go1.19.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p>
<h2 id="解压到文件夹下"><a href="#解压到文件夹下" class="headerlink" title="解压到文件夹下"></a>解压到文件夹下</h2><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><code class="hljs go">sudo tar -xvzf go1<span class="hljs-number">.19</span>.linux-amd64.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/gDPJvAlITqQGHC5.png"></p>
<h2 id="编译配置环境变量"><a href="#编译配置环境变量" class="headerlink" title="编译配置环境变量"></a>编译配置环境变量</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano ~/.bashrc<br></code></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPATH=/home/zic/gopath<br><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br></code></pre></td></tr></table></figure></div>

<p><img src="https://s2.loli.net/2024/08/26/vWKNQ3pZYO9ol6y.png"></p>
<p>配置完毕之后<br>然后使用命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure></div>

<p>然后再终端中输入</p>
<blockquote>
<p>go version </p>
</blockquote>
<p><img src="https://s2.loli.net/2024/08/26/hcosbpRv5nIQe2F.png"></p>
<h2 id="运行hello-world"><a href="#运行hello-world" class="headerlink" title="运行hello,world"></a>运行hello,world</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">go run main.go<br></code></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/yhQINsl1dxrk2VF.png"></p>
<h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><h2 id="通过apt-get安装"><a href="#通过apt-get安装" class="headerlink" title="通过apt-get安装"></a>通过apt-get安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install golang<br></code></pre></td></tr></table></figure></div>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPATH=/home/zic/gopath<br><br><span class="hljs-built_in">export</span> GOROOT=/usr/local/go<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br></code></pre></td></tr></table></figure></div>
<p>其他步骤一模一样 只不过这个版本不可选而已</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>安装NVM与构建vue项目</title>
    <url>/2024/08/26/%E5%AE%89%E8%A3%85NVM%E4%B8%8E%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585nvm">安装nvm</a><ul>
<li><a href="#windows-%25E5%25AE%2589%25E8%25A3%2585">windows 安装</a><ul>
<li><a href="#%25E9%25AA%258C%25E8%25AF%2581">验证</a></li>
</ul>
</li>
<li><a href="#ubuntu-%25E5%25AE%2589%25E8%25A3%2585">ubuntu 安装</a><ul>
<li><a href="#%25E4%25BF%25AE%25E6%2594%25B9hosts">修改hosts</a></li>
<li><a href="#%25E9%2587%258D%25E5%2590%25AF%25E7%25BD%2591%25E5%258D%25A1">重启网卡</a></li>
<li><a href="#%25E6%259B%25B4%25E6%258D%25A2%25E6%25B7%2598%25E5%25AE%259D%25E6%25BA%2590">更换淘宝源</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585cnpm">安装cnpm</a></li>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585node">安装node</a></li>
<li><a href="#%25E5%258D%25B8%25E8%25BD%25BDnode">卸载node</a></li>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8nvm">使用nvm</a><ul>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8-16.13.0">使用 16.13.0</a></li>
<li><a href="#%25E6%259F%25A5%25E7%259C%258B%25E5%25AE%2589%25E8%25A3%2585%25E7%258E%25AF%25E5%25A2%2583">查看安装环境</a></li>
<li><a href="#%25E6%259B%25B4%25E6%258D%25A2%25E9%25BB%2598%25E8%25AE%25A4%25E7%258E%25AF%25E5%25A2%2583">更换默认环境</a></li>
</ul>
</li>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585yarn">安装yarn</a><ul>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585%25E6%25BA%2590%25E6%25B7%25BB%25E5%258A%25A0%25E9%2595%259C%25E5%2583%258F">安装源添加镜像</a></li>
<li><a href="#%25E6%259B%25B4%25E6%2596%25B0%25E6%25BA%2590%25E5%25B9%25B6%25E4%25B8%2594%25E5%25AE%2589%25E8%25A3%2585">更新源并且安装</a></li>
<li><a href="#%25E5%258D%25B8%25E8%25BD%25BD">卸载</a></li>
<li><a href="#%25E6%25B7%25BB%25E5%258A%25A0%25E6%25B7%2598%25E5%25AE%259D%25E6%25BA%2590">添加淘宝源</a></li>
</ul>
</li>
<li><a href="#vue-cli">vue-cli</a><ul>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585">安装</a></li>
<li><a href="#%25E5%25B8%25B8%25E8%25A7%2584%25E5%25AE%2589%25E8%25A3%2585">常规安装</a></li>
</ul>
</li>
<li><a href="#vite">vite</a><ul>
<li><a href="#%25E5%25AE%2589%25E8%25A3%2585vite">安装vite</a></li>
<li><a href="#%25E4%25BD%25BF%25E7%2594%25A8">使用</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<hr>
<h1 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h1><h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>去github 上下载 <a class="link"   href="https://github.com/coreybutler/nvm-windows" >https://github.com/coreybutler/nvm-windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装包地址： <a class="link"   href="https://github.com/coreybutler/nvm-windows/releases" >https://github.com/coreybutler/nvm-windows/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img src="https://s2.loli.net/2024/08/26/WR9AbqNfsMw7juL.png"><br>直接下载安装即可。</p>
<p>安装完了 持续下一步<br>进入目录中<br><img src="https://s2.loli.net/2024/08/26/OaKlCvAH39IGu42.png"></p>
<p>然后修改settings中<br>添加如下内容</p>
<div class="highlight-container" data-rel="Avrasm"><figure class="iseeu highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">node_mirror:</span> https://npm.taobao<span class="hljs-meta">.org</span>/mirrors/node/<br><span class="hljs-symbol">npm_mirror:</span> https://npm.taobao<span class="hljs-meta">.org</span>/mirrors/npm/<br></code></pre></td></tr></table></figure></div>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证NVM是否安装成功<br><img src="https://s2.loli.net/2024/08/26/87RNqO9Mmlh61kj.png"><br>以上代表已经安装成功了。<br><img src="https://s2.loli.net/2024/08/26/1qJDrX6IRvxpU7u.png"></p>
<h2 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h2><p><a class="link"   href="https://github.com/nvm-sh/nvm" >https://github.com/nvm-sh/nvm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>执行如下命令即可。<br><img src="https://s2.loli.net/2024/08/26/FS7CDXsr8LuzQa1.png"></p>
<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">curl -<span class="hljs-keyword">o</span>- https://raw.githubusercontent.<span class="hljs-keyword">com</span>/nvm-<span class="hljs-keyword">sh</span>/nvm/v0.<span class="hljs-number">39.3</span>/install.<span class="hljs-keyword">sh</span> | bash<br></code></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">wget -qO- https://raw.githubusercontent.<span class="hljs-keyword">com</span>/nvm-<span class="hljs-keyword">sh</span>/nvm/v0.<span class="hljs-number">39.3</span>/install.<span class="hljs-keyword">sh</span> | bash<br></code></pre></td></tr></table></figure></div>

<h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vim</span> /etc/hosts<br><span class="hljs-number">199.232</span>.<span class="hljs-number">96.133</span> raw.githubusercontent.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure></div>
<h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><blockquote>
<p>systemctl restart NetworkManager.service</p>
</blockquote>
<p>这样就算安装成功了</p>
<h3 id="更换淘宝源"><a href="#更换淘宝源" class="headerlink" title="更换淘宝源"></a>更换淘宝源</h3><p>在安装nodejs的时候特别慢，安装了好久都安装不上去，网速实在是太慢了，需要将nvm的默认下载地址改为国内的，我使用了淘宝的镜像,在.bashrc文件中追加如下内容</p>
<div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> ~/.bashrc<br><br># nvm淘宝镜像<br>export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node<br></code></pre></td></tr></table></figure></div>


<h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org <br></code></pre></td></tr></table></figure></div>



<h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm install v16.13.0<br></code></pre></td></tr></table></figure></div>

<h1 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nvm uninstall v16.13.0<br></code></pre></td></tr></table></figure></div>

<h1 id="使用nvm"><a href="#使用nvm" class="headerlink" title="使用nvm"></a>使用nvm</h1><h2 id="使用-16-13-0"><a href="#使用-16-13-0" class="headerlink" title="使用 16.13.0"></a>使用 16.13.0</h2><blockquote>
<p>nvm use v16.13.0</p>
</blockquote>
<p><strong>注意： 如果在windows下 要使用超级管理员 不然会出现错误</strong></p>
<h2 id="查看安装环境"><a href="#查看安装环境" class="headerlink" title="查看安装环境"></a>查看安装环境</h2><blockquote>
<p>nvm current<br>nvm list</p>
</blockquote>
<h2 id="更换默认环境"><a href="#更换默认环境" class="headerlink" title="更换默认环境"></a>更换默认环境</h2><blockquote>
<p>nvm alias default v16.13.0</p>
</blockquote>
<h1 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h1><h2 id="安装源添加镜像"><a href="#安装源添加镜像" class="headerlink" title="安装源添加镜像"></a>安装源添加镜像</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">curl -sS https://<span class="hljs-keyword">dl</span>.yarnpkg.<span class="hljs-keyword">com</span>/debian/pubkey.gpg | sudo apt-key <span class="hljs-built_in">add</span> -<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | sudo tee /etc/apt/sources.<span class="hljs-keyword">list</span>.d/yarn.<span class="hljs-keyword">list</span><br></code></pre></td></tr></table></figure></div>

<h2 id="更新源并且安装"><a href="#更新源并且安装" class="headerlink" title="更新源并且安装"></a>更新源并且安装</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sudo apt <span class="hljs-keyword">update</span> &amp;&amp; sudo apt install yarn<br></code></pre></td></tr></table></figure></div>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><div class="highlight-container" data-rel="Vim"><figure class="iseeu highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> yarn<br>sudo apt-<span class="hljs-built_in">get</span> autoremove<br></code></pre></td></tr></table></figure></div>
<h2 id="添加淘宝源"><a href="#添加淘宝源" class="headerlink" title="添加淘宝源"></a>添加淘宝源</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry http://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure></div>

<p>安装完毕 后 输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn -v <br></code></pre></td></tr></table></figure></div>

<p><img src="https://s2.loli.net/2024/08/26/bkS6gd1snZyJzfm.png"><br>代表安装成功！！！</p>
<h2 id="初始化一个yarn项目"><a href="#初始化一个yarn项目" class="headerlink" title="初始化一个yarn项目"></a>初始化一个yarn项目</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn init<br></code></pre></td></tr></table></figure></div>

<h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 速度不行可以考虑换源 npm</span><br>npm install -g @vue/cli<br><br>yarn add global @vue-cli<br></code></pre></td></tr></table></figure></div>


<h2 id="常规安装"><a href="#常规安装" class="headerlink" title="常规安装"></a>常规安装</h2><blockquote>
<p>vue create vueproject</p>
</blockquote>
<h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><h2 id="安装vite"><a href="#安装vite" class="headerlink" title="安装vite"></a>安装vite</h2><p>中文文档： <a class="link"   href="https://cn.vitejs.dev/guide/" >https://cn.vitejs.dev/guide/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>使用 NPM:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm create vite@latest<br></code></pre></td></tr></table></figure></div>
<p>使用 Yarn:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ yarn create vite<br></code></pre></td></tr></table></figure></div>

<p>结果如下<br><img src="https://s2.loli.net/2024/08/26/dxMni1cpNw3TVZE.png"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>然后使用vscode中的project manager 来对我们的项目进行管理<br><img src="https://s2.loli.net/2024/08/26/LFhB1V8M4XRrgJi.png"><br>然后修改project.json<br><img src="https://s2.loli.net/2024/08/26/2NQdc7WsVG5g8Bb.png"></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kyfly_client&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rootPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\Golang\\github.com\\hybpjx\\kyfly_client&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></div>

<p>执行yarn 命令 安装资源包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn<br></code></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/Wr4ibtQ2YoM9eAq.png"></p>
<p>然后执行yarn dev </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yarn dev<br></code></pre></td></tr></table></figure></div>
<p><img src="https://s2.loli.net/2024/08/26/WonxGITwkDpv4ys.png"><br><img src="https://s2.loli.net/2024/08/26/HXT1glJmraRy8LK.png"></p>
<p>启动成功！！<br><img src="https://s2.loli.net/2024/08/26/Xz291aoQPh3VY7I.png"></p>
<p>然后置空所有其他无用的东西<br><img src="https://s2.loli.net/2024/08/26/oiWUVlOQxmRkF5D.png"><br>效果如上图</p>
]]></content>
      <categories>
        <category>快速安装</category>
      </categories>
  </entry>
  <entry>
    <title>常见的循环方式总结</title>
    <url>/2024/08/26/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<!-- toc -->

<ul>
<li><a href="#for%25E5%25BE%25AA%25E7%258E%25AF">for循环</a></li>
<li><a href="#while-%25E5%25BE%25AA%25E7%258E%25AF">while 循环</a></li>
<li><a href="#do%25E2%2580%25A6%25E2%2580%25A6while%25E5%25BE%25AA%25E7%258E%25AF">do……while循环</a></li>
<li><a href="#for-in%25E5%25BE%25AA%25E7%258E%25AF">for-in循环</a></li>
<li><a href="#for-of%25E5%25BE%25AA%25E7%258E%25AF">for-of循环</a></li>
<li><a href="#map()%25E5%25BE%25AA%25E7%258E%25AF">map()循环</a></li>
<li><a href="#forEach%25E5%25BE%25AA%25E7%258E%25AF">forEach循环</a></li>
<li><a href="#filter()%25E8%25BF%2587%25E6%25BB%25A4%25E5%25BE%25AA%25E7%258E%25AF">filter()过滤循环</a></li>
<li><a href="#JS%25E5%25AE%259E%25E7%258E%25B0Python%25E4%25B8%25AD%25E7%259A%2584zip%25E5%25BE%25AA%25E7%258E%25AF">JS实现Python中的zip循环</a></li>
<li><a href="#some()%25E5%2592%258Cevery()">some()和every()</a><ul>
<li><a href="#some()-%25E6%2596%25B9%25E6%25B3%2595">some() 方法</a></li>
<li><a href="#every()-%25E6%2596%25B9%25E6%25B3%2595">every() 方法</a></li>
</ul>
</li>
<li><a href="#reduce()-%25E5%2592%258C-reduceRight()">reduce() 和 reduceRight()</a><ul>
<li><a href="#reduce()-%25E6%2596%25B9%25E6%25B3%2595">reduce() 方法</a></li>
<li><a href="#reduceRight()-%25E6%2596%25B9%25E6%25B3%2595">reduceRight() 方法</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<hr>
<p>在Javascript中有很多种循环方式。有多种循环方式可以用来遍历数组、对象、以及执行一些重复性任务<br>但是有很多方式甚至从未用过，所以简单来总结一下JS中的循环</p>
<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for 循环是在您希望创建循环时经常使用的工具。</p>
<p>例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>次循环遍历`</span>)<br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/aIXyfYNPknOws2b.png"></p>
<h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><p> While语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。</p>
<p>例：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">100</span>) &#123;<br>    i = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;i&#125;</span>次循环遍历`</span>)<br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/WhvroJ96L1fxD3V.png"></p>
<h1 id="do……while循环"><a href="#do……while循环" class="headerlink" title="do……while循环"></a>do……while循环</h1><p>先运行循环代码 再执行判断条件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;打印b的值&gt;&gt;&gt;&gt;&gt;&quot;</span>,b);<br>    b++;<br>&#125; <span class="hljs-keyword">while</span> (b &lt; a); <span class="hljs-comment">// 当a小于等于b的时候终止她。</span><br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/Lf6raEnemSPudKT.png" alt="img"></p>
<ul>
<li>while：先判断后执行；</li>
<li>do-while：先执行再判断，即使初始条件不成立；do-while循环至少执行一次；</li>
</ul>
<h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h1><p>fo…in循环一般用于对象的遍历</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> kj = &#123;<br>    <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br><br><br><span class="hljs-comment">//使用for-in遍历这个对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> kj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k, kj[k])<br>&#125;<br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/aVIe54tKG16HLuJ.png" alt="img"><br>注！ <code>最好不要用for in遍历数组</code></p>
<h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h1><p>for…of 循环是 ES6 中新增的一种循环类型，它允许您遍历可迭代对象（例如数组、字符串、Map 或 Set）中的每个元素，并对其执行指定的操作。<br>for-of 可以更方便的循环遍历数组等</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/Ti758SE6pQ4groa.png" alt="img"></p>
<ul>
<li>for in遍历的是数组的索引（即键名）for in更适合遍历对象，不要使用for in遍历数组</li>
<li>for of遍历的是数组元素值。</li>
</ul>
<p><code>使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性</code></p>
<h1 id="map-循环"><a href="#map-循环" class="headerlink" title="map()循环"></a>map()循环</h1><p>map()是一种常用的数组方法，它可以将一个数组中的每个元素按照一定规则映射为一个新的数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> newArray = originalArray.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number)<br>  <span class="hljs-keyword">return</span> number * <span class="hljs-number">2</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray); <span class="hljs-comment">// Output: [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/SDE1oqAQxwfe2JB.png" alt="img"></p>
<h1 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h1><p>forEach()是一种常用的数组方法，可以帮助我们遍历一个数组并对其中的每个元素执行指定的操作。<br>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>originalArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number * <span class="hljs-number">2</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/UVAELG7gnPkWabm.png" alt="img"></p>
<p>forEach()方法没有返回值，因此我们不能将其运行结果赋值给其他变量</p>
<h1 id="filter-过滤循环"><a href="#filter-过滤循环" class="headerlink" title="filter()过滤循环"></a>filter()过滤循环</h1><p>filter()是一种常用的数组方法，它可以帮助我们按照特定条件筛选出一个数组中的部分元素并返回一个新的数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> filteredArray = originalArray.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 只返回能被2整除的数 也就是偶数</span><br>  <span class="hljs-keyword">return</span> number % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filteredArray);<br></code></pre></td></tr></table></figure></div>
<p>结果</p>
<p><img src="https://img2023.cnblogs.com/blog/2721529/202305/2721529-20230518174323044-1084795998.png" alt="img"></p>
<p><code>filter()方法不会修改原始数组，而是返回一个新的数组作为其运行结果。因此，如果我们需要在原始数组中删除一些元素，那么就应该使用splice()方法</code></p>
<h1 id="JS实现Python中的zip循环"><a href="#JS实现Python中的zip循环" class="headerlink" title="JS实现Python中的zip循环"></a>JS实现Python中的zip循环</h1><p>熟悉python的都知道ZIP循环面对循环两个数组很好用 那么在python中如何实现呢？</p>
<p>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">zip</span>(<span class="hljs-params">...arrays</span>) &#123;<br>    <span class="hljs-keyword">let</span> minLength = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(...arrays.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr.<span class="hljs-property">length</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; minLength; i++) &#123;<br>        <span class="hljs-keyword">yield</span> arrays.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> arr[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> aList = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> bList = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [a, b] <span class="hljs-keyword">of</span> <span class="hljs-title function_">zip</span>(aList, bList)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b)<br>&#125;<br></code></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/gXwcHoNVGIUQ5be.png" alt="img"></p>
<h1 id="some-和every"><a href="#some-和every" class="headerlink" title="some()和every()"></a>some()和every()</h1><p>some() 和 every() 方法是很有用的数组方法，它们都是用来遍历数组并返回布尔值。</p>
<h2 id="some-方法"><a href="#some-方法" class="headerlink" title="some() 方法"></a>some() 方法</h2><p>some() 方法用来检测数组中是否有至少一个元素满足指定条件。当任意一个元素满足条件，则该方法返回 true；否则，返回 false。</p>
<p>例子：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>];<br><span class="hljs-keyword">const</span> hasLargeNumber = numbers.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hasLargeNumber); <br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/QqKu6hwHDnRcUgP.png" alt="img"><br><code>很显然 只要有一个结果满足了 大于10的条件 就返回了true</code></p>
<h2 id="every-方法"><a href="#every-方法" class="headerlink" title="every() 方法"></a>every() 方法</h2><p>every() 方法与 some() 方法类似，不过它要求所有元素都满足指定条件。当所有元素都满足条件，则该方法返回 true；否则，返回 false。<br>例子</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>];<br><span class="hljs-keyword">const</span> hasLargeNumber = numbers.<span class="hljs-title function_">every</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">10</span>;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hasLargeNumber);<br></code></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/HZAvBc5yNROwaJC.png" alt="img"><br><code>很显然 只要有一个结果不满足 大于10的条件 就返回了false 和some方法相反</code></p>
<h1 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce() 和 reduceRight()"></a>reduce() 和 reduceRight()</h1><p>是 JavaScript 数组中常用的两个方法，它们都是用于将数组中的元素归纳为单个值。<br>它们可以帮助您迭代和聚合数组中的元素</p>
<h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce() 方法"></a>reduce() 方法</h2><p>reduce() 方法对数组中的每个元素执行一个由您提供的函数，并将其结果汇总为单个返回值。该方法需要传入两个参数：一个回调函数和一个可选的初始值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span><br><span class="hljs-keyword">const</span> sum = numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accumulator,currentValue)<br>  <span class="hljs-keyword">return</span> accumulator + currentValue;<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)<br></code></pre></td></tr></table></figure></div>
<p>结果<br><img src="https://s2.loli.net/2024/08/26/PwGEDJyBmpSvxF6.png" alt="img"></p>
<ul>
<li>accumulator： 表示当前已经累积的值初始值是0</li>
<li>currentValue 表示当前正在被遍历的数组元素。</li>
</ul>
<h2 id="reduceRight-方法"><a href="#reduceRight-方法" class="headerlink" title="reduceRight() 方法"></a>reduceRight() 方法</h2><p>reduceRight() 方法与 reduce() 方法类似，不过它是从数组的末尾开始遍历数组并执行回调函数。该方法也需要传入两个参数：一个回调函数和一个可选的初始值。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-comment">//accumulator： 表示当前已经累积的值初始值是0 currentValue 表示当前正在被遍历的数组元素。</span><br><span class="hljs-keyword">const</span> sum = numbers.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(accumulator,currentValue)<br>  <span class="hljs-keyword">return</span> accumulator + currentValue;<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)<br></code></pre></td></tr></table></figure></div>

<p>结果<br><img src="https://s2.loli.net/2024/08/26/vuGKBIpcnq4PUSf.png" alt="img"></p>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫&amp;反爬&amp;反反爬&amp;风控</title>
    <url>/2024/08/23/%E7%88%AC%E8%99%AB&amp;%E5%8F%8D%E7%88%AC&amp;%E5%8F%8D%E5%8F%8D%E7%88%AC&amp;%E9%A3%8E%E6%8E%A7/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff17807b45746e2f39a0ba5bbbbc990571cea967c10661cf8d9aabc035327959"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>美团ebooking登录爬取流程</title>
    <url>/2024/08/23/%E7%BE%8E%E5%9B%A2ebooking%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e72950ed82bb2884b416a9e89751159e849858ba4defb2d8c9f8c2e9be80d308">83e5631915b29311d4c3e64518d9116c9395bd0bf0663511fddd5e52bc0d8aa3e5bb18f4e03292ce901d25496b3c090e6234a36c8afa24646975318692b32b54510aa5eb10c57f0d1d138b1787cd44420ebab759e29d372cf2b4f3d7ea27a7ca146fd5d430a1a8dd7812ddb1042c132a5e64322e97f681db01bd05348f3713c9aa4580358160ee9c73174dddd339cc1e19e402ee3cf4ec9be94795e35af1886e223e9d85c63785a3e63509d7cd6610a570f0117f75257fa474e430c1ac5a4681b45d6ccbd354656c0780f89cda595ee744e6972217b239d19d029a3774fa63fa39ed3febfdb1df0201522ea3102744f14a1d3c4caacfd5bb25fbf6290ba52ae0a519ca4cbc9d1d93963231e8ef8f29301480d82d65fa340e90344409a5103c8b09a125689931dbb3149cae4ceb988ab0a53f13c78dc24dc23a89f39aeaf40b418d1ea5c8b50f39a0a41c552b2a4d4c462e0022484783da03e6085e0847acd9f31d8d77164535b46493bf24c47f8f815f2b00f31dc308607e6e266865192b21f845be16667aabb3c1f69812fd8e5f37a739759e92e95e56089ec124002816c78ff6bed4aa27edcc420247c3bb3b8134a2b8e95d3b4362313f1266d66fac1e608d25900caa1d20015524209bfe13ead4b402ea0ea9197d367bbd4b7127a93fc77783f7f73a0b2ede9fb764a2faea992cdc04fc3926f0ee494db5b2512857df81f46ffe796aa8d02282857f3058f48ffddff9ff914f827f122da22e930a6316471079b2d1cc40b9707f2f2350cc67b9a8bb9e3c7623a3ef064679bb4a3e71911402bbcfc4036ca2bd5aa952200778afc4726a897c2e9c11bbd49d30c7ee2727d372fdb674d1ca93e6e164f06b59b66c19997e25b6580edab48cc9d41c93172fa1deaa7b91808af443de530854a4715b3dcbc789fdb5929489ff618d07fb6ccddff1d6fdc6347aba8be899066f32f7b5c1045509d2f29dedc370a484f0393189f06807c5b2ba8a1fd4e839faa8539f45eaa22b383f7096aa5125eae299a20e167b9ef6d142ceb70ff42811b0abce881f84587ca99b70bb4de64e943c6661e1c146500fbd5f2f5e6a0b97e6bb22a1c5ed988257c443990d381e688e26467cd09c0758be066f0873b0f04f0583fe672e495b5816420556ab7040d4cf4d79fe7598bdf57fb1a42207588fa992c344b5afe6965bad08767dfe2519f68d47a2a416b082827171f402cbef58c0c1d41bfcf03bb1f9f61a650e5ee51a6cfc2537daa78cf63b10f2cac300efae99061cf3d493d758b2b84e6ccef1d09b6e0aa4a7f4f70154c72ac9065005d9f8b856b6cd05f1f6fc3190e517644c48b6f2e7059767b364885a962952f5010005457bbb4f869bd8144de160cf851348f9ba01b07d7b3b1696a61f64ab60c49e9af79a31d3cc6e23f14b89db0cdb395c4aa4da8198c766cdb0542a7982f2972bc77ec7cd19dfc645f1e1aa22bbc0ce2f3d38970f8e827c5d9de22c2b33f308c2ff82bcebd2693a8894f3aab9f886b153d159e9e741bab22273e858d03fb02c91809e85c5b93580c5c67baae3806f2e8868a50619fac6a95eba8a262da37a8d1a7f94e30dcec89fb9b91ee28893f1683c0ae32255a2de90a1197cdf3f6cdf4bc36f108046893ead6e6e1f0f7c8ecb75b013cc02873a39734413c1a6da5a1e559a96045c3fe519f8a9131aaafe6193d8ac89338efe78468a9ada5a1e5fa17e167080cfd131fc6960e2ec00811226ae9101595dc00cb0387b4beae865326edc9f9033e7f005209504770fc2fe8508c86f0e56a6ecc0c2b97b8c5580d985b38fd3f2d7875834ac7f18662a080d495c3cd2aefab2c808f4e81d756f1e71390439911829f5af0d1b7426ff140389d29c12f5dc0e8497edff10d9960f066650750a67e96bb599414d4b7e1a0a6d7423ac1900d3c5297c35c81ead4b5c91379a9f2cab293d6fd0769bd37e3bcafab794ed54467bdf63201eede881d0ffcfcb381911e10a536992adbc664bf5343b9c2178cfe3ef2f3b18cc4bc6c146e1604e7a2d220dc97f985bfd2f53745660a5326e24def3f9af66f8a85e556d12982df8ed2e0d40501617d6515e5d357e5cb0942629fe7bfe263b4b682142024f72db789a1963c7b1df8b0676f0fbd8999ffa93d5e2dda96e7d533ea8404b2ecd7a865a258e9559dc0b5dd5cf318e827eff41d3e31e313cab565586600ccb4ca46441c4f3c002fd5a21736b4b8ad377dc8727c6cbfe7ff84f130cf9b237fea7d338d705b96f769f7ed91cbfaad748ff36440cfb9d51127e775542016618aead557e6e52d11e75b7def505562a23d57b297ee8445fc2e7bcebe1aeb467114cf2ee2d22e3ba01f4d668e9f9927aed05b46109358c044d5f2823f558803af1290218c53fe452c7da17c4a2f5a8d34cd059d9b5fd6bd29b0af2ce5f7fb8714ad7ceb1212652294baf5625968955d813b1b7c1b8332c622002940bf280d0debb84cf3dd88654e97c60a42b5c7be037b614aa21ff5585e5cbb0902809b7794ee3858ce0d5984f8bbbf138f40e8253f41f52df88ffa215f6e15f6ebb62a5c06a959ef109424f4fdfb047427968fb067943f35ec8d04cf052b99f7ef704f466473260e14c63f8bbcc75467472347a046872a12408bc3f3632a74c08adb47bd34a799596f51d4d984d95a7134773d6e5c77311f7857ed10e24ef5ff044ec4fb11fd3164896df98346cfd0fb19d856dcc6752718bb186d6a24bc0b27f80ead4e9a148aacefb8e828f0f15a0e75827b397e8bee26914893888b99b225fc909a88c7ad65fa0aa4a50411c554f72ea72557074280b52989be0e52b3f19b1dc5c4bd6d7c69d55799e0f5ee0571009206e285c84f3c07f03f46e97b72febc1ee86027dd9266eea2900a6e431d707b7ca5c5423ea94cbe419cfdba25b0e5e70989b8af1e67ddf2adf3d969b612c229dc21096206271b27acc4460a84de8777df3a49e53fecc9bf76b0f011ce844b658f71c08ebed07b21f9cdddc22d48429b3a024c77a11402e98f4aec8033c2e16578c9316fd650a14d936b71397b7e586aaab472e6552f8ed07edb3aca1b894e25edff4013b0ccd9fb925bd099f06e2b11bb544dad9ff320bc41ad9ef3ded51d624bc9db6ffa67b61d060131df94655c7fd94991c0607acde0a63bccdd6a9fe76a215b7240a7b5334270c129bd482a78c29076938e4cc07ab382003c69a6709a9d066231e4ad5a36598a6ce16bbf9613efca037b8a119c62d0622d61d741c811ee55da401e46dd6293caa24357c0be989bb3eb76ce9fa20221f38a65da878d4851b69908c56defc9585691c11e036267a4f522feb9528e3377ad75410ea7e6384b11783f2000e108f1f2b85228022783995d2675406b45549a69fbc0fa2cd55d5648b78311848f94dbef5eb7d51d14565e831d786c41e3602b52bcd805e2e4532b7f0f4b05d844efbfcabd7f8eff7a63bf43a4269466651cf679d930c0ffafd2cac168364cc0b0437bd866fd5134ce2478c4824d0f7b169572e61d2b8dfee15f4aebb3a39b1bf0187bea5bf1983f6c2f81a797763d24d3fe0bc7d51f14437a686eb7225c66e43f7842a1c01f06ab4fdee703c039cffd2dc224a19fe43fbd18dad8ea1873443aa52d174835f0b40dd93239c0d7f3a0c4fbd971451482d3a339bf1d4e504686625747290249a2ef97c7970342a106bffac71563ffe76b37a87756c3a6f221b529e77610c64dc8e522e6c1318898e29e63ffd93fb4f72a9854df54bcbd37c4459255a281c3bb5186654806a05f26fffa7d7745faa9fa1da78589b5ada561d026840e3cb1f7126ec5f300e19bbb2b5abd99441c085a7c88d598513266047e35a62126d074acf5a1b77042c28b8a0a041cdea0545ef9a91fb39044c16f100b712e6366b01af9f1fc0f09e7be7c9342c880c5dbee26010d2bc7f0d5ff56758c4abbd4aa58ecba7aaa289c9599a61afe97dd8b3c3134d046811a34c0b2786508f44f2a00a87b1193a842be617a21e88613cf2e2871c418e21e651871a23d401749d3412c66201efbe63cc9b9a4a19aaf7476193d2dba43832297c322f5d85da029ab373cd37ad6cad991e8404e6c1e0fa6a43d91ba2c7ef4332d03a754030b658d096ef4b4d7f16ca00966836928c922711059abe7b96ed59f8c000eb7e58904e8c91965d6b4364b9659b7993992443b052027670408ba772a66bfb2c6ddb93fb4a2e69e60c29f9137432adf57e52331cb063fdf0cc30b1761a87bff00755b330ab33191695b07b0dbd9ae15847d57578488690524e338922be2ef019a120556e7d5180a082bcfe62d4903e04b257d38dfce5b8151af063b2eda7a05caf3e3162ff01c69a78af470fcc4dce6e284343421164afe8339544081ea8592d78df03157cd87bfc605b5e30c223527583b98bfb4659b8e42ebb2317095c54220b293d84b9cab5d1b303b73855d8966db4f22c7c8d594a8d876041cc615e333c7a915de1c02ce9f70b44925268b466e43d9a32ff742e1441f528d7212b460a2da1494cefdcd28f214589696647775dde728ee8d23527a7be5b3a567b471c194df62d003bda38b688117c77b810</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>项目流程</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
</search>
